// bot/src/index.js
require('dotenv').config();
const { Telegraf, Scenes, session } = require('telegraf');
const { message } = require('telegraf/filters');

// Handlers
const LunarHandler = require('./handlers/lunar');
const NumerologyHandler = require('./handlers/numerology');
const { handleStart, handleRestart } = require('./handlers/start');
const { handleDaily } = require('./handlers/daily');

// Utils
const { createInlineKeyboard } = require('./utils/keyboards');
const logger = require('./utils/logger');
const apiService = require('./services/api');

// –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è handlers
const lunarHandler = new LunarHandler();
const numerologyHandler = new NumerologyHandler();

// Middleware
bot.use(session());

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const getMainMenu = () => {
  return createInlineKeyboard([
    [
      { text: 'üÉè –î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞', callback_data: 'daily_card' },
      { text: 'üîÆ –ì–∞–¥–∞–Ω–∏–µ', callback_data: 'reading_menu' }
    ],
    [
      { text: 'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è', callback_data: 'numerology_menu' },
      { text: 'üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data: 'lunar_menu' }
    ],
    [
      { text: 'üë• –ì—Ä—É–ø–ø–æ–≤—ã–µ –≥–∞–¥–∞–Ω–∏—è', callback_data: 'group_menu' },
      { text: 'üë´ –î—Ä—É–∑—å—è', callback_data: 'friends_menu' }
    ],
    [
      { text: 'üíé –ü—Ä–µ–º–∏—É–º', callback_data: 'premium_menu' },
      { text: 'üì± –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: process.env.WEBAPP_URL } }
    ]
  ]);
};

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  await handleStart(bot, ctx.message);
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.help(async (ctx) => {
  const helpMessage = `üìñ *MISTIKA - –°–ø—Ä–∞–≤–∫–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
üÉè */daily* - –ü–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é –∫–∞—Ä—Ç—É
üîÆ */reading* - –ü—Ä–æ–≤–µ—Å—Ç–∏ –≥–∞–¥–∞–Ω–∏–µ
üî¢ */numerology* - –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è
üåô */lunar* - –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
üë• */group* - –ì—Ä—É–ø–ø–æ–≤—ã–µ –≥–∞–¥–∞–Ω–∏—è

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
‚Ä¢ –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—à–µ
‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

*–ü—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
üíé –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç
üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ò–ò
üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
üîÆ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @mistika_support`;

  await ctx.reply(helpMessage, {
    parse_mode: 'Markdown',
    reply_markup: createInlineKeyboard([
      [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
    ])
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries
bot.on('callback_query', async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;
    
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (data === 'main_menu') {
      const message = `üîÆ *MISTIKA - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: getMainMenu()
      });
      return;
    }

    // –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è
    if (data === 'numerology_menu') {
      await numerologyHandler.handleNumerologyMenu(ctx);
      return;
    }

    if (data === 'numerology_calculate') {
      await numerologyHandler.handleCalculateStart(ctx);
      return;
    }

    if (data === 'numerology_compatibility') {
      await numerologyHandler.handleCompatibility(ctx);
      return;
    }

    if (data === 'numerology_name') {
      await numerologyHandler.handleNameAnalysis(ctx);
      return;
    }

    if (data === 'numerology_year') {
      await numerologyHandler.handlePersonalYear(ctx);
      return;
    }

    // –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    if (data === 'lunar_menu') {
      await lunarHandler.handleLunarMenu(ctx);
      return;
    }

    if (data === 'lunar_current') {
      await lunarHandler.handleCurrentPhase(ctx);
      return;
    }

    if (data === 'lunar_calendar') {
      await lunarHandler.handleCalendar(ctx);
      return;
    }

    if (data === 'lunar_recommendations') {
      await lunarHandler.handleRecommendations(ctx);
      return;
    }

    if (data === 'lunar_rituals') {
      await lunarHandler.handleRituals(ctx);
      return;
    }

    if (data === 'lunar_diary') {
      await lunarHandler.handleDiary(ctx);
      return;
    }

    if (data === 'lunar_next_event') {
      await lunarHandler.handleNextEvent(ctx);
      return;
    }

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
    if (data === 'restart') {
      await handleRestart(bot, ctx.callbackQuery);
      return;
    }

    // –î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞  
    if (data === 'daily_card') {
      // TODO: –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–º –ø—Ä—è–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –±–æ—Ç–µ
      await ctx.editMessageText('üÉè *–î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞*\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–π –∫–∞—Ä—Ç—ã —Å –∫—Ä–∞—Å–∏–≤–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π!', {
        parse_mode: 'Markdown',
        reply_markup: createInlineKeyboard([
          [{ text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: `${process.env.WEBAPP_URL}/daily` } }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
        ])
      });
      return;
    }

    // –ì–∞–¥–∞–Ω–∏—è
    if (data === 'reading_menu') {
      await ctx.editMessageText('üîÆ *–ì–∞–¥–∞–Ω–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–∞–¥–∞–Ω–∏—è –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞!', {
        parse_mode: 'Markdown',
        reply_markup: createInlineKeyboard([
          [{ text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: `${process.env.WEBAPP_URL}/spreads` } }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
        ])
      });
      return;
    }

    // –ü—Ä–µ–º–∏—É–º
    if (data === 'premium_menu') {
      await ctx.editMessageText('üíé *–ü—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏*\n\n–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º!', {
        parse_mode: 'Markdown',
        reply_markup: createInlineKeyboard([
          [{ text: 'üì± –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', web_app: { url: `${process.env.WEBAPP_URL}/premium` } }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
        ])
      });
      return;
    }

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    await ctx.answerCallbackQuery();

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query:', error);
    await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on(message('text'), async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
    await numerologyHandler.handleTextInput(ctx);
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
  }
});

// –ö–æ–º–∞–Ω–¥—ã-shortcuts
bot.command('daily', async (ctx) => {
  // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
  // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  await ctx.reply('üÉè –î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!', {
    reply_markup: createInlineKeyboard([
      [{ text: 'üì± –û—Ç–∫—Ä—ã—Ç—å', web_app: { url: `${process.env.WEBAPP_URL}/daily` } }]
    ])
  });
});

bot.command('reading', async (ctx) => {
  await ctx.reply('üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –≥–∞–¥–∞–Ω–∏–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!', {
    reply_markup: createInlineKeyboard([
      [{ text: 'üì± –û—Ç–∫—Ä—ã—Ç—å', web_app: { url: `${process.env.WEBAPP_URL}/spreads` } }]
    ])
  });
});

bot.command('numerology', async (ctx) => {
  await numerologyHandler.handleNumerologyMenu(ctx);
});

bot.command('lunar', async (ctx) => {
  await lunarHandler.handleLunarMenu(ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  logger.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const startBot = async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API —Å–µ—Ä–≤–µ—Ä–æ–º
    try {
      await apiService.healthCheck();
      logger.info('API server connection established');
    } catch (error) {
      logger.warn('API server not available, bot will continue but with limited functionality:', error.message);
    }

    if (process.env.NODE_ENV === 'production') {
      // Webhook —Ä–µ–∂–∏–º –¥–ª—è production
      const webhookUrl = `${process.env.TELEGRAM_WEBHOOK_URL}/api/telegram/webhook`;
      await bot.telegram.setWebhook(webhookUrl);
      logger.info(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    } else {
      // Polling —Ä–µ–∂–∏–º –¥–ª—è development
      await bot.launch();
      logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ');
    }

    // Graceful stop
    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  startBot();
}

module.exports = bot;