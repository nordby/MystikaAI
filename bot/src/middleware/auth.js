// bot/src/middleware/auth.js
const axios = require('axios');
const logger = require('../utils/logger');

/**
 * Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram
 */
class AuthMiddleware {
    constructor(apiBaseUrl, botToken) {
        this.apiBaseUrl = apiBaseUrl;
        this.botToken = botToken;
        this.userCache = new Map();
        this.cacheTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async authenticateUser(telegramUser) {
        try {
            const userId = telegramUser.id.toString();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            const cachedUser = this.userCache.get(userId);
            if (cachedUser && Date.now() - cachedUser.timestamp < this.cacheTimeout) {
                return cachedUser.user;
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userData = {
                telegramId: telegramUser.id,
                firstName: telegramUser.first_name,
                lastName: telegramUser.last_name || null,
                username: telegramUser.username || null,
                languageCode: telegramUser.language_code || 'ru'
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é/–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            const response = await axios.post(`${this.apiBaseUrl}/auth/telegram`, userData);
            
            if (response.data.success) {
                const user = response.data.user;
                
                // –ö—ç—à–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                this.userCache.set(userId, {
                    user: user,
                    timestamp: Date.now()
                });
                
                return user;
            } else {
                throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
            }

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getApiClientForUser(telegramUser) {
        try {
            const user = await this.authenticateUser(telegramUser);
            
            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å —Ç–æ–∫–µ–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const apiClient = axios.create({
                baseURL: this.apiBaseUrl,
                headers: {
                    'Authorization': `Bearer ${user.token}`,
                    'Content-Type': 'application/json'
                },
                timeout: 30000
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
            apiClient.interceptors.response.use(
                response => response,
                error => {
                    if (error.response?.status === 401) {
                        // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
                        this.userCache.delete(telegramUser.id.toString());
                    }
                    return Promise.reject(error);
                }
            );

            return apiClient;

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª–∏–µ–Ω—Ç–∞:', error);
            throw error;
        }
    }

    /**
     * Middleware –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
     */
    withAuth(handler) {
        return async (bot, msg, ...args) => {
            try {
                const user = msg.from;
                if (!user) {
                    await bot.sendMessage(msg.chat.id, 
                        '‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
                const api = await this.getApiClientForUser(user);
                
                // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å API –∫–ª–∏–µ–Ω—Ç–æ–º
                await handler(bot, msg, api, ...args);

            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –≤ middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
                
                await bot.sendMessage(msg.chat.id,
                    '‚ùå <b>–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n' +
                    '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à—É –ª–∏—á–Ω–æ—Å—Ç—å.\n' +
                    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start', {
                    parse_mode: 'HTML'
                });
            }
        };
    }

    /**
     * Middleware –¥–ª—è callback query
     */
    withAuthCallback(handler) {
        return async (bot, callbackQuery, ...args) => {
            try {
                const user = callbackQuery.from;
                if (!user) {
                    await bot.answerCallbackQuery(callbackQuery.id, {
                        text: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
                    });
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
                const api = await this.getApiClientForUser(user);
                
                // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å API –∫–ª–∏–µ–Ω—Ç–æ–º
                await handler(bot, callbackQuery, api, ...args);

            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –≤ callback middleware:', error);
                
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
                });
                
                await bot.sendMessage(callbackQuery.message.chat.id,
                    '‚ùå <b>–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n' +
                    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start', {
                    parse_mode: 'HTML'
                });
            }
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
     */
    requiresPremium(handler) {
        return this.withAuth(async (bot, msg, api, ...args) => {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                const userResponse = await api.get('/auth/profile');
                const user = userResponse.data.user;

                if (!user.isPremium) {
                    await bot.sendMessage(msg.chat.id,
                        'üíé <b>–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è</b>\n\n' +
                        '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n' +
                        '–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º!', {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [[
                                {
                                    text: 'üíé –£–∑–Ω–∞—Ç—å –æ –ø—Ä–µ–º–∏—É–º',
                                    callback_data: 'premium_info'
                                }
                            ]]
                        }
                    });
                    return;
                }

                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–µ–º–∏—É–º, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                await handler(bot, msg, api, ...args);

            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞:', error);
                await bot.sendMessage(msg.chat.id,
                    '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏');
            }
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    checkLimits(limitType, maxCount = 3) {
        return this.withAuth(async (bot, msg, api, handler, ...args) => {
            try {
                const userResponse = await api.get('/auth/profile');
                const user = userResponse.data.user;

                // –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∏–º–µ—é—Ç –ª–∏–º–∏—Ç–æ–≤
                if (user.isPremium) {
                    await handler(bot, msg, api, ...args);
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                const limitsResponse = await api.get(`/auth/limits/${limitType}`);
                const limits = limitsResponse.data;

                if (limits.used >= maxCount) {
                    await bot.sendMessage(msg.chat.id,
                        `‚è∞ <b>–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω</b>\n\n` +
                        `–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ ${maxCount} –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n` +
                        `–û—Ñ–æ—Ä–º–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!`, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: 'üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–º–∏—É–º',
                                        callback_data: 'premium_info'
                                    }
                                ],
                                [
                                    {
                                        text: '‚è∞ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≤—Ç—Ä–∞',
                                        callback_data: 'close_message'
                                    }
                                ]
                            ]
                        }
                    });
                    return;
                }

                // –õ–∏–º–∏—Ç –Ω–µ –∏—Å—á–µ—Ä–ø–∞–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                await handler(bot, msg, api, ...args);

            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤:', error);
                await handler(bot, msg, api, ...args); // –í—ã–ø–æ–ª–Ω—è–µ–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            }
        });
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    clearCache() {
        this.userCache.clear();
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞
     */
    removeFromCache(telegramId) {
        this.userCache.delete(telegramId.toString());
    }
}

module.exports = AuthMiddleware;