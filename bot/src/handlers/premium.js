// bot/src/handlers/premium.js
const { formatPremiumFeatures, formatSubscriptionStatus } = require('../utils/messages');
const { createPremiumKeyboard, createSubscriptionKeyboard } = require('../utils/keyboards');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
 */
async function handlePremiumInfo(bot, callbackQuery, api) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;

    try {
        await bot.answerCallbackQuery(callbackQuery.id);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ
        const subscriptionResponse = await api.get('/payments/subscription');
        const subscription = subscriptionResponse.data.subscription;

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã
        const plansResponse = await api.get('/payments/plans');
        const plans = plansResponse.data.plans;

        const premiumText = formatPremiumFeatures(subscription, plans);

        await bot.sendMessage(chatId, premiumText, {
            parse_mode: 'HTML',
            reply_markup: createPremiumKeyboard(subscription, plans)
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–º–∏—É–º:', error);
        
        await bot.sendMessage(chatId,
            '‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n' +
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
                        callback_data: 'premium_info'
                    }
                ]]
            }
        });
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
 */
async function handleSelectPlan(bot, callbackQuery, api) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const planId = callbackQuery.data.split('_')[2];

    try {
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–°–æ–∑–¥–∞—é –ø–ª–∞—Ç–µ–∂...'
        });

        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        const paymentResponse = await api.post('/payments/create', {
            planId: planId,
            paymentMethod: 'telegram'
        });

        if (paymentResponse.data.success) {
            const payment = paymentResponse.data.payment;
            
            await bot.sendMessage(chatId,
                'üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n' +
                `üíé –ü–ª–∞–Ω: ${payment.planName}\n` +
                `üí∞ –°—É–º–º–∞: ${payment.amount} ${payment.currency}\n\n` +
                'üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram', {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å',
                                url: payment.paymentUrl
                            }
                        ],
                        [
                            {
                                text: 'üìã –î—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã',
                                web_app: { 
                                    url: `${process.env.WEBAPP_URL}/premium/payment/${payment.id}` 
                                }
                            }
                        ],
                        [
                            {
                                text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º',
                                callback_data: 'premium_info'
                            }
                        ]
                    ]
                }
            });
        } else {
            throw new Error(paymentResponse.data.message);
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
        
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'
        });

        await bot.sendMessage(chatId,
            '‚ùå <b>–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</b>\n\n' +
            '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.', {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
                            callback_data: `select_plan_${planId}`
                        }
                    ],
                    [
                        {
                            text: 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                            url: 'https://t.me/mistika_support'
                        }
                    ]
                ]
            }
        });
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
 */
async function handleSubscriptionStatus(bot, callbackQuery, api) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;

    try {
        await bot.answerCallbackQuery(callbackQuery.id);

        const response = await api.get('/payments/subscription');
        const subscription = response.data.subscription;

        const statusText = formatSubscriptionStatus(subscription);

        await bot.sendMessage(chatId, statusText, {
            parse_mode: 'HTML',
            reply_markup: createSubscriptionKeyboard(subscription)
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        
        await bot.sendMessage(chatId,
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏', {
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
                        callback_data: 'subscription_status'
                    }
                ]]
            }
        });
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
 */
async function handleCancelSubscription(bot, callbackQuery, api) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await bot.sendMessage(chatId,
            '‚ö†Ô∏è <b>–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n' +
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n\n' +
            '‚ùóÔ∏è –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º:\n' +
            '‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è\n' +
            '‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã\n' +
            '‚Ä¢ AI –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n' +
            '‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã\n' +
            '‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å',
                            callback_data: 'confirm_cancel_subscription'
                        }
                    ],
                    [
                        {
                            text: '‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å',
                            callback_data: 'subscription_status'
                        }
                    ]
                ]
            }
        });

        await bot.answerCallbackQuery(callbackQuery.id);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–û—à–∏–±–∫–∞'
        });
    }
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
 */
async function handleConfirmCancelSubscription(bot, callbackQuery, api) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;

    try {
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–û—Ç–º–µ–Ω—è—é –ø–æ–¥–ø–∏—Å–∫—É...'
        });

        const response = await api.post('/payments/cancel-subscription');
        
        if (response.data.success) {
            await bot.editMessageText(
                '‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n' +
                '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n' +
                '–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.\n\n' +
                'üí° –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üîÑ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                                callback_data: 'premium_info'
                            }
                        ],
                        [
                            {
                                text: 'üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏',
                                callback_data: 'subscription_status'
                            }
                        ]
                    ]
                }
            });
        } else {
            throw new Error(response.data.message);
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã'
        });

        await bot.editMessageText(
            '‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n' +
            '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.', {
            chat_id: chatId,
            message_id: callbackQuery.message.message_id,
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
                            callback_data: 'cancel_subscription'
                        }
                    ],
                    [
                        {
                            text: 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                            url: 'https://t.me/mistika_support'
                        }
                    ]
                ]
            }
        });
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
 */
async function handlePaymentHistory(bot, callbackQuery, api) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;

    try {
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é...'
        });

        const response = await api.get('/payments/history?limit=5');
        
        if (response.data.success && response.data.history.payments.length > 0) {
            let historyText = 'üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n';
            
            response.data.history.payments.forEach((payment, index) => {
                const date = new Date(payment.createdAt).toLocaleDateString('ru-RU');
                const status = payment.status === 'completed' ? '‚úÖ' : payment.status === 'pending' ? '‚è≥' : '‚ùå';
                historyText += `${index + 1}. ${date} - ${payment.amount} ${payment.currency} ${status}\n`;
                historyText += `   ${payment.planName}\n\n`;
            });

            historyText += 'üí° <i>–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</i>';

            await bot.sendMessage(chatId, historyText, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
                                web_app: { 
                                    url: `${process.env.WEBAPP_URL}/premium/history` 
                                }
                            }
                        ],
                        [
                            {
                                text: 'üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏',
                                callback_data: 'subscription_status'
                            }
                        ]
                    ]
                }
            });
        } else {
            await bot.sendMessage(chatId,
                'üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞</b>\n\n' +
                '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π.\n' +
                '–û—Ñ–æ—Ä–º–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É!', {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [[
                        {
                            text: 'üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                            callback_data: 'premium_info'
                        }
                    ]]
                }
            });
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
        
        await bot.sendMessage(chatId,
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π', {
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
                        callback_data: 'payment_history'
                    }
                ]]
            }
        });
    }
}

module.exports = {
    handlePremiumInfo,
    handleSelectPlan,
    handleSubscriptionStatus,
    handleCancelSubscription,
    handleConfirmCancelSubscription,
    handlePaymentHistory
};