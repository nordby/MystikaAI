// bot/src/handlers/premium.js
const apiService = require('../services/api');
const logger = require('../utils/logger');

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
 */
function getSubscriptionPlanName(planId) {
    const planNames = {
        'monthly_premium': '–ú–µ—Å—è—á–Ω—ã–π Premium',
        'yearly_premium': '–ì–æ–¥–æ–≤–æ–π Premium',
        'yearly_premium_plus': '–ì–æ–¥–æ–≤–æ–π Premium Plus'
    };
    return planNames[planId] || planId;
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /premium - –ø–æ–∫–∞–∑ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
 */
async function handlePremium(bot, msg, userToken) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const subscriptionResponse = await apiService.get(`/api/v1/payments/subscription/${userId}`);
        const { isPremium, subscription } = subscriptionResponse;

        if (isPremium && subscription) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–µ–º–∏—É–º
            const daysLeft = subscription.daysLeft;
            const expiresAt = new Date(subscription.endDate).toLocaleDateString('ru-RU');
            const tier = subscription.tier || 'premium';
            const isPremiumPlus = tier === 'premium_plus';
            
            let featuresText = '‚ú® <b>–í–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n' +
                '‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è\n' +
                '‚Ä¢ –í—Å–µ —Ä–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ\n' +
                '‚Ä¢ –ò–ò-–∞–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç\n' +
                '‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n' +
                '‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –≤ PDF\n' +
                '‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è\n' +
                '‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–≤';
            
            if (isPremiumPlus) {
                featuresText += '\n‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n' +
                    '‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã\n' +
                    '‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n' +
                    '‚Ä¢ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã\n' +
                    '‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞';
            }
            
            await bot.sendMessage(chatId,
                `üíé <b>–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ ${isPremiumPlus ? 'Premium Plus' : 'Premium'} –ø–æ–¥–ø–∏—Å–∫–∞!</b>\n\n` +
                `üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> ${expiresAt}\n` +
                `‚è∞ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> ${daysLeft}\n` +
                `üì¶ <b>–ü–ª–∞–Ω:</b> ${getSubscriptionPlanName(subscription.planId)}\n\n` +
                featuresText, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üîÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                                web_app: { url: `${process.env.WEBAPP_URL || 'https://mystika.systems.cv'}/spreads` }
                            }
                        ],
                        [
                            {
                                text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                                web_app: { url: `${process.env.WEBAPP_URL || 'https://mystika.systems.cv'}/profile` }
                            }
                        ]
                    ]
                }
            });
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
        await showSubscriptionPlans(bot, chatId, userId);

    } catch (error) {
        logger.error('Premium handler error:', error.message);
        await bot.sendMessage(chatId,
            '‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.', {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
                        callback_data: 'premium_info'
                    }
                ]]
            }
        });
    }
}

/**
 * –ü–æ–∫–∞–∑ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
 */
async function showSubscriptionPlans(bot, chatId, userId) {
    try {
        const plansResponse = await apiService.get('/api/v1/payments/plans');
        const { plans } = plansResponse;

        let plansText = 'üíé <b>MISTIKA Premium</b>\n\n' +
            'üåü <b>–û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –º–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫!</b>\n\n';

        const keyboards = [];

        plans.forEach((plan, index) => {
            const isYearly = plan.id.includes('yearly');
            const isPremiumPlus = plan.id.includes('premium_plus');
            let savings = '';
            
            if (isYearly && !isPremiumPlus) {
                savings = ' üî• –°–ö–ò–î–ö–ê 40%';
            } else if (isPremiumPlus) {
                savings = ' ‚≠ê VIP';
            }
            
            plansText += `${index + 1}. <b>${plan.name}</b>${savings}\n`;
            plansText += `   üí∞ ${plan.price} ‚≠ê Stars\n`;
            plansText += `   üìÖ ${plan.duration} –¥–Ω–µ–π\n`;
            plansText += `   üìù ${plan.description}\n\n`;

            keyboards.push([{
                text: `${isPremiumPlus ? '‚≠ê ' : isYearly ? 'üî• ' : ''}${plan.name} - ${plan.price} ‚≠ê`,
                callback_data: `buy_premium_${plan.id}`
            }]);
        });

        plansText += '‚ú® <b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ Premium:</b>\n';
        plans[0].features.forEach(feature => {
            plansText += `‚Ä¢ ${feature}\n`;
        });

        keyboards.push([
            {
                text: 'üí´ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Stars?',
                callback_data: 'how_to_get_stars'
            }
        ]);

        await bot.sendMessage(chatId, plansText, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: keyboards
            }
        });

    } catch (error) {
        logger.error('Show subscription plans error:', error.message);
        throw error;
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏
 */
async function handleBuyPremium(bot, callbackQuery, userToken) {
    logger.info('handleBuyPremium called', { callbackQuery, userToken });
    
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const planId = callbackQuery.data.replace('buy_premium_', '');

    try {
        logger.info('Starting premium purchase', { userId, planId, chatId });

        // –°–æ–∑–¥–∞–µ–º Telegram Stars invoice
        logger.info('Creating stars invoice', { planId, userId });
        const invoiceResponse = await apiService.post('/api/v1/payments/stars/invoice', {
            planId: planId,
            userId: userId
        }, {
            headers: {
                'Authorization': `Bearer ${userToken}`
            }
        });

        logger.info('Invoice response received', { invoiceResponse });
        const { invoice } = invoiceResponse;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º invoice –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.sendInvoice(chatId, 
            invoice.title,
            invoice.description,
            invoice.payload,
            invoice.provider_token,
            invoice.currency,
            invoice.prices,
            {
                start_parameter: invoice.start_parameter,
                photo_url: invoice.photo_url,
                photo_width: invoice.photo_width,
                photo_height: invoice.photo_height,
                need_name: invoice.need_name,
                need_phone_number: invoice.need_phone_number,
                need_email: invoice.need_email,
                need_shipping_address: invoice.need_shipping_address,
                send_phone_number_to_provider: invoice.send_phone_number_to_provider,
                send_email_to_provider: invoice.send_email_to_provider,
                is_flexible: invoice.is_flexible
            });

        logger.info('Invoice sent successfully', {
            userId: userId,
            planId: planId,
            price: invoiceResponse.price
        });

    } catch (error) {
        logger.error('Buy premium error:', { 
            message: error.message, 
            stack: error.stack,
            userId: userId,
            planId: planId,
            chatId: chatId
        });

        await bot.sendMessage(chatId,
            '‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å invoice</b>\n\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.', {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
                        callback_data: `buy_premium_${planId}`
                    }
                ]]
            }
        });
    }
}

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Telegram Stars
 */
async function handleHowToGetStars(bot, callbackQuery) {
    const chatId = callbackQuery.message.chat.id;

    try {
        await bot.answerCallbackQuery(callbackQuery.id);

        await bot.sendMessage(chatId,
            '‚≠ê <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Telegram Stars?</b>\n\n' +
            'üî∏ <b>–í –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Telegram:</b>\n' +
            '1. –û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n' +
            '2. –í—ã–±–µ—Ä–∏—Ç–µ "Telegram Stars"\n' +
            '3. –ù–∞–∂–º–∏—Ç–µ "–ö—É–ø–∏—Ç—å Stars"\n' +
            '4. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ\n\n' +
            'üî∏ <b>–í Telegram Premium:</b>\n' +
            '‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ Stars –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü\n\n' +
            'üî∏ <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>\n' +
            '‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞\n' +
            '‚Ä¢ Apple Pay / Google Pay\n' +
            '‚Ä¢ Telegram Wallet\n\n' +
            'üí° <b>1 Star ‚âà 0.014 USD</b>\n' +
            '–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (50 ‚≠ê) ‚âà 0.70 USD\n' +
            '–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (360 ‚≠ê) ‚âà 5.04 USD', {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üíé –í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏',
                            callback_data: 'premium_info'
                        }
                    ],
                    [
                        {
                            text: 'üåê –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Stars',
                            url: 'https://telegram.org/blog/telegram-stars'
                        }
                    ]
                ]
            }
        });

    } catch (error) {
        logger.error('How to get stars error:', error.message);
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
        });
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö (callback)
 */
async function handlePremiumInfo(bot, callbackQuery, userToken) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;

    try {
        await bot.answerCallbackQuery(callbackQuery.id);
        await showSubscriptionPlans(bot, chatId, userId);
    } catch (error) {
        logger.error('Premium info callback error:', error.message);
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
        });
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–∞
 */
async function handlePreCheckoutQuery(bot, preCheckoutQuery) {
    const { id, invoice_payload, total_amount, currency, from } = preCheckoutQuery;
    
    try {
        
        logger.info('Pre-checkout query received', {
            queryId: id,
            payload: invoice_payload,
            amount: total_amount,
            currency: currency,
            userId: from.id
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        const response = await apiService.post('/api/v1/payments/stars/pre-checkout', {
            id: id,
            invoice_payload: invoice_payload,
            total_amount: total_amount,
            currency: currency,
            user_id: from.id
        });

        // –û—Ç–≤–µ—á–∞–µ–º Telegram –Ω–∞ pre-checkout query
        logger.info('Server response received', { 
            queryId: id, 
            response: response
        });
        
        logger.info('Answering pre-checkout query', { 
            queryId: id, 
            ok: response.ok, 
            errorMessage: response.error_message 
        });
        
        await bot.answerPreCheckoutQuery(id, response.ok, {
            error_message: response.error_message
        });

    } catch (error) {
        logger.error('Pre-checkout query error:', {
            message: error.message,
            stack: error.stack,
            queryId: id,
            userId: from.id
        });
        
        try {
            await bot.answerPreCheckoutQuery(preCheckoutQuery.id, false, {
                error_message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        } catch (answerError) {
            logger.error('Failed to answer pre-checkout query:', answerError.message);
        }
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
 */
async function handleSuccessfulPayment(bot, msg) {
    try {
        const { successful_payment } = msg;
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        logger.info('Successful payment received', {
            userId: userId,
            payment: successful_payment,
            telegramChargeId: successful_payment?.telegram_payment_charge_id,
            totalAmount: successful_payment?.total_amount
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await apiService.post('/api/v1/payments/stars/successful-payment', {
            telegram_payment_charge_id: successful_payment.telegram_payment_charge_id,
            provider_payment_charge_id: successful_payment.provider_payment_charge_id,
            invoice_payload: successful_payment.invoice_payload,
            total_amount: successful_payment.total_amount,
            currency: successful_payment.currency
        });

        if (response.success) {
            const { subscription } = response;
            const expiresAt = new Date(subscription.expiresAt).toLocaleDateString('ru-RU');
            
            await bot.sendMessage(chatId,
                'üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n' +
                `üíé <b>–ü–ª–∞–Ω:</b> ${subscription.planId === 'monthly_premium' ? '–ú–µ—Å—è—á–Ω—ã–π' : '–ì–æ–¥–æ–≤–æ–π'}\n` +
                `üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> ${expiresAt}\n\n` +
                '‚ú® <b>–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:</b>\n' +
                '‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è\n' +
                '‚Ä¢ –í—Å–µ —Ä–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ\n' +
                '‚Ä¢ –ò–ò-–∞–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç\n' +
                '‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n' +
                '‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n' +
                'üöÄ <b>–ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>', {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üîÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                                web_app: { url: `${process.env.WEBAPP_URL || 'https://mystika.systems.cv'}` }
                            }
                        ],
                        [
                            {
                                text: 'üåÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è',
                                callback_data: 'daily_card'
                            },
                            {
                                text: 'üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å',
                                callback_data: 'lunar_today'
                            }
                        ]
                    ]
                }
            });
        } else {
            throw new Error(response.message || 'Payment processing failed');
        }

    } catch (error) {
        logger.error('Successful payment handling error:', error.message);
        
        await bot.sendMessage(msg.chat.id,
            '‚ö†Ô∏è <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>\n\n' +
            '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.\n' +
            '–í–∞—à –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤—Ä—É—á–Ω—É—é.', {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
                        url: 'https://t.me/mistika_support'
                    }
                ]]
            }
        });
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π
 */
async function handlePremiumCallback(bot, query, api) {
    const data = query.data;
    
    if (data === 'premium_info') {
        await handlePremiumInfo(bot, query, api);
    } else if (data === 'premium_plans') {
        await showSubscriptionPlans(bot, query, api);
    } else if (data.startsWith('buy_premium_')) {
        await handleBuyPremium(bot, query, api);
    } else if (data === 'how_to_get_stars') {
        await handleHowToGetStars(bot, query, api);
    }
}

module.exports = {
    handlePremium,
    handlePremiumCallback,
    showSubscriptionPlans,
    handleBuyPremium,
    handleHowToGetStars,
    handlePremiumInfo,
    handlePreCheckoutQuery,
    handleSuccessfulPayment
};