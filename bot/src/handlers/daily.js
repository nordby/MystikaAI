// bot/src/handlers/daily.js
const { createDailyCardKeyboard } = require('../utils/keyboards');
const { dailyCardMessage, formatCardMessage } = require('../utils/messages');
const apiService = require('../services/api');
const logger = require('../utils/logger');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /daily - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π –∫–∞—Ä—Ç—ã
 */
async function handleDaily(bot, msg, userToken) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        const loadingMsg = await bot.sendMessage(chatId, 
            'üîÆ <i>–ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é –∫–∞—Ä—Ç—ã...</i>\n' +
            '‚ú® <i>–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Å—å –Ω–∞ –≤–∞—à—É —ç–Ω–µ—Ä–≥–∏—é...</i>', {
            parse_mode: 'HTML'
        });

        // –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—É—é –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ API
        const response = await apiService.getDailyCard(userToken);

        if (response.success) {
            const { card, isReversed, interpretation, date } = response;

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            await bot.deleteMessage(chatId, loadingMsg.message_id);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π
            const cardText = formatCardMessage(card, isReversed, interpretation, date);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (card.imageUrl) {
                await bot.sendPhoto(chatId, card.imageUrl, {
                    caption: cardText,
                    parse_mode: 'HTML',
                    reply_markup: createDailyCardKeyboard(card.id)
                });
            } else {
                await bot.sendMessage(chatId, cardText, {
                    parse_mode: 'HTML',
                    reply_markup: createDailyCardKeyboard(card.id)
                });
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
            await bot.sendMessage(chatId, 
                'üéØ <b>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –µ—â–µ?</b>', {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        ...(process.env.WEBAPP_URL ? [[
                            {
                                text: 'üé¥ –î—Ä—É–≥–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã',
                                web_app: { 
                                    url: `${process.env.WEBAPP_URL}/spreads` 
                                }
                            }
                        ]] : []),
                        [
                            {
                                text: 'üìñ –ò—Å—Ç–æ—Ä–∏—è –≥–∞–¥–∞–Ω–∏–π',
                                web_app: { 
                                    url: `${process.env.WEBAPP_URL}/history` 
                                }
                            },
                            {
                                text: 'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è',
                                callback_data: 'numerology_today'
                            }
                        ],
                        [
                            {
                                text: 'üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å',
                                callback_data: 'lunar_today'
                            }
                        ]
                    ]
                }
            });

        } else if (response.data.upgradeRequired) {
            // –ï—Å–ª–∏ –¥–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.deleteMessage(chatId, loadingMsg.message_id);
            
            await bot.sendMessage(chatId,
                'üåÖ <b>–î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞</b>\n\n' +
                '–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ—é –∫–∞—Ä—Ç—É –¥–Ω—è —Å–µ–≥–æ–¥–Ω—è.\n' +
                '–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –∫–∞—Ä—Ç—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!\n\n' +
                'üíé –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –ø–æ–¥–ø–∏—Å–∫–∏:', {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üíé –ü—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
                                callback_data: 'premium_info'
                            }
                        ],
                        [
                            {
                                text: 'üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –∫–∞—Ä—Ç—É',
                                web_app: { 
                                    url: `${process.env.WEBAPP_URL}/daily` 
                                }
                            }
                        ]
                    ]
                }
            });
        } else {
            throw new Error(response.data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–π –∫–∞—Ä—Ç—ã:', error);
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –µ—Å—Ç—å
        try {
            await bot.deleteMessage(chatId, loadingMsg.message_id);
        } catch (e) {
            // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        }

        if (error.response?.status === 401) {
            await bot.sendMessage(chatId,
                'üîê <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start', {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [[
                        {
                            text: 'üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ',
                            callback_data: 'restart'
                        }
                    ]]
                }
            });
        } else if (error.response?.status === 429) {
            await bot.sendMessage(chatId,
                '‚è∞ <b>–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω</b>\n\n' +
                '–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n' +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É!', {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [[
                        {
                            text: 'üíé –£–∑–Ω–∞—Ç—å –æ –ü—Ä–µ–º–∏—É–º',
                            callback_data: 'premium_info'
                        }
                    ]]
                }
            });
        } else {
            await bot.sendMessage(chatId,
                '‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é –∫–∞—Ä—Ç—É</b>\n\n' +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.\n' +
                '<i>–ò–Ω–æ–≥–¥–∞ –∫–∞—Ä—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤—ã –æ—Ç–∫—Ä—ã—Ç—å—Å—è...</i>', {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
                                callback_data: 'daily_card'
                            }
                        ],
                        ...(process.env.WEBAPP_URL ? [[
                            {
                                text: 'üé¥ –î—Ä—É–≥–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã',
                                web_app: { 
                                    url: `${process.env.WEBAPP_URL}/spreads` 
                                }
                            }
                        ]] : [])
                    ]
                }
            });
        }
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–Ω–µ–≤–Ω—ã—Ö –∫–∞—Ä—Ç
 */
async function handleDailyHistory(bot, callbackQuery, api) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;

    try {
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é...'
        });

        const response = await api.get('/cards/daily/history?limit=7');

        if (response.data.success && response.data.history.length > 0) {
            let historyText = 'üìñ <b>–í–∞—à–∏ –¥–Ω–µ–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:</b>\n\n';
            
            response.data.history.forEach((reading, index) => {
                const date = new Date(reading.date).toLocaleDateString('ru-RU');
                historyText += `${index + 1}. ${date} - ${reading.card.card_name}`;
                if (reading.isReversed) historyText += ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)';
                historyText += '\n';
            });

            if (response.data.upgradeRequired) {
                historyText += '\nüíé <i>–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Premium</i>';
            } else {
                historyText += '\nüí° <i>–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</i>';
            }

            await bot.sendMessage(chatId, historyText, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [[
                        {
                            text: 'üìö –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è',
                            web_app: { 
                                url: `${process.env.WEBAPP_URL}/history/daily` 
                            }
                        }
                    ]]
                }
            });
        } else {
            await bot.sendMessage(chatId,
                'üìñ <b>–ò—Å—Ç–æ—Ä–∏—è –¥–Ω–µ–≤–Ω—ã—Ö –∫–∞—Ä—Ç –ø—É—Å—Ç–∞</b>\n\n' +
                '–ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –¥–Ω–µ–≤–Ω—É—é –∫–∞—Ä—Ç—É!', {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [[
                        {
                            text: 'üåÖ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è',
                            callback_data: 'daily_card'
                        }
                    ]]
                }
            });
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
        
        await bot.sendMessage(chatId,
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–Ω–µ–≤–Ω—ã—Ö –∫–∞—Ä—Ç', {
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
                        callback_data: 'daily_history'
                    }
                ]]
            }
        });
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–Ω–µ–≤–Ω–æ–π –∫–∞—Ä—Ç–µ
 */
async function handleDailyNotifications(bot, callbackQuery, api) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;

    try {
        await bot.answerCallbackQuery(callbackQuery.id);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const response = await api.get('/auth/profile');
        const user = response.data.user;

        const notificationsEnabled = user.notifications_enabled;

        await bot.sendMessage(chatId,
            'üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n' +
            `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–Ω–µ–≤–Ω–æ–π –∫–∞—Ä—Ç–µ: ${notificationsEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n\n` +
            '–ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∞—à–µ–π –∫–∞—Ä—Ç–µ –¥–Ω—è –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.', {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: notificationsEnabled ? 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å' : 'üîî –í–∫–ª—é—á–∏—Ç—å',
                            callback_data: `toggle_notifications_${!notificationsEnabled}`
                        }
                    ],
                    [
                        {
                            text: '‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è',
                            callback_data: 'set_notification_time'
                        }
                    ],
                    [
                        {
                            text: 'üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è',
                            web_app: { 
                                url: `${process.env.WEBAPP_URL}/settings/notifications` 
                            }
                        }
                    ]
                ]
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫'
        });
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
async function handleToggleNotifications(bot, callbackQuery, api) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const enable = callbackQuery.data.includes('true');

    try {
        const response = await api.put('/auth/profile', {
            notifications_enabled: enable
        });

        if (response.data.success) {
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: enable ? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ' : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå'
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.editMessageText(
                'üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>\n\n' +
                `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–Ω–µ–≤–Ω–æ–π –∫–∞—Ä—Ç–µ: ${enable ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n\n` +
                '–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: enable ? 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å' : 'üîî –í–∫–ª—é—á–∏—Ç—å',
                                callback_data: `toggle_notifications_${!enable}`
                            }
                        ],
                        [
                            {
                                text: 'üåÖ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É —Å–µ–π—á–∞—Å',
                                callback_data: 'daily_card'
                            }
                        ]
                    ]
                }
            });
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫'
        });
    }
}

module.exports = {
    handleDaily,
    handleDailyHistory,
    handleDailyNotifications,
    handleToggleNotifications
};