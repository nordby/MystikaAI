// bot/src/handlers/lunar.js
const { lunarService } = require('../../../server/src/services/lunarService');
const { createInlineKeyboard, createReplyKeyboard } = require('../utils/keyboards');
const { formatDate, formatMoonPhase } = require('../utils/formatters');
const { getMysticalLoadingMessage } = require('../utils/messages');

class LunarHandler {
  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ª—É–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  async handleLunarMenu(ctx) {
    try {
      const keyboard = createInlineKeyboard([
        [
          { text: 'üåô –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞', callback_data: 'lunar_current' },
          { text: 'üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data: 'lunar_calendar' }
        ],
        [
          { text: 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data: 'lunar_recommendations' },
          { text: 'üîÆ –†–∏—Ç—É–∞–ª—ã', callback_data: 'lunar_rituals' }
        ],
        [
          { text: 'üìä –ú–æ–π –ª—É–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫', callback_data: 'lunar_diary' },
          { text: '‚ö° –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ', callback_data: 'lunar_next_event' }
        ],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]);

      const message = `üåô *–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å*

–ò–∑—É—á–∞–π—Ç–µ –≤–ª–∏—è–Ω–∏–µ –ª—É–Ω–Ω—ã—Ö —Ñ–∞–∑ –Ω–∞ –≤–∞—à—É –∂–∏–∑–Ω—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:`;

      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, { 
          parse_mode: 'Markdown', 
          reply_markup: keyboard 
        });
      } else {
        await ctx.reply(message, { 
          parse_mode: 'Markdown', 
          reply_markup: keyboard 
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –ª—É–Ω–Ω–æ–º –º–µ–Ω—é:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã
  async handleCurrentPhase(ctx) {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      const loadingMsg = await ctx.editMessageText ? 
        ctx.editMessageText(getMysticalLoadingMessage('lunar'), { parse_mode: 'Markdown' }) :
        ctx.reply(getMysticalLoadingMessage('lunar'), { parse_mode: 'Markdown' });

      const currentPhase = await lunarService.getCurrentMoonPhase();
      
      const phaseEmojis = {
        'new_moon': 'üåë',
        'waxing_crescent': 'üåí',
        'first_quarter': 'üåì',
        'waxing_gibbous': 'üåî',
        'full_moon': 'üåï',
        'waning_gibbous': 'üåñ',
        'last_quarter': 'üåó',
        'waning_crescent': 'üåò'
      };

      const emoji = phaseEmojis[currentPhase.phase] || 'üåô';
      
      const message = `${emoji} *${currentPhase.name}*

üìä *–û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å:* ${currentPhase.illumination}%
üìÜ *–í–æ–∑—Ä–∞—Å—Ç –ª—É–Ω—ã:* ${currentPhase.age} –¥–Ω–µ–π
‚ö° *–≠–Ω–µ—Ä–≥–∏—è:* ${currentPhase.energy}%

üí´ *–û–ø–∏—Å–∞–Ω–∏–µ:*
${currentPhase.description}

–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏?`;

      const keyboard = createInlineKeyboard([
        [{ text: 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data: 'lunar_recommendations' }],
        [{ text: 'üîÆ –†–∏—Ç—É–∞–ª—ã', callback_data: 'lunar_rituals' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'lunar_menu' }]
      ]);

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∑—ã –ª—É–Ω—ã:', error);
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ª—É–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –º–µ—Å—è—Ü
  async handleCalendar(ctx) {
    try {
      const today = new Date();
      const calendar = await lunarService.generateCalendar(
        today.getFullYear(), 
        today.getMonth()
      );

      const monthNames = [
        '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
        '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
      ];

      let calendarText = `üìÖ *–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å - ${monthNames[today.getMonth()]} ${today.getFullYear()}*\n\n`;
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º
      const weeks = [];
      let currentWeek = [];
      
      calendar.forEach(day => {
        currentWeek.push(day);
        if (day.date.getDay() === 0 || day === calendar[calendar.length - 1]) {
          weeks.push([...currentWeek]);
          currentWeek = [];
        }
      });

      weeks.forEach((week, weekIndex) => {
        if (weekIndex < 2) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
          week.forEach(day => {
            const emoji = this.getPhaseEmoji(day.phase);
            const dayStr = day.isToday ? `*${day.day}*` : day.day;
            calendarText += `${dayStr}${emoji} `;
          });
          calendarText += '\n';
        }
      });

      calendarText += '\nüåë –ù–æ–≤–æ–ª—É–Ω–∏–µ  üåì –ß–µ—Ç–≤–µ—Ä—Ç–∏  üåï –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ';

      const keyboard = createInlineKeyboard([
        [
          { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥. –º–µ—Å—è—Ü', callback_data: 'lunar_prev_month' },
          { text: '‚û°Ô∏è –°–ª–µ–¥. –º–µ—Å—è—Ü', callback_data: 'lunar_next_month' }
        ],
        [{ text: 'üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data: 'lunar_detailed_calendar' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'lunar_menu' }]
      ]);

      await ctx.editMessageText(calendarText, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error);
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å.');
    }
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã
  async handleRecommendations(ctx) {
    try {
      const currentPhase = await lunarService.getCurrentMoonPhase();
      const recommendations = await lunarService.getPhaseRecommendations(currentPhase.phase);

      let message = `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–∞–∑—ã "${currentPhase.name}"*\n\n`;
      
      message += `‚úÖ *–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ:*\n`;
      recommendations.favorable.forEach(item => {
        message += `‚Ä¢ ${item}\n`;
      });

      message += `\n‚ùå *–ò–∑–±–µ–≥–∞—Ç—å:*\n`;
      recommendations.avoid.forEach(item => {
        message += `‚Ä¢ ${item}\n`;
      });

      message += `\n‚ö° *–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –¥–Ω—è:*\n${recommendations.energy}`;

      const keyboard = createInlineKeyboard([
        [{ text: 'üîÆ –†–∏—Ç—É–∞–ª—ã', callback_data: 'lunar_rituals' }],
        [{ text: 'üìù –ó–∞–ø–∏—Å–∞—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫', callback_data: 'lunar_add_diary' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'lunar_menu' }]
      ]);

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.');
    }
  }

  // –õ—É–Ω–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã
  async handleRituals(ctx) {
    try {
      const currentPhase = await lunarService.getCurrentMoonPhase();
      const rituals = await lunarService.getRitualsForPhase(currentPhase.phase);

      if (rituals.length === 0) {
        await ctx.editMessageText('üîÆ –î–ª—è —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –ª—É–Ω—ã –æ—Å–æ–±—ã—Ö —Ä–∏—Ç—É–∞–ª–æ–≤ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ.', {
          reply_markup: createInlineKeyboard([
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'lunar_menu' }]
          ])
        });
        return;
      }

      let message = `üîÆ *–†–∏—Ç—É–∞–ª—ã –¥–ª—è —Ñ–∞–∑—ã "${currentPhase.name}"*\n\n`;

      rituals.forEach((ritual, index) => {
        message += `${index + 1}. *${ritual.name}*\n`;
        message += `üìñ ${ritual.description}\n`;
        message += `‚è∞ –í—Ä–µ–º—è: ${ritual.duration}\n`;
        message += `üõ† –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${ritual.items.join(', ')}\n\n`;
      });

      const keyboard = createInlineKeyboard([
        [{ text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', url: `${process.env.WEBAPP_URL}/lunar` }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'lunar_menu' }]
      ]);

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∏—Ç—É–∞–ª–æ–≤:', error);
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∏—Ç—É–∞–ª—ã.');
    }
  }

  // –õ—É–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫
  async handleDiary(ctx) {
    try {
      const message = `üìä *–õ—É–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫*

–í–µ–¥–∏—Ç–µ –∑–∞–ø–∏—Å–∏ –æ —Å–≤–æ–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤ —Ä–∞–∑–Ω—ã–µ —Ñ–∞–∑—ã –ª—É–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ª—É–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤.

–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?`;

      const keyboard = createInlineKeyboard([
        [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data: 'lunar_add_entry' }],
        [{ text: 'üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏', callback_data: 'lunar_view_entries' }],
        [{ text: 'üìä –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è', callback_data: 'lunar_mood_analysis' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'lunar_menu' }]
      ]);

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞:', error);
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–Ω–µ–≤–Ω–∏–∫.');
    }
  }

  // –°–ª–µ–¥—É—é—â–µ–µ –ª—É–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
  async handleNextEvent(ctx) {
    try {
      const nextEvent = await lunarService.getNextSignificantEvent();

      if (!nextEvent) {
        await ctx.editMessageText('‚ö° –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –ª—É–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ.', {
          reply_markup: createInlineKeyboard([
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'lunar_menu' }]
          ])
        });
        return;
      }

      const emoji = this.getPhaseEmoji(nextEvent.phase);
      const message = `‚ö° *–°–ª–µ–¥—É—é—â–µ–µ –ª—É–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ*

${emoji} *${nextEvent.name}*
üìÖ ${formatDate(nextEvent.date)}
‚è∞ –ß–µ—Ä–µ–∑ ${nextEvent.daysUntil} –¥–Ω.

üí´ *–ó–Ω–∞—á–∏–º–æ—Å—Ç—å:* ${nextEvent.significance}

–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —ç—Ç–æ–º—É –¥–Ω—é –∑–∞—Ä–∞–Ω–µ–µ!`;

      const keyboard = createInlineKeyboard([
        [{ text: 'üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å', callback_data: `lunar_remind_${nextEvent.phase}` }],
        [{ text: 'üí° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞', callback_data: `lunar_prepare_${nextEvent.phase}` }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'lunar_menu' }]
      ]);

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è:', error);
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏—è—Ö.');
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  getPhaseEmoji(phase) {
    const emojis = {
      'new_moon': 'üåë',
      'waxing_crescent': 'üåí',
      'first_quarter': 'üåì',
      'waxing_gibbous': 'üåî',
      'full_moon': 'üåï',
      'waning_gibbous': 'üåñ',
      'last_quarter': 'üåó',
      'waning_crescent': 'üåò'
    };
    return emojis[phase] || 'üåô';
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
  async scheduleNotification(ctx, phase, date) {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await ctx.answerCallbackQuery('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    }
  }
}

module.exports = LunarHandler;