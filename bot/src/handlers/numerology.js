// bot/src/handlers/numerology.js
const numerologyService = require('../../../server/src/services/numerologyService');
const { createInlineKeyboard } = require('../utils/keyboards');
const { getMysticalLoadingMessage } = require('../utils/messages');

class NumerologyHandler {
  constructor() {
    this.userSessions = new Map(); // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  }

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
  async handleNumerologyMenu(ctx) {
    try {
      const keyboard = createInlineKeyboard([
        [
          { text: 'üî¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'numerology_calculate' },
          { text: 'üë• –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', callback_data: 'numerology_compatibility' }
        ],
        [
          { text: 'üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'numerology_profile' },
          { text: 'üîÆ –ü—Ä–æ–≥–Ω–æ–∑', callback_data: 'numerology_forecast' }
        ],
        [
          { text: 'üìù –ê–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–∏', callback_data: 'numerology_name' },
          { text: 'üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–¥', callback_data: 'numerology_year' }
        ],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]);

      const message = `üî¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è*

–û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–π–Ω—ã —á–∏—Å–µ–ª –∏ —É–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –æ–Ω–∏ –≥–æ–≤–æ—Ä—è—Ç –æ –≤–∞—à–µ–π —Å—É–¥—å–±–µ.

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:`;

      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, { 
          parse_mode: 'Markdown', 
          reply_markup: keyboard 
        });
      } else {
        await ctx.reply(message, { 
          parse_mode: 'Markdown', 
          reply_markup: keyboard 
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è
  async handleCalculateStart(ctx) {
    try {
      const userId = ctx.from.id;
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
      this.userSessions.set(userId, {
        step: 'waiting_birthdate',
        data: {}
      });

      const message = `üî¢ *–†–∞—Å—á–µ—Ç –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è*

–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è:
1. –í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
2. –í–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è

üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990`;

      const keyboard = createInlineKeyboard([
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'numerology_menu' }]
      ]);

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á–µ—Ç–∞:', error);
      await ctx.reply('–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
  async handleTextInput(ctx) {
    try {
      const userId = ctx.from.id;
      const session = this.userSessions.get(userId);

      if (!session) return;

      const text = ctx.message.text.trim();

      switch (session.step) {
        case 'waiting_birthdate':
          await this.processBirthDate(ctx, text, session);
          break;
          
        case 'waiting_fullname':
          await this.processFullName(ctx, text, session);
          break;
          
        case 'waiting_partner_birthdate':
          await this.processPartnerBirthDate(ctx, text, session);
          break;
          
        case 'waiting_partner_name':
          await this.processPartnerName(ctx, text, session);
          break;
          
        case 'waiting_name_analysis':
          await this.processNameAnalysis(ctx, text);
          break;
          
        case 'waiting_user_birthdate_for_compatibility':
          await this.processUserBirthDateForCompatibility(ctx, text, session);
          break;
          
        case 'waiting_user_name_for_compatibility':
          await this.processUserNameForCompatibility(ctx, text, session);
          break;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
  async processBirthDate(ctx, text, session) {
    const dateRegex = /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/;
    const match = text.match(dateRegex);

    if (!match) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)');
      return;
    }

    const [, day, month, year] = match;
    const birthDate = new Date(year, month - 1, day);

    if (isNaN(birthDate.getTime()) || birthDate > new Date()) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.');
      return;
    }

    session.data.birthDate = birthDate;
    session.step = 'waiting_fullname';
    this.userSessions.set(ctx.from.id, session);

    await ctx.reply(`‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${day}.${month}.${year}

üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):`, {
      reply_markup: createInlineKeyboard([
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'numerology_menu' }]
      ])
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏
  async processFullName(ctx, text, session) {
    if (text.length < 2) {
      await ctx.reply('‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.');
      return;
    }

    session.data.fullName = text;
    
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      await ctx.reply(getMysticalLoadingMessage('numerology'), {
        parse_mode: 'Markdown'
      });

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      const profile = await numerologyService.generateFullAnalysis(
        session.data.birthDate,
        session.data.fullName
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.saveUserProfile(ctx.from.id, session.data.birthDate, session.data.fullName);

      await this.sendProfileResult(ctx, profile);
      
      // –ù–ï –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
      // this.userSessions.delete(ctx.from.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      this.userSessions.delete(ctx.from.id);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è
  async sendProfileResult(ctx, profile) {
    try {
      let message = `üî¢ *–í–∞—à –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å*\n\n`;

      // –û—Å–Ω–æ–≤–Ω—ã–µ —á–∏—Å–ª–∞
      message += `üõ§ *–ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏:* ${profile.lifePath.number}\n`;
      message += `‚≠ê *–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã:* ${profile.destiny.number}\n`;
      message += `üí´ *–ß–∏—Å–ª–æ –¥—É—à–∏:* ${profile.soul.number}\n`;
      message += `üë§ *–ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏:* ${profile.personality.number}\n\n`;

      // –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      message += `üí¨ *–ì–ª–∞–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:*\n${profile.lifePath.meaning?.description || '–í–∞—à –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —É—Ä–æ–∫–∏ –∏ –∑–∞–¥–∞—á–∏'}\n\n`;

      // –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
      if (profile.lifePath.meaning?.positive && profile.lifePath.meaning.positive.length > 0) {
        message += `üí™ *–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:*\n`;
        profile.lifePath.meaning.positive.slice(0, 3).forEach(strength => {
          message += `‚Ä¢ ${strength}\n`;
        });
        message += '\n';
      }

      const keyboard = createInlineKeyboard([
        [
          { text: 'üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑', callback_data: 'numerology_detailed' },
          { text: 'üë• –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', callback_data: 'numerology_compatibility' }
        ],
        [
          { text: 'üîÆ –ü—Ä–æ–≥–Ω–æ–∑', callback_data: 'numerology_forecast' },
          { text: 'üíé –°—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∏—Å–ª–∞', callback_data: 'numerology_lucky' }
        ],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
      ]);

      await ctx.reply(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.');
    }
  }

  // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
  async handleCompatibility(ctx) {
    try {
      const userId = ctx.from.id;
      
      this.userSessions.set(userId, {
        step: 'waiting_partner_birthdate',
        data: {}
      });

      const message = `üë• *–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏*

–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:

üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):`;

      const keyboard = createInlineKeyboard([
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'numerology_menu' }]
      ]);

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:', error);
      await ctx.reply('–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑
  async handleDetailedAnalysis(ctx) {
    try {
      const userId = ctx.from.id;
      const userProfile = this.getUserProfile(userId);
      
      if (!userProfile || !userProfile.profile) {
        await ctx.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ.');
        return;
      }

      await this.sendDetailedAnalysis(ctx, userProfile.profile);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  async sendDetailedAnalysis(ctx, profile) {
    try {
      let message = `üìä *–ü–æ–¥—Ä–æ–±–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑*\n\n`;

      // –ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
      message += `üõ§ *–ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏: ${profile.lifePath.number}*\n`;
      message += `${profile.lifePath.meaning?.description || ''}\n\n`;
      
      if (profile.lifePath.meaning?.positive) {
        message += `‚úÖ *–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:*\n`;
        profile.lifePath.meaning.positive.forEach(strength => {
          message += `‚Ä¢ ${strength}\n`;
        });
        message += '\n';
      }

      if (profile.lifePath.meaning?.negative) {
        message += `‚ö†Ô∏è *–í—ã–∑–æ–≤—ã:*\n`;
        profile.lifePath.meaning.negative.forEach(challenge => {
          message += `‚Ä¢ ${challenge}\n`;
        });
        message += '\n';
      }

      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—å–µ—Ä–µ
      if (profile.lifePath.meaning?.career) {
        message += `üíº *–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:*\n`;
        profile.lifePath.meaning.career.forEach(career => {
          message += `‚Ä¢ ${career}\n`;
        });
        message += '\n';
      }

      // –û—Ç–Ω–æ—à–µ–Ω–∏—è
      if (profile.lifePath.meaning?.relationships) {
        message += `üíï *–í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö:*\n${profile.lifePath.meaning.relationships}\n\n`;
      }

      const keyboard = createInlineKeyboard([
        [{ text: 'üë• –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', callback_data: 'numerology_compatibility' }],
        [{ text: 'üîÆ –ü—Ä–æ–≥–Ω–æ–∑', callback_data: 'numerology_forecast' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
      ]);

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞.');
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–∏
  async handleNameAnalysis(ctx) {
    try {
      const userId = ctx.from.id;
      
      console.log('Starting name analysis for user:', userId);
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–µ—Å—Å–∏–∏
      this.userSessions.delete(userId);
      
      this.userSessions.set(userId, {
        step: 'waiting_name_analysis',
        data: {},
        timestamp: Date.now()
      });

      const message = `üìù *–ê–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–∏*

–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:

üí° –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏:
‚Ä¢ –ü–æ–ª–Ω–æ–µ –∏–º—è (–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤)
‚Ä¢ –¢–æ–ª—å–∫–æ –∏–º—è (–ê–Ω–Ω–∞)
‚Ä¢ –ò–º—è —Å –æ—Ç—á–µ—Å—Ç–≤–æ–º (–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–Ω–∞)

‚≠ê –Ø —Ä–∞—Å—Å—á–∏—Ç–∞—é —á–∏—Å–ª–∞ —Å—É–¥—å–±—ã –∏ –∏–º–µ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞.`;

      const keyboard = createInlineKeyboard([
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'numerology_menu' }]
      ]);

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–µ–Ω–∏:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
  async processPartnerBirthDate(ctx, text, session) {
    const dateRegex = /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/;
    const match = text.match(dateRegex);

    if (!match) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)');
      return;
    }

    const [, day, month, year] = match;
    const partnerBirthDate = new Date(year, month - 1, day);

    if (isNaN(partnerBirthDate.getTime()) || partnerBirthDate > new Date()) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.');
      return;
    }

    session.data.partnerBirthDate = partnerBirthDate;
    session.step = 'waiting_partner_name';
    this.userSessions.set(ctx.from.id, session);

    await ctx.reply(`‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞: ${day}.${month}.${year}

üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞:`, {
      reply_markup: createInlineKeyboard([
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'numerology_menu' }]
      ])
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
  async processPartnerName(ctx, text, session) {
    if (text.length < 2) {
      await ctx.reply('‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞.');
      return;
    }

    session.data.partnerName = text;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
      const userProfile = this.getUserProfile(ctx.from.id);
      if (!userProfile || !userProfile.birthDate) {
        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        session.step = 'waiting_user_birthdate_for_compatibility';
        this.userSessions.set(ctx.from.id, session);
        
        await ctx.reply(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${session.data.partnerName}

üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990`, {
          reply_markup: createInlineKeyboard([
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'numerology_menu' }]
          ])
        });
        return;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏—é
      session.data.userBirthDate = userProfile.birthDate;
      session.data.userName = userProfile.fullName;

      await this.calculateCompatibility(ctx, session);
      this.userSessions.delete(ctx.from.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      this.userSessions.delete(ctx.from.id);
    }
  }

  // –†–∞—Å—á–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  async calculateCompatibility(ctx, session) {
    try {
      const userLifePath = await numerologyService.calculateLifePath(session.data.userBirthDate);
      const partnerLifePath = await numerologyService.calculateLifePath(session.data.partnerBirthDate);
      
      const compatibility = await numerologyService.calculateCompatibility(userLifePath, partnerLifePath);

      let message = `üë• *–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏*\n\n`;
      message += `üë§ *–í–∞—à–µ —á–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏:* ${userLifePath}\n`;
      message += `üíï *–ß–∏—Å–ª–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:* ${partnerLifePath}\n\n`;
      message += `üìä *–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:* ${compatibility.percentage}%\n`;
      message += `üéØ *–£—Ä–æ–≤–µ–Ω—å:* ${this.getCompatibilityLevel(compatibility.level)}\n\n`;
      message += `üí¨ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n${compatibility.description}\n\n`;
      
      if (compatibility.advice && compatibility.advice.length > 0) {
        message += `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n`;
        compatibility.advice.forEach(advice => {
          message += `‚Ä¢ ${advice}\n`;
        });
      }

      const keyboard = createInlineKeyboard([
        [{ text: 'üîÑ –î—Ä—É–≥–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä', callback_data: 'numerology_compatibility' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
      ]);

      await ctx.reply(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.');
    }
  }

  // –ü—Ä–æ–≥–Ω–æ–∑
  async handleForecast(ctx) {
    try {
      const userId = ctx.from.id;
      const userProfile = this.getUserProfile(userId);
      
      if (!userProfile || !userProfile.birthDate) {
        await ctx.reply('‚ùå –î–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.');
        return;
      }

      const forecast = await numerologyService.generatePersonalForecast(userProfile.birthDate);
      
      let message = `üîÆ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑*\n\n`;
      
      message += `üìÖ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–¥ ${forecast.personalYear.number}:*\n`;
      message += `${forecast.personalYear.meaning}\n\n`;
      
      message += `üìÜ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ—Å—è—Ü ${forecast.personalMonth.number}:*\n`;
      message += `${forecast.personalMonth.meaning}\n\n`;
      
      message += `üìã *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ–Ω—å ${forecast.personalDay.number}:*\n`;
      message += `${forecast.personalDay.meaning}\n\n`;
      
      if (forecast.advice && forecast.advice.length > 0) {
        message += `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n`;
        forecast.advice.slice(0, 3).forEach(advice => {
          message += `‚Ä¢ ${advice}\n`;
        });
      }

      const keyboard = createInlineKeyboard([
        [{ text: 'üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑', callback_data: 'numerology_detailed_forecast' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
      ]);

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–µ–Ω–∏
  async processNameAnalysis(ctx, text) {
    try {
      console.log('Processing name analysis for:', text);
      
      if (!text || text.trim().length < 2) {
        await ctx.reply('‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.');
        return;
      }

      const cleanName = text.trim();
      
      const destinyNumber = await numerologyService.calculateDestinyNumber(cleanName);
      const nameNumber = await numerologyService.calculateNameNumber(cleanName);
      
      console.log('Calculated numbers:', { destinyNumber, nameNumber });
      
      let message = `üìù *–ê–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–∏ "${cleanName}"*\n\n`;
      message += `‚≠ê *–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã:* ${destinyNumber}\n`;
      message += `üìõ *–ß–∏—Å–ª–æ –∏–º–µ–Ω–∏:* ${nameNumber}\n\n`;
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å—É–¥—å–±—ã
      const destinyMeaning = numerologyService.numberMeanings[destinyNumber];
      if (destinyMeaning) {
        message += `üí´ *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Å—É–¥—å–±—ã:*\n${destinyMeaning.description}\n\n`;
        message += `üîë *–ö–ª—é—á–µ–≤—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞:* ${destinyMeaning.keywords.join(', ')}\n\n`;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–∏—Å–ª–∞ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è)
      if (nameNumber !== destinyNumber) {
        const nameMeaning = numerologyService.numberMeanings[nameNumber];
        if (nameMeaning) {
          message += `üíé *–í–ª–∏—è–Ω–∏–µ –∏–º–µ–Ω–∏:*\n${nameMeaning.description}\n\n`;
        }
      }
      
      message += `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∑–Ω–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–≤–æ–∏—Ö —Ç–∞–ª–∞–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.`;

      const keyboard = createInlineKeyboard([
        [{ text: 'üîÑ –î—Ä—É–≥–æ–µ –∏–º—è', callback_data: 'numerology_name' }],
        [{ text: 'üî¢ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'numerology_calculate' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
      ]);

      await ctx.reply(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });

      console.log('Name analysis completed successfully');
      this.userSessions.delete(ctx.from.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–µ–Ω–∏:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      // –ù–µ —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
    }
  }

  // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–¥
  async handlePersonalYear(ctx) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userProfile = this.getUserProfile(ctx.from.id);
      
      if (!userProfile || !userProfile.birthDate) {
        const message = `üéØ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–¥*

‚ùó –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞ –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å.`;

        const keyboard = createInlineKeyboard([
          [{ text: 'üî¢ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'numerology_calculate' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
        ]);

        await ctx.editMessageText(message, { 
          parse_mode: 'Markdown', 
          reply_markup: keyboard 
        });
        return;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
      const forecast = await numerologyService.generatePersonalForecast(userProfile.birthDate);
      const currentYear = new Date().getFullYear();

      const message = `üéØ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–¥ ${currentYear}*

üìä *–í–∞—à–µ —á–∏—Å–ª–æ –≥–æ–¥–∞:* ${forecast.personalYear}

üí´ *–≠–Ω–µ—Ä–≥–∏—è –≥–æ–¥–∞:*
${forecast.yearDescription}

üéØ *–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã:*
${forecast.yearThemes.map(theme => `‚Ä¢ ${theme}`).join('\n')}

üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
${forecast.yearAdvice}`;

      const keyboard = createInlineKeyboard([
        [{ text: 'üìä –ü–æ–ª–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑', callback_data: 'numerology_forecast' }],
        [{ text: 'üì± –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑', url: `${process.env.WEBAPP_URL}/numerology` }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
      ]);

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  getCompatibilityLevel(level) {
    const levels = {
      'high': 'üíö –í—ã—Å–æ–∫–∞—è',
      'medium': 'üíõ –°—Ä–µ–¥–Ω—è—è', 
      'low': 'üíî –ù–∏–∑–∫–∞—è'
    };
    return levels[level] || '‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è';
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º)
  async saveUserProfile(userId, birthDate, fullName) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏
    const session = this.userSessions.get(userId) || { data: {} };
    session.data.birthDate = birthDate;
    session.data.fullName = fullName;
    session.data.userBirthDate = birthDate; // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    this.userSessions.set(userId, session);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    try {
      const numerologyService = require('../../../server/src/services/numerologyService');
      const profile = await numerologyService.generateFullAnalysis(birthDate, fullName);
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      if (this.externalProfileHandler) {
        this.externalProfileHandler.saveProfile(userId, {
          profile,
          birthDate,
          fullName,
          lastAnalysis: new Date()
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞)
  getUserProfile(userId) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if (this.externalProfileHandler) {
      const externalProfile = this.externalProfileHandler.getProfile(userId);
      if (externalProfile) {
        return externalProfile;
      }
    }
    
    // –ò–Ω–∞—á–µ –±–µ—Ä–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏
    const session = this.userSessions.get(userId);
    return session?.data || null;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
  setProfileHandler(profileHandler) {
    this.externalProfileHandler = profileHandler;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  calculatePersonalYear(year, userId) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    return ((year + userId) % 9) + 1;
  }

  getPersonalYearMeaning(year) {
    const meanings = {
      1: "–ì–æ–¥ –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
      2: "–ì–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ —Ç–µ—Ä–ø–µ–Ω–∏—è", 
      3: "–ì–æ–¥ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è",
      4: "–ì–æ–¥ —Ç—Ä—É–¥–∞ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Å–Ω–æ–≤",
      5: "–ì–æ–¥ –ø–µ—Ä–µ–º–µ–Ω –∏ —Å–≤–æ–±–æ–¥—ã",
      6: "–ì–æ–¥ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–µ–º—å–∏",
      7: "–ì–æ–¥ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –∏ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞",
      8: "–ì–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ —É—Å–ø–µ—Ö–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
      9: "–ì–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è"
    };
    return meanings[year] || "–û—Å–æ–±—ã–π –≥–æ–¥ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏";
  }

  getYearFocus(year) {
    const focuses = {
      1: "–Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞",
      2: "–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –∏ –¥–∏–ø–ª–æ–º–∞—Ç–∏–∏",
      3: "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –æ–±—â–µ–Ω–∏—è",
      4: "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —É–ø–æ—Ä–Ω–æ–≥–æ —Ç—Ä—É–¥–∞",
      5: "–ø–µ—Ä–µ–º–µ–Ω –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π",
      6: "—Å–µ–º—å–∏ –∏ –∑–∞–±–æ—Ç—ã –æ –±–ª–∏–∑–∫–∏—Ö",
      7: "–¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —É—á–µ–±—ã",
      8: "–∫–∞—Ä—å–µ—Ä—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ —É—Å–ø–µ—Ö–∞",
      9: "–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤"
    };
    return focuses[year] || "–ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞";
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  async processUserBirthDateForCompatibility(ctx, text, session) {
    const dateRegex = /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/;
    const match = text.match(dateRegex);

    if (!match) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)');
      return;
    }

    const [, day, month, year] = match;
    const birthDate = new Date(year, month - 1, day);

    if (isNaN(birthDate.getTime()) || birthDate > new Date()) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.');
      return;
    }

    session.data.userBirthDate = birthDate;
    session.step = 'waiting_user_name_for_compatibility';
    this.userSessions.set(ctx.from.id, session);

    await ctx.reply(`‚úÖ –í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${day}.${month}.${year}

üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):`, {
      reply_markup: createInlineKeyboard([
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'numerology_menu' }]
      ])
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  async processUserNameForCompatibility(ctx, text, session) {
    if (text.length < 2) {
      await ctx.reply('‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.');
      return;
    }

    session.data.userName = text;
    
    try {
      // –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      await this.calculateCompatibility(ctx, session);
      this.userSessions.delete(ctx.from.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      this.userSessions.delete(ctx.from.id);
    }
  }
}

module.exports = NumerologyHandler;