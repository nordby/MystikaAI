// bot/src/handlers/numerology.js
const numerologyService = require('../../../server/src/services/numerologyService');
const { createInlineKeyboard } = require('../utils/keyboards');

class NumerologyHandler {
  constructor() {
    this.userSessions = new Map(); // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  }

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
  async handleNumerologyMenu(ctx) {
    try {
      const keyboard = createInlineKeyboard([
        [
          { text: 'üî¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'numerology_calculate' },
          { text: 'üë• –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', callback_data: 'numerology_compatibility' }
        ],
        [
          { text: 'üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'numerology_profile' },
          { text: 'üîÆ –ü—Ä–æ–≥–Ω–æ–∑', callback_data: 'numerology_forecast' }
        ],
        [
          { text: 'üìù –ê–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–∏', callback_data: 'numerology_name' },
          { text: 'üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–¥', callback_data: 'numerology_year' }
        ],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]);

      const message = `üî¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è*

–û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–π–Ω—ã —á–∏—Å–µ–ª –∏ —É–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –æ–Ω–∏ –≥–æ–≤–æ—Ä—è—Ç –æ –≤–∞—à–µ–π —Å—É–¥—å–±–µ.

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:`;

      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, { 
          parse_mode: 'Markdown', 
          reply_markup: keyboard 
        });
      } else {
        await ctx.reply(message, { 
          parse_mode: 'Markdown', 
          reply_markup: keyboard 
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è
  async handleCalculateStart(ctx) {
    try {
      const userId = ctx.from.id;
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
      this.userSessions.set(userId, {
        step: 'waiting_birthdate',
        data: {}
      });

      const message = `üî¢ *–†–∞—Å—á–µ—Ç –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è*

–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è:
1. –í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
2. –í–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è

üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990`;

      const keyboard = createInlineKeyboard([
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'numerology_menu' }]
      ]);

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á–µ—Ç–∞:', error);
      await ctx.reply('–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
  async handleTextInput(ctx) {
    try {
      const userId = ctx.from.id;
      const session = this.userSessions.get(userId);

      if (!session) return;

      const text = ctx.message.text.trim();

      switch (session.step) {
        case 'waiting_birthdate':
          await this.processBirthDate(ctx, text, session);
          break;
          
        case 'waiting_fullname':
          await this.processFullName(ctx, text, session);
          break;
          
        case 'waiting_partner_birthdate':
          await this.processPartnerBirthDate(ctx, text, session);
          break;
          
        case 'waiting_partner_name':
          await this.processPartnerName(ctx, text, session);
          break;
          
        case 'waiting_name_analysis':
          await this.processNameAnalysis(ctx, text);
          break;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
  async processBirthDate(ctx, text, session) {
    const dateRegex = /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/;
    const match = text.match(dateRegex);

    if (!match) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)');
      return;
    }

    const [, day, month, year] = match;
    const birthDate = new Date(year, month - 1, day);

    if (isNaN(birthDate.getTime()) || birthDate > new Date()) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.');
      return;
    }

    session.data.birthDate = birthDate;
    session.step = 'waiting_fullname';
    this.userSessions.set(ctx.from.id, session);

    await ctx.reply(`‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${day}.${month}.${year}

üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):`, {
      reply_markup: createInlineKeyboard([
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'numerology_menu' }]
      ])
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏
  async processFullName(ctx, text, session) {
    if (text.length < 2) {
      await ctx.reply('‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.');
      return;
    }

    session.data.fullName = text;
    
    try {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      const profile = await numerologyService.generateFullAnalysis(
        session.data.birthDate,
        session.data.fullName
      );

      await this.sendProfileResult(ctx, profile);
      
      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      this.userSessions.delete(ctx.from.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      this.userSessions.delete(ctx.from.id);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è
  async sendProfileResult(ctx, profile) {
    try {
      let message = `üî¢ *–í–∞—à –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å*\n\n`;

      // –û—Å–Ω–æ–≤–Ω—ã–µ —á–∏—Å–ª–∞
      message += `üõ§ *–ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏:* ${profile.lifePath.number}\n`;
      message += `‚≠ê *–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã:* ${profile.destiny.number}\n`;
      message += `üí´ *–ß–∏—Å–ª–æ –¥—É—à–∏:* ${profile.soul.number}\n`;
      message += `üë§ *–ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏:* ${profile.personality.number}\n\n`;

      // –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      message += `üí¨ *–ì–ª–∞–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:*\n${profile.lifePath.meaning?.description || '–í–∞—à –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —É—Ä–æ–∫–∏ –∏ –∑–∞–¥–∞—á–∏'}\n\n`;

      // –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
      if (profile.lifePath.meaning?.positive && profile.lifePath.meaning.positive.length > 0) {
        message += `üí™ *–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:*\n`;
        profile.lifePath.meaning.positive.slice(0, 3).forEach(strength => {
          message += `‚Ä¢ ${strength}\n`;
        });
        message += '\n';
      }

      const keyboard = createInlineKeyboard([
        [
          { text: 'üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑', callback_data: 'numerology_detailed' },
          { text: 'üë• –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', callback_data: 'numerology_compatibility' }
        ],
        [
          { text: 'üîÆ –ü—Ä–æ–≥–Ω–æ–∑', callback_data: 'numerology_forecast' },
          { text: 'üíé –°—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∏—Å–ª–∞', callback_data: 'numerology_lucky' }
        ],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
      ]);

      await ctx.reply(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.');
    }
  }

  // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
  async handleCompatibility(ctx) {
    try {
      const userId = ctx.from.id;
      
      this.userSessions.set(userId, {
        step: 'waiting_partner_birthdate',
        data: {}
      });

      const message = `üë• *–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏*

–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:

üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):`;

      const keyboard = createInlineKeyboard([
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'numerology_menu' }]
      ]);

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:', error);
      await ctx.reply('–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–∏
  async handleNameAnalysis(ctx) {
    try {
      const userId = ctx.from.id;
      
      this.userSessions.set(userId, {
        step: 'waiting_name_analysis',
        data: {}
      });

      const message = `üìù *–ê–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–∏*

–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
(–º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–∞–∫ –ø–æ–ª–Ω–æ–µ –∏–º—è, —Ç–∞–∫ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞)`;

      const keyboard = createInlineKeyboard([
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'numerology_menu' }]
      ]);

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–µ–Ω–∏:', error);
      await ctx.reply('–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–µ–Ω–∏
  async processNameAnalysis(ctx, text) {
    try {
      const destinyNumber = await numerologyService.calculateDestinyNumber(text);
      const nameNumber = await numerologyService.calculateNameNumber(text);
      
      let message = `üìù *–ê–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–∏ "${text}"*\n\n`;
      message += `‚≠ê *–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã:* ${destinyNumber}\n`;
      message += `üìõ *–ß–∏—Å–ª–æ –∏–º–µ–Ω–∏:* ${nameNumber}\n\n`;
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–∏—Å–ª–∞
      const meaning = numerologyService.numberMeanings[destinyNumber];
      if (meaning) {
        message += `üí¨ *–ó–Ω–∞—á–µ–Ω–∏–µ:* ${meaning.description}\n\n`;
        message += `üîë *–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:* ${meaning.keywords.join(', ')}`;
      }

      const keyboard = createInlineKeyboard([
        [{ text: 'üîÑ –î—Ä—É–≥–æ–µ –∏–º—è', callback_data: 'numerology_name' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
      ]);

      await ctx.reply(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });

      this.userSessions.delete(ctx.from.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–µ–Ω–∏:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–¥
  async handlePersonalYear(ctx) {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
      const currentYear = new Date().getFullYear();
      const personalYear = this.calculatePersonalYear(currentYear, ctx.from.id);

      const message = `üéØ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–¥ ${currentYear}*

üìä *–í–∞—à–µ —á–∏—Å–ª–æ –≥–æ–¥–∞:* ${personalYear}

${this.getPersonalYearMeaning(personalYear)}

–≠—Ç–æ –≤—Ä–µ–º—è –¥–ª—è ${this.getYearFocus(personalYear)}`;

      const keyboard = createInlineKeyboard([
        [{ text: 'üì± –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑', url: `${process.env.WEBAPP_URL}/numerology` }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
      ]);

      await ctx.editMessageText(message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞:', error);
      await ctx.reply('–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  calculatePersonalYear(year, userId) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    return ((year + userId) % 9) + 1;
  }

  getPersonalYearMeaning(year) {
    const meanings = {
      1: "–ì–æ–¥ –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
      2: "–ì–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ —Ç–µ—Ä–ø–µ–Ω–∏—è", 
      3: "–ì–æ–¥ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è",
      4: "–ì–æ–¥ —Ç—Ä—É–¥–∞ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Å–Ω–æ–≤",
      5: "–ì–æ–¥ –ø–µ—Ä–µ–º–µ–Ω –∏ —Å–≤–æ–±–æ–¥—ã",
      6: "–ì–æ–¥ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–µ–º—å–∏",
      7: "–ì–æ–¥ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –∏ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞",
      8: "–ì–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ —É—Å–ø–µ—Ö–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
      9: "–ì–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è"
    };
    return meanings[year] || "–û—Å–æ–±—ã–π –≥–æ–¥ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏";
  }

  getYearFocus(year) {
    const focuses = {
      1: "–Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞",
      2: "–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –∏ –¥–∏–ø–ª–æ–º–∞—Ç–∏–∏",
      3: "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –æ–±—â–µ–Ω–∏—è",
      4: "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —É–ø–æ—Ä–Ω–æ–≥–æ —Ç—Ä—É–¥–∞",
      5: "–ø–µ—Ä–µ–º–µ–Ω –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π",
      6: "—Å–µ–º—å–∏ –∏ –∑–∞–±–æ—Ç—ã –æ –±–ª–∏–∑–∫–∏—Ö",
      7: "–¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —É—á–µ–±—ã",
      8: "–∫–∞—Ä—å–µ—Ä—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ —É—Å–ø–µ—Ö–∞",
      9: "–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤"
    };
    return focuses[year] || "–ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞";
  }
}

module.exports = NumerologyHandler;