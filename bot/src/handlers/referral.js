// bot/src/handlers/referral.js
const { formatReferralStats, formatReferralProgram } = require('../utils/messages');
const { createReferralKeyboard } = require('../utils/keyboards');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
 */
async function handleReferralProgram(bot, callbackQuery, api) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;

    try {
        await bot.answerCallbackQuery(callbackQuery.id);

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const response = await api.get('/auth/referral-stats');
        const referralData = response.data;

        const programText = formatReferralProgram(referralData);

        await bot.sendMessage(chatId, programText, {
            parse_mode: 'HTML',
            reply_markup: createReferralKeyboard(referralData.referralCode)
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:', error);
        
        await bot.sendMessage(chatId,
            '‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n' +
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ.\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
                        callback_data: 'referral_program'
                    }
                ]]
            }
        });
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
 */
async function handleReferralStats(bot, callbackQuery, api) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;

    try {
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...'
        });

        const response = await api.get('/auth/referral-stats');
        const stats = response.data;

        const statsText = formatReferralStats(stats);

        await bot.sendMessage(chatId, statsText, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π',
                            callback_data: 'share_referral_link'
                        }
                    ],
                    [
                        {
                            text: 'üéÅ –ú–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã',
                            callback_data: 'referral_rewards'
                        }
                    ],
                    [
                        {
                            text: 'üìä –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
                            callback_data: 'referral_program'
                        }
                    ]
                ]
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
        
        await bot.sendMessage(chatId,
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', {
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
                        callback_data: 'referral_stats'
                    }
                ]]
            }
        });
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π
 */
async function handleInviteFriends(bot, callbackQuery, api) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;

    try {
        await bot.answerCallbackQuery(callbackQuery.id);

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        const response = await api.get('/auth/referral-link');
        const { referralLink, referralCode } = response.data;

        const inviteText = 
            'üéÅ <b>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!</b>\n\n' +
            '‚ú® <b>–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>\n' +
            '‚Ä¢ üéØ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞\n' +
            '‚Ä¢ üé¥ 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤\n' +
            '‚Ä¢ üîÆ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã\n\n' +
            'üåü <b>–í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç:</b>\n' +
            '‚Ä¢ üéÅ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å\n' +
            '‚Ä¢ üé¥ 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π\n' +
            '‚Ä¢ üîì –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 1 –¥–µ–Ω—å\n\n' +
            `üîó <b>–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</b> <code>${referralCode}</code>\n\n` +
            'üëá <i>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏:</i>';

        await bot.sendMessage(chatId, inviteText, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π',
                            switch_inline_query: `üé¥ –ü–æ–ø—Ä–æ–±—É–π –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –¢–∞—Ä–æ-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! –ü–æ–ª—É—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ: ${referralLink}`
                        }
                    ],
                    [
                        {
                            text: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É',
                            callback_data: 'copy_referral_link'
                        },
                        {
                            text: 'üì± –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É',
                            url: referralLink
                        }
                    ],
                    [
                        {
                            text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                            callback_data: 'referral_stats'
                        }
                    ]
                ]
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:', error);
        
        await bot.sendMessage(chatId,
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É', {
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
                        callback_data: 'invite_friends'
                    }
                ]]
            }
        });
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
 */
async function handleCopyReferralLink(bot, callbackQuery, api) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;

    try {
        const response = await api.get('/auth/referral-link');
        const { referralLink } = response.data;

        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! üìã'
        });

        await bot.sendMessage(chatId,
            `üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\n` +
            `<code>${referralLink}</code>\n\n` +
            'üìã <i>–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.\n' +
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–∑—å—è–º!</i>', {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
                            switch_inline_query: `üé¥ –ü–æ–ø—Ä–æ–±—É–π –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –¢–∞—Ä–æ-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! ${referralLink}`
                        }
                    ],
                    [
                        {
                            text: 'üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π',
                            callback_data: 'invite_friends'
                        }
                    ]
                ]
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏:', error);
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏'
        });
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≥—Ä–∞–¥ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
 */
async function handleReferralRewards(bot, callbackQuery, api) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;

    try {
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–ó–∞–≥—Ä—É–∂–∞—é –Ω–∞–≥—Ä–∞–¥—ã...'
        });

        const response = await api.get('/auth/referral-rewards');
        const rewards = response.data.rewards;

        if (rewards.length > 0) {
            let rewardsText = 'üéÅ <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:</b>\n\n';
            
            rewards.forEach((reward, index) => {
                const date = new Date(reward.earnedAt).toLocaleDateString('ru-RU');
                const statusEmoji = reward.claimed ? '‚úÖ' : 'üéÅ';
                
                rewardsText += `${statusEmoji} <b>${reward.type}</b>\n`;
                rewardsText += `üìÖ ${date}\n`;
                rewardsText += `üë§ –ó–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${reward.referredUserName || '–°–∫—Ä—ã—Ç–æ'}\n`;
                
                if (!reward.claimed) {
                    rewardsText += '‚ùóÔ∏è <i>–ì–æ—Ç–æ–≤–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é</i>\n';
                }
                
                rewardsText += '\n';
            });

            const unclaimedRewards = rewards.filter(r => !r.claimed);
            
            const keyboard = [];
            
            if (unclaimedRewards.length > 0) {
                keyboard.push([
                    {
                        text: `üéÅ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã (${unclaimedRewards.length})`,
                        callback_data: 'claim_referral_rewards'
                    }
                ]);
            }
            
            keyboard.push([
                {
                    text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
                    callback_data: 'referral_stats'
                }
            ]);

            await bot.sendMessage(chatId, rewardsText, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: keyboard
                }
            });
        } else {
            await bot.sendMessage(chatId,
                'üéÅ <b>–ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>\n\n' +
                '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥.\n' +
                '–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!', {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üéØ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π',
                                callback_data: 'invite_friends'
                            }
                        ],
                        [
                            {
                                text: 'üìã –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã',
                                callback_data: 'referral_program'
                            }
                        ]
                    ]
                }
            });
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥:', error);
        
        await bot.sendMessage(chatId,
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã', {
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
                        callback_data: 'referral_rewards'
                    }
                ]]
            }
        });
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥
 */
async function handleClaimReferralRewards(bot, callbackQuery, api) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;

    try {
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–ü–æ–ª—É—á–∞—é –Ω–∞–≥—Ä–∞–¥—ã...'
        });

        const response = await api.post('/auth/claim-referral-rewards');
        
        if (response.data.success) {
            const claimedRewards = response.data.claimedRewards;
            
            let rewardsText = 'üéâ <b>–ù–∞–≥—Ä–∞–¥—ã –ø–æ–ª—É—á–µ–Ω—ã!</b>\n\n';
            
            claimedRewards.forEach(reward => {
                rewardsText += `‚úÖ ${reward.description}\n`;
            });
            
            rewardsText += '\nüéä <i>–ù–∞–≥—Ä–∞–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç!</i>';

            await bot.editMessageText(rewardsText, {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üé¥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã',
                                web_app: { 
                                    url: `${process.env.WEBAPP_URL}/spreads` 
                                }
                            }
                        ],
                        [
                            {
                                text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                                callback_data: 'referral_stats'
                            }
                        ]
                    ]
                }
            });
        } else {
            throw new Error(response.data.message);
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥:', error);
        
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥'
        });
    }
}

module.exports = {
    handleReferralProgram,
    handleReferralStats,
    handleInviteFriends,
    handleCopyReferralLink,
    handleReferralRewards,
    handleClaimReferralRewards
};