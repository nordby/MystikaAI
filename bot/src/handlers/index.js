// bot/src/handlers/index.js
const database = require('../database');
const config = require('../config');
const { TAROT_CARDS } = require('../data/tarot');
const NumerologyHandler = require('./numerology');
const premiumHandlers = require('./premium');
const referralHandlers = require('./referral');
const { getMysticalLoadingMessage, getMysticalLoadingSequence } = require('../utils/messages');

class BotHandlers {
  constructor() {
    this.handlers = new Map();
    this.commandHandlers = new Map();
    this.callbackHandlers = new Map();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Maps –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    this.pendingQuestions = new Map();
    this.pendingReadings = new Map();
    
    // –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –æ—á–∏—â–∞–µ—Ç—Å—è)
    this.userProfiles = new Map(); // chatId -> { profile, birthDate, fullName, lastAnalysis }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
    this.numerologyHandler = new NumerologyHandler();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
    this.numerologyHandler.setProfileHandler({
      saveProfile: (userId, profile) => {
        this.userProfiles.set(userId, profile);
      },
      getProfile: (userId) => {
        return this.userProfiles.get(userId);
      }
    });
    
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    setInterval(() => {
      this.cleanupOldQuestions();
      this.cleanupPendingStates();
    }, 10 * 60 * 1000);
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
   */
  registerAll(bot) {
    console.log('Registering bot handlers...');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    this.registerCommandHandlers(bot);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback queries
    this.registerCallbackHandlers(bot);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.registerMessageHandlers(bot);

    console.log('Bot handlers registered successfully');
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
   */
  registerCommandHandlers(bot) {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    bot.onText(/\/start/, async (msg) => {
      await this.handleStartCommand(bot, msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /reading
    bot.onText(/\/reading/, async (msg) => {
      await this.handleReadingCommand(bot, msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /daily
    bot.onText(/\/daily/, async (msg) => {
      await this.handleDailyCommand(bot, msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /lunar
    bot.onText(/\/lunar/, async (msg) => {
      await this.handleLunarCommand(bot, msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /numerology
    bot.onText(/\/numerology/, async (msg) => {
      await this.handleNumerologyCommand(bot, msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /profile
    bot.onText(/\/profile/, async (msg) => {
      await this.handleProfileCommand(bot, msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /history
    bot.onText(/\/history/, async (msg) => {
      await this.handleHistoryCommand(bot, msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /settings
    bot.onText(/\/settings/, async (msg) => {
      await this.handleSettingsCommand(bot, msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    bot.onText(/\/test/, async (msg) => {
      await this.handleTestCommand(bot, msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /premium
    bot.onText(/\/premium/, async (msg) => {
      await this.handlePremiumCommand(bot, msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /referral
    bot.onText(/\/referral/, async (msg) => {
      await this.handleReferralCommand(bot, msg);
    });

    console.log('Command handlers registered');
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback queries
   */
  registerCallbackHandlers(bot) {
    bot.on('callback_query', async (query) => {
      await this.handleCallbackQuery(bot, query);
    });

    console.log('Callback handlers registered');
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  registerMessageHandlers(bot) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on('message', async (msg) => {
      if (msg.text && !msg.text.startsWith('/')) {
        await this.handleTextMessage(bot, msg);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    bot.on('photo', async (msg) => {
      await this.handlePhotoMessage(bot, msg);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on('voice', async (msg) => {
      await this.handleVoiceMessage(bot, msg);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Telegram Stars
    bot.on('pre_checkout_query', async (query) => {
      try {
        const premiumHandlers = require('./premium');
        await premiumHandlers.handlePreCheckoutQuery(bot, query);
      } catch (error) {
        console.error('Pre-checkout query error:', error);
        await bot.answerPreCheckoutQuery(query.id, false, { error_message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    bot.on('message', async (msg) => {
      if (msg.successful_payment) {
        try {
          const premiumHandlers = require('./premium');
          await premiumHandlers.handleSuccessfulPayment(bot, msg);
        } catch (error) {
          console.error('Successful payment error:', error);
        }
      }
    });

    console.log('Message handlers registered');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
   */
  async handleStartCommand(bot, msg) {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;

      console.log('Processing /start command:', { userId, chatId });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
      let userResponse = await database.getUserByTelegramId(userId);
      let user = userResponse?.user;
      let isNewUser = false;

      if (!user) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = {
          telegramId: userId,
          username: msg.from.username || null,
          firstName: msg.from.first_name || null,
          lastName: msg.from.last_name || null,
          languageCode: msg.from.language_code || 'ru',
          chatId: chatId
        };

        const createResponse = await database.createUser(userData);
        user = createResponse.user; // –ò–∑–≤–ª–µ–∫–∞–µ–º user –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        isNewUser = true;

        console.log('New user created:', { userId, username: msg.from.username });
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ  
        await database.updateUser(user.telegramId, {
          lastActive: new Date(),
          chatId: chatId
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const messages = config.getMessages();
      const keyboards = config.getKeyboards();
      
      const welcomeText = isNewUser ? 
        messages.start.new_user : 
        messages.start.returning_user;

      await bot.sendMessage(chatId, welcomeText, {
        reply_markup: keyboards.mainMenu,
        parse_mode: 'Markdown'
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É WebApp
      await bot.sendMessage(chatId, 'üîÆ –ó–∞ –ø–µ–ª–µ–Ω–æ–π —Ç–∞–π–Ω —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –±–æ–ª—å—à–µ‚Ä¶', {
        reply_markup: keyboards.webApp
      });

      // –¢—Ä–µ–∫–∏–Ω–≥ —Å–æ–±—ã—Ç–∏—è
      await database.trackEvent({
        type: 'command_start',
        userId: user.id,
        isNewUser,
        metadata: {
          username: msg.from.username,
          languageCode: msg.from.language_code
        }
      });

    } catch (error) {
      console.error('Error in /start command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
   */
  async handleHelpCommand(bot, msg) {
    try {
      const messages = config.getMessages();
      
      await bot.sendMessage(msg.chat.id, messages.help, {
        parse_mode: 'HTML'
      });

      await database.trackEvent({
        type: 'command_help',
        userId: msg.from.id
      });

    } catch (error) {
      console.error('Error in /help command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reading
   */
  async handleReadingCommand(bot, msg) {
    try {
      const user = await this.ensureUser(msg.from);

      await bot.sendMessage(msg.chat.id, 'üîÆ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:\n\nüí° *–°–æ–≤–µ—Ç:* –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∞ –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥.', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üÉè –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞', callback_data: 'reading_single' },
              { text: 'üÉèüÉèüÉè –¢—Ä–∏ –∫–∞—Ä—Ç—ã', callback_data: 'reading_three' }
            ],
            [
              { text: 'üåü –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç', callback_data: 'reading_celtic' },
              { text: 'üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è', callback_data: 'reading_relationship' }
            ],
            [{ text: '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–Ω–∞—á–∞–ª–∞', callback_data: 'ask_question_first' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
          ]
        }
      });

      await database.trackEvent({
        type: 'command_reading',
        userId: user.id
      });

    } catch (error) {
      console.error('Error in /reading command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /daily
   */
  async handleDailyCommand(bot, msg) {
    try {
      const user = await this.ensureUser(msg.from);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–∞ –¥–Ω—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      const existingDailyCard = await this.getTodaysDailyReading(user.token);
      if (existingDailyCard) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç—É –¥–Ω—è
        const caption = `üåÖ <b>–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞</b>\n\nüÉè <b>${existingDailyCard.cards[0].name}</b>${existingDailyCard.cards[0].reversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}\n\nüí´ <b>–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ:</b>\n${existingDailyCard.interpretation}\n\nüí° <i>–ö–∞—Ä—Ç—É –¥–Ω—è –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —ç–Ω–µ—Ä–≥–∏–∏ —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –≤–µ—Å—å –¥–µ–Ω—å!</i>`;
        
        await bot.sendMessage(msg.chat.id, caption, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÆ –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ', callback_data: 'daily_details' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
            ]
          }
        });
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      const loadingMsg = await bot.sendMessage(msg.chat.id, getMysticalLoadingMessage('tarot'), {
        parse_mode: 'Markdown'
      });

      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –¥–Ω–µ–≤–Ω—É—é –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ API
      const apiService = require('../services/api');
      const dailyCardResponse = await apiService.getDailyCard(user.token);

      if (!dailyCardResponse.success) {
        await bot.deleteMessage(msg.chat.id, loadingMsg.message_id);
        
        if (dailyCardResponse.data?.upgradeRequired) {
          await bot.sendMessage(msg.chat.id,
            'üåÖ <b>–î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞</b>\n\n' +
            '–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ—é –∫–∞—Ä—Ç—É –¥–Ω—è —Å–µ–≥–æ–¥–Ω—è.\n' +
            '–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –∫–∞—Ä—Ç—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!\n\n' +
            'üíé –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –ø–æ–¥–ø–∏—Å–∫–∏:', {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üíé –ü—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', callback_data: 'premium_info' }],
                [{ text: 'üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –∫–∞—Ä—Ç—É', web_app: { url: `${process.env.WEBAPP_URL}/daily` } }]
              ]
            }
          });
        } else {
          await bot.sendMessage(msg.chat.id,
            '‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é –∫–∞—Ä—Ç—É</b>\n\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.', {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [[{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'daily_card' }]]
            }
          });
        }
        return;
      }

      const { card, isReversed, interpretation } = dailyCardResponse;

      // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.deleteMessage(msg.chat.id, loadingMsg.message_id);

      // –§–æ—Ä–º–∏—Ä—É–µ–º caption —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã –¥–ª—è Telegram (–º–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞)
      let caption = `üåÖ <b>–ö–∞—Ä—Ç–∞ –¥–Ω—è</b>\n\nüÉè <b>${card.name}</b>${isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
      if (interpretation) {
        const withInterpretation = caption + `\n\nüí´ <b>–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ:</b>\n${interpretation}`;
        if (withInterpretation.length <= 1020) {
          caption = withInterpretation;
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (card.imageUrl) {
        await bot.sendPhoto(msg.chat.id, card.imageUrl, {
          caption: caption,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÆ –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ', callback_data: 'daily_details' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
            ]
          }
        });
      } else {
        await bot.sendMessage(msg.chat.id, caption, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÆ –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ', callback_data: 'daily_details' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
            ]
          }
        });
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
      await bot.sendMessage(msg.chat.id, 
        'üéØ <b>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –µ—â–µ?</b>', {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            ...(process.env.WEBAPP_URL ? [[
              {
                text: 'üé¥ –î—Ä—É–≥–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã',
                web_app: { 
                  url: `${process.env.WEBAPP_URL}/spreads` 
                }
              }
            ]] : []),
            [
              ...(process.env.WEBAPP_URL ? [{
                text: 'üìñ –ò—Å—Ç–æ—Ä–∏—è –≥–∞–¥–∞–Ω–∏–π',
                web_app: { 
                  url: `${process.env.WEBAPP_URL}/history` 
                }
              }] : []),
              {
                text: 'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è',
                callback_data: 'numerology_today'
              }
            ],
            [
              {
                text: 'üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å',
                callback_data: 'lunar_today'
              }
            ]
          ]
        }
      });

    } catch (error) {
      console.error('Error in daily command:', error);
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –µ—Å—Ç—å
      try {
        await bot.deleteMessage(msg.chat.id, loadingMsg.message_id);
      } catch (deleteError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await bot.sendMessage(msg.chat.id,
        '‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é –∫–∞—Ä—Ç—É</b>\n\n' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.\n' +
        '<i>–ò–Ω–æ–≥–¥–∞ –∫–∞—Ä—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤—ã –æ—Ç–∫—Ä—ã—Ç—å—Å—è...</i>', {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
                callback_data: 'daily_card'
              }
            ],
            ...(process.env.WEBAPP_URL ? [[
              {
                text: 'üé¥ –î—Ä—É–≥–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã',
                web_app: { 
                  url: `${process.env.WEBAPP_URL}/spreads` 
                }
              }
            ]] : [])
          ]
        }
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /lunar
   */
  async handleLunarCommand(bot, msg) {
    try {
      const user = await this.ensureUser(msg.from);

      await bot.sendChatAction(msg.chat.id, 'typing');

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –ª—É–Ω—ã
      const moonPhase = this.getCurrentMoonPhase();
      
      // –ü–æ–ª—É—á–∞–µ–º AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ª—É–Ω–Ω–æ–π —Ñ–∞–∑—ã
      let lunarRecommendations = null;
      try {
        await bot.sendChatAction(msg.chat.id, 'typing');
        
        const aiResponse = await this.getLunarRecommendations(moonPhase, user);
        lunarRecommendations = aiResponse;
        console.log('Lunar AI recommendations received:', JSON.stringify(aiResponse, null, 2));
      } catch (error) {
        console.log('Lunar AI recommendations failed:', error.message);
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      let recommendationsText;
      let practices;
      let avoid;
      
      if (lunarRecommendations && lunarRecommendations.success) {
        recommendationsText = lunarRecommendations.interpretation.interpretation || lunarRecommendations.interpretation.main;
        practices = lunarRecommendations.interpretation.practices || ['–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è', '–†–∞–±–æ—Ç–∞ —Å –∏–Ω—Ç—É–∏—Ü–∏–µ–π'];
        avoid = lunarRecommendations.interpretation.avoid || ['–ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ —Å–ø–æ—Ä–æ–≤', '–ü–æ—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π'];
      } else {
        // Fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendationsText = this.getBasicLunarRecommendation(moonPhase);
        practices = this.getBasicLunarPractices(moonPhase);
        avoid = this.getBasicLunarAvoid(moonPhase);
      }

      const practicesText = Array.isArray(practices) ? practices.map(p => `‚Ä¢ ${p}`).join('\n') : `‚Ä¢ ${practices}`;
      const avoidText = Array.isArray(avoid) ? avoid.map(a => `‚Ä¢ ${a}`).join('\n') : `‚Ä¢ ${avoid}`;

      const text = `üåô <b>–õ—É–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n\n<b>${moonPhase.emoji} ${moonPhase.name}</b>\n\n${recommendationsText}\n\n<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</b>\n${practicesText}\n\n<b>–ò–∑–±–µ–≥–∞–π—Ç–µ:</b>\n${avoidText}`;

      await bot.sendMessage(msg.chat.id, text, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìÖ –ü–æ–ª–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data: 'lunar_calendar' }],
            [{ text: 'üîÆ –ì–∞–¥–∞–Ω–∏–µ –ø–æ —Ñ–∞–∑–µ', callback_data: 'lunar_reading' }]
          ]
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É–Ω–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
      try {
        const lunarData = {
          userId: user.id,
          type: 'lunar_calendar',
          spreadName: '–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å',
          cards: [{ 
            name: `–õ—É–Ω–∞ –≤ —Ñ–∞–∑–µ "${moonPhase.name}"`, 
            description: moonPhase.description 
          }],
          positions: [{ 
            name: '–õ—É–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è', 
            description: `–í–ª–∏—è–Ω–∏–µ —Ñ–∞–∑—ã ${moonPhase.name}` 
          }],
          question: '–õ—É–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
          interpretation: recommendationsText,
          metadata: {
            moonPhase: moonPhase.name,
            date: new Date().toISOString()
          }
        };
        
        await database.createReading(lunarData);
      } catch (error) {
        console.log('Failed to save lunar reading to database:', error.message);
      }

      await database.trackEvent({
        type: 'command_lunar',
        userId: user.id,
        metadata: { moonPhase: moonPhase.name }
      });

    } catch (error) {
      console.error('Error in /lunar command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /premium
   */
  async handlePremiumCommand(bot, msg) {
    try {
      const user = await this.ensureUser(msg.from);
      const userToken = user.token;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–º–∏—É–º
      const premiumHandlers = require('./premium');
      await premiumHandlers.handlePremium(bot, msg, userToken);

    } catch (error) {
      console.error('Error in /premium command:', error);
      console.error('Error details:', error.stack);
      await bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Premium. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

/**


  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /referral
   */
  async handleReferralCommand(bot, msg) {
    try {
      const user = await this.ensureUser(msg.from);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º referral handler
      await referralHandlers.handleReferralProgram(bot, {
        message: msg,
        from: msg.from,
        id: 'referral_program'
      }, database.apiService);

      await database.trackEvent({
        type: 'command_referral',
        userId: user.id
      });

    } catch (error) {
      console.error('Error in /referral command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries
   */
  async handleCallbackQuery(bot, query) {
    try {
      const { data, message, from } = query;
      const chatId = message.chat.id;
      const messageId = message.message_id;

      console.log('Processing callback query:', { data, userId: from.id });

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback query —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å timeout
      try {
        await bot.answerCallbackQuery(query.id, {
          text: '‚ú® –ü—Ä–∏–∑—ã–≤–∞—é –¥—É—Ö–æ–≤-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤...'
        });
      } catch (err) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (query is too old)
        if (!err.message.includes('query is too old') && !err.message.includes('query ID is invalid')) {
          console.error('Error answering callback query:', err.message);
        }
      }

      // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É callback data
      if (data.startsWith('reading_')) {
        await this.handleReadingCallback(bot, chatId, messageId, data, from);
      } else if (data.startsWith('premium_') && data !== 'premium_menu') {
        await this.handlePremiumCallback(bot, chatId, messageId, data, from, query.id);
      } else if (data.startsWith('buy_premium_') || data === 'how_to_get_stars') {
        await this.handlePremiumCallback(bot, chatId, messageId, data, from, query.id);
      } else if (data.startsWith('referral_')) {
        await this.handleReferralCallback(bot, chatId, messageId, data, from);
      } else if (data.startsWith('daily_')) {
        await this.handleDailyCallback(bot, chatId, messageId, data, from);
      } else if (data.startsWith('lunar_')) {
        await this.handleLunarCallback(bot, chatId, messageId, data, from);
      } else if (data.startsWith('test_')) {
        await this.handleTestCallback(bot, chatId, messageId, data, from);
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö callback
        await this.handleGeneralCallback(bot, chatId, messageId, data, from);
      }

    } catch (error) {
      console.error('Error in callback query:', error);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è
      try {
        await bot.answerCallbackQuery(query.id, {
          text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          show_alert: true
        });
      } catch (answerError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å—Ç–∞—Ä—ã–µ query
        if (!answerError.message.includes('query is too old') && !answerError.message.includes('query ID is invalid')) {
          console.error('Error answering callback query in error handler:', answerError.message);
        }
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async handleTextMessage(bot, msg) {
    try {
      const text = msg.text;
      const chatId = msg.chat.id;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
      switch (text) {
        case 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ':
          await this.handleReadingCommand(bot, msg);
          break;
        case 'üÉè –î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞':
        case 'üìÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è':
          await this.handleDailyCommand(bot, msg);
          break;
        case 'üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å':
          await this.handleLunarCommand(bot, msg);
          break;
        case 'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è':
          // –ù–ï –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–µ–π
          await this.handleNumerologyCommand(bot, msg);
          break;
        case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
          await this.handleProfileCommand(bot, msg);
          break;
        case 'üíé –ü—Ä–µ–º–∏—É–º':
          await this.handlePremiumCommand(bot, msg);
          break;
        case 'üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ':
          await this.handleAppCommand(bot, msg);
          break;
        case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
          await this.handleSettingsCommand(bot, msg);
          break;
        case '‚ùì –ü–æ–º–æ—â—å':
          await this.handleHelpCommand(bot, msg);
          break;
        default:
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          if (this.numerologyHandler.userSessions.has(chatId)) {
            await this.numerologyHandler.handleTextInput({
              message: { text },
              from: { id: msg.from.id },
              reply: (text, options) => bot.sendMessage(chatId, text, options)
            });
            return;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π –º–µ–Ω—é (–∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
          if (text.includes('üíé') && (text.includes('–ü—Ä–µ–º–∏—É–º') || text.includes('Premium'))) {
            await this.handlePremiumCommand(bot, msg);
            return;
          }
          
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≥–∞–¥–∞–Ω–∏—è
          await this.handleQuestionText(bot, msg);
      }

    } catch (error) {
      console.error('Error in text message:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≥–∞–¥–∞–Ω–∏—è
   */
  async handleQuestionText(bot, msg) {
    const chatId = msg.chat.id;
    const question = msg.text;

    if (question.length < 5) {
      await bot.sendMessage(chatId, 'ü§î –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).');
      return;
    }

    if (question.length > 500) {
      await bot.sendMessage(chatId, 'üìù –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // Map —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ constructor
    const questionId = Date.now().toString(); // –ü—Ä–æ—Å—Ç–æ–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
    this.pendingQuestions.set(chatId, {
      questionId,
      question,
      timestamp: Date.now()
    });

    await bot.sendMessage(chatId, `‚ú® –û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å!\n\n"${question}"\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ –¥–ª—è –≥–∞–¥–∞–Ω–∏—è:`, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üÉè –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞', callback_data: `reading_single_q_${questionId}` },
            { text: 'üÉèüÉèüÉè –¢—Ä–∏ –∫–∞—Ä—Ç—ã', callback_data: `reading_three_q_${questionId}` }
          ],
          [{ text: 'üåü –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç', callback_data: `reading_celtic_q_${questionId}` }]
        ]
      }
    });
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
   */
  async showMainMenu(bot, chatId, messageId = null) {
    const menuText = `üîÆ *MISTIKA - –ú–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –¢–∞—Ä–æ*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –¥—Ä–µ–≤–Ω–µ–π –º—É–¥—Ä–æ—Å—Ç–∏! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:

üÉè *–ì–∞–¥–∞–Ω–∏—è –¢–∞—Ä–æ*
üåÖ *–ö–∞—Ä—Ç–∞ –¥–Ω—è*  
üåô *–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å*
üî¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è*
üë§ *–ü—Ä–æ—Ñ–∏–ª—å*`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üÉè –ì–∞–¥–∞–Ω–∏–µ –¢–∞—Ä–æ', callback_data: 'new_reading' },
          { text: 'üåÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è', callback_data: 'daily_card' }
        ],
        [
          { text: 'üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data: 'lunar_reading' },
          { text: 'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è', callback_data: 'numerology' }
        ],
        [
          { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }
        ]
      ]
    };

    if (messageId) {
      await bot.editMessageText(menuText, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } else {
      await bot.sendMessage(chatId, menuText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async ensureUser(telegramUser) {
    try {
      let userResponse = await database.getUserByTelegramId(telegramUser.id);
      let user = userResponse?.user;
      let token = userResponse?.token;
      
      if (!user) {
        const userData = {
          telegramId: telegramUser.id,
          username: telegramUser.username || null,
          firstName: telegramUser.first_name || null,
          lastName: telegramUser.last_name || null,
          languageCode: telegramUser.language_code || 'ru'
        };

        const createdResponse = await database.createUser(userData);
        user = createdResponse.user || createdResponse;
        token = createdResponse.token;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫ –æ–±—ä–µ–∫—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
      if (user && token) {
        user.token = token;
      }

      return user;
    } catch (error) {
      console.error('Error ensuring user:', error.message);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
      return {
        id: telegramUser.id,
        telegramId: telegramUser.id,
        username: telegramUser.username,
        firstName: telegramUser.first_name,
        lastName: telegramUser.last_name,
        languageCode: telegramUser.language_code || 'ru',
        isPremium: false,
        subscriptionType: 'basic',
        totalReadings: 0,
        dailyReadingsUsed: 0,
        isActive: true,
        token: null
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   */
  async sendErrorMessage(bot, chatId) {
    const messages = config.getMessages();
    await bot.sendMessage(chatId, messages.errors.general, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'retry' }],
          [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
        ]
      }
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
   */
  async handleNumerologyCommand(bot, msg) {
    try {
      const user = await this.ensureUser(msg.from);

      await bot.sendChatAction(msg.chat.id, 'typing');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
      await this.numerologyHandler.handleNumerologyMenu({
        editMessageText: (text, options) => bot.sendMessage(msg.chat.id, text, options),
        reply: (text, options) => bot.sendMessage(msg.chat.id, text, options),
        callbackQuery: false,
        from: { id: msg.from.id }
      });

      await database.trackEvent({
        type: 'command_numerology',
        userId: user.id
      });

    } catch (error) {
      console.error('Error in /numerology command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  async handleProfileCommand(bot, msg) {
    try {
      const user = await this.ensureUser(msg.from);
      
      const profileText = `üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n` +
        `<b>–ò–º—è:</b> ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
        `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `<b>–°—Ç–∞—Ç—É—Å:</b> ${user.isPremium ? 'üíé Premium' : 'üÜì –ë–∞–∑–æ–≤—ã–π'}\n` +
        `<b>–í—Å–µ–≥–æ –≥–∞–¥–∞–Ω–∏–π:</b> ${user.totalReadings || 0}\n` +
        `<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è:</b> ${user.dailyReadingsUsed || 0}\n` +
        `<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> ${new Date(user.createdAt || Date.now()).toLocaleDateString('ru-RU')}\n`;

      await bot.sendMessage(msg.chat.id, profileText, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'profile_stats' }],
            [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
          ]
        }
      });

    } catch (error) {
      console.error('Error in profile command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  async handleHistoryCommand(bot, msg) {
    try {
      const user = await this.ensureUser(msg.from);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      const loadingMsg = await bot.sendMessage(msg.chat.id, 'üìã *–ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –≥–∞–¥–∞–Ω–∏–π...*', {
        parse_mode: 'Markdown'
      });

      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≥–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const history = await database.getUserReadings(user.id, 10); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≥–∞–¥–∞–Ω–∏–π
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      try {
        await bot.deleteMessage(msg.chat.id, loadingMsg.message_id);
      } catch (deleteError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      }

      if (!history || history.length === 0) {
        await bot.sendMessage(msg.chat.id, 
          'üìã <b>–ò—Å—Ç–æ—Ä–∏—è –≥–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç–∞</b>\n\n' +
          '–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏ –≥–∞–¥–∞–Ω–∏—è.\n' +
          '–ù–∞—á–Ω–∏—Ç–µ —Å –∫–∞—Ä—Ç—ã –¥–Ω—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥!', {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üåÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è', callback_data: 'daily_card' }],
              [{ text: 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'new_reading' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
            ]
          }
        });
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
      let historyText = 'üìã <b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –≥–∞–¥–∞–Ω–∏–π</b>\n\n';
      
      history.forEach((reading, index) => {
        const date = new Date(reading.createdAt).toLocaleDateString('ru-RU');
        const time = new Date(reading.createdAt).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
        const cardNames = reading.cards.map(card => 
          `${card.name}${card.reversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}`
        ).join(', ');
        
        historyText += `${index + 1}. <b>${reading.spreadName}</b>\n`;
        historyText += `üìÖ ${date} –≤ ${time}\n`;
        historyText += `üÉè ${cardNames}\n`;
        if (reading.question && reading.question !== '–ö–∞—Ä—Ç–∞ –¥–Ω—è') {
          historyText += `‚ùì <i>${reading.question}</i>\n`;
        }
        historyText += '\n';
      });

      historyText += 'üí° <i>–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</i>';

      await bot.sendMessage(msg.chat.id, historyText, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', web_app: { url: `${process.env.WEBAPP_URL}/history` } }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });

    } catch (error) {
      console.error('Error in history command:', error);
      await bot.sendMessage(msg.chat.id, 
        '‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏</b>\n\n' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.', {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'reading_history' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });
    }
  }

  async handleSettingsCommand(bot, msg) {
    try {
      const user = await this.ensureUser(msg.from);
      
      const settingsText = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:`;
      
      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'settings_notifications' },
            { text: 'üé® –¢–µ–º–∞', callback_data: 'settings_theme' }
          ],
          [
            { text: 'üåê –Ø–∑—ã–∫', callback_data: 'settings_language' },
            { text: 'üîÆ –ö–æ–ª–æ–¥–∞', callback_data: 'settings_deck' }
          ],
          [
            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }
          ]
        ]
      };

      await bot.sendMessage(msg.chat.id, settingsText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('Error in settings command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  async handleReadingCallback(bot, chatId, messageId, data, from) {
    try {
      const user = await this.ensureUser(from);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      console.log(`üîç Bot: User ${user.telegramId} data:`, {
        deckType: user.deckType,
        preferences: JSON.stringify(user.preferences, null, 2)
      });
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥–∞–¥–∞–Ω–∏—è –∏–∑ callback data
      let readingType, userQuestion = null;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ callback data ID –≤–æ–ø—Ä–æ—Å–∞
      if (data.includes('_q_')) {
        const parts = data.split('_q_');
        readingType = parts[0].replace('reading_', '');
        const questionId = parts[1];
        
        // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –ø–∞–º—è—Ç–∏
        const questionData = this.pendingQuestions?.get(chatId);
        if (questionData && questionData.questionId === questionId) {
          userQuestion = questionData.question;
          console.log('User question retrieved:', userQuestion);
          // –û—á–∏—â–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          this.pendingQuestions.delete(chatId);
        } else {
          console.log('Question not found in memory for ID:', questionId);
        }
      } else {
        readingType = data.replace('reading_', '');
      }

      // –ù–∞—á–∏–Ω–∞–µ–º —Ä–∏—Ç—É–∞–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      await this.conductTarotRitual(bot, chatId, messageId, readingType, userQuestion, user);

    } catch (error) {
      console.error('Error in reading callback:', error);
      await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        chat_id: chatId,
        message_id: messageId
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∏—Ç—É–∞–ª–∞ –≥–∞–¥–∞–Ω–∏—è –¢–∞—Ä–æ
   */
  async conductTarotRitual(bot, chatId, messageId, readingType, userQuestion, user) {
    try {
      // –ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
      const loadingSequence = getMysticalLoadingSequence('tarot');
      
      // –≠—Ç–∞–ø 1
      await bot.editMessageText(loadingSequence[0], {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown'
      });

      await new Promise(resolve => setTimeout(resolve, 2000));

      // –≠—Ç–∞–ø 2: –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
      let focusText = loadingSequence[1];
      if (userQuestion) {
        focusText = loadingSequence[1].replace('üÉè –ö–∞—Ä—Ç—ã –≤—ã–±–∏—Ä–∞—é—Ç —Å–≤–æ–π –ø—É—Ç—å...', `üßò‚Äç‚ôÄÔ∏è –°–æ—Å—Ä–µ–¥–æ—Ç–∞—á–∏–≤–∞–µ–º—Å—è –Ω–∞ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ:\n"${userQuestion}"\n\nüÉè –ö–∞—Ä—Ç—ã –≤—ã–±–∏—Ä–∞—é—Ç —Å–≤–æ–π –ø—É—Ç—å...`);
      }

      await bot.editMessageText(focusText, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown'
      });

      await new Promise(resolve => setTimeout(resolve, 1500));

      // –≠—Ç–∞–ø 3
      const { TAROT_CARDS, SPREAD_TYPES } = require('../data/tarot');
      const spread = SPREAD_TYPES[readingType] || SPREAD_TYPES.single;

      await bot.editMessageText(loadingSequence[2], {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown'
      });

      await new Promise(resolve => setTimeout(resolve, 2000));

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞—Ä—Ç
      const allCards = [
        ...TAROT_CARDS.major,
        ...TAROT_CARDS.minor.wands,
        ...TAROT_CARDS.minor.cups,
        ...TAROT_CARDS.minor.swords,
        ...TAROT_CARDS.minor.pentacles
      ];

      const shuffledCards = this.shuffleArray([...allCards]);
      const drawnCards = shuffledCards.slice(0, spread.maxCards);

      const cardsWithReverse = drawnCards.map((card, index) => ({
        ...card,
        reversed: Math.random() < 0.25, // 25% —à–∞–Ω—Å —Ä–µ–≤–µ—Ä—Å–∞
        position: spread.positions[index]?.name || `–ü–æ–∑–∏—Ü–∏—è ${index + 1}`,
        positionDescription: spread.positions[index]?.description || '–í–∞–∂–Ω—ã–π –∞—Å–ø–µ–∫—Ç —Å–∏—Ç—É–∞—Ü–∏–∏'
      }));

      // –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –∫–∞—Ä—Ç
      await bot.editMessageText(`üé® *–°–æ–∑–¥–∞—é –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–∑—ã*\n\nüñºÔ∏è –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑—É—é —ç–Ω–µ—Ä–≥–∏–∏ –∫–∞—Ä—Ç –≤ –æ–±—Ä–∞–∑—ã...\n‚ö° –ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ—Å–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–∏–±—Ä–∞—Ü–∏—é...`, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown'
      });

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let cardImages = [];
      try {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log(`üîç Bot: User ${user.telegramId} data:`, {
          deckType: user.deckType,
          preferences: typeof user.preferences === 'string' ? user.preferences : JSON.stringify(user.preferences)
        });
        
        // –ü–∞—Ä—Å–∏–º preferences –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—à–ª–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        let userPreferences = {};
        if (typeof user.preferences === 'string') {
          try {
            userPreferences = JSON.parse(user.preferences);
          } catch (error) {
            console.error('Error parsing user preferences:', error);
            userPreferences = {};
          }
        } else {
          userPreferences = user.preferences || {};
        }
        const cardGeneration = userPreferences.cardGeneration || {};
        
        console.log(`üé® Bot: Using card generation settings for user ${user.telegramId}:`, cardGeneration);
        
        let imageResponse;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        if (cardGeneration.autoGenerate !== false) { // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–∞
          // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
          const cardsForGeneration = cardsWithReverse.map(card => ({
            name: card.name,
            description: card.meaning?.upright || card.description || '–ö–∞—Ä—Ç–∞ –¢–∞—Ä–æ'
          }));
          
          // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
          if (cardGeneration.parallelGeneration !== false) { // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è
            console.log(`üîÑ Bot: Using parallel generation with style: ${cardGeneration.defaultStyle || 'mystic'}`);
            imageResponse = await Promise.race([
              database.generateMultipleCardImages(cardsForGeneration, {
                style: cardGeneration.defaultStyle || 'mystic',
                maxConcurrent: 3
              }),
              new Promise((_, reject) => setTimeout(() => reject(new Error('Image generation timeout')), 280000))
            ]);
          } else {
            console.log(`üîÑ Bot: Using sequential generation`);
            imageResponse = await Promise.race([
              database.generateSpreadImages(cardsForGeneration, readingType),
              new Promise((_, reject) => setTimeout(() => reject(new Error('Image generation timeout')), 280000))
            ]);
          }
        } else {
          console.log('‚ùå Bot: Auto generation disabled for user');
        }
        
        if (imageResponse && imageResponse.success) {
          cardImages = imageResponse.results.filter(r => r.success);
          console.log(`‚úÖ Bot: Generated ${cardImages.length} card images successfully`);
        }
      } catch (error) {
        console.log('‚ùå Bot: Card image generation failed:', error.message);
      }

      // –≠—Ç–∞–ø 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –º—É–¥—Ä–æ—Å—Ç–∏
      await bot.editMessageText(`üîÆ *–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –≤—ã—Å—à–∏–º–∏ —Å–∏–ª–∞–º–∏*\n\nüåå –°–æ–µ–¥–∏–Ω—è—é—Å—å —Å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º —Å–æ–∑–Ω–∞–Ω–∏–µ–º...\nüìú –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—é –ø–æ—Å–ª–∞–Ω–∏—è –∫–∞—Ä—Ç...\nüí´ –ü–µ—Ä–µ–≤–æ–∂—É —Å–∏–º–≤–æ–ª—ã –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫...`, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown'
      });

      // –ü–æ–ª—É—á–∞–µ–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
      let aiInterpretation = null;
      try {
        const aiResponse = await this.getAIInterpretationWithQuestion(cardsWithReverse, spread, user, userQuestion);
        aiInterpretation = aiResponse;
        console.log('AI interpretation received successfully');
      } catch (error) {
        console.log('AI interpretation failed:', error.message);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.saveReadingToDatabase(cardsWithReverse, spread, readingType, userQuestion, user, aiInterpretation);

      // –≠—Ç–∞–ø 6: –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç
      await this.startCardRevelation(bot, chatId, messageId, cardsWithReverse, cardImages, spread, aiInterpretation, userQuestion);

    } catch (error) {
      console.error('Error in tarot ritual:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—á–∞–ª–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
   */
  async startCardRevelation(bot, chatId, messageId, cards, cardImages, spread, aiInterpretation, userQuestion) {
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
    await bot.deleteMessage(chatId, messageId).catch(() => {});

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å–∫–ª–∞–¥–∞
    let headerText = `üîÆ *${spread.name}*\n\n`;
    if (userQuestion) {
      headerText += `‚ùì *–í–∞—à –≤–æ–ø—Ä–æ—Å:* "${userQuestion}"\n\n`;
    }
    headerText += `‚ú® –ö–∞—Ä—Ç—ã –≤—ã–±—Ä–∞–Ω—ã. –¢–µ–ø–µ—Ä—å —Ä–∞—Å–∫—Ä–æ–µ–º –∏—Ö —Ç–∞–π–Ω—ã...\n\n`;
    headerText += `üé≠ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ—ë –ø–æ—Å–ª–∞–Ω–∏–µ`;

    await bot.sendMessage(chatId, headerText, { parse_mode: 'Markdown' });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    // Map —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ constructor
    this.pendingReadings.set(chatId, {
      cards,
      cardImages: cardImages.filter(img => img && img.success && img.imageData && !img.isMock),
      spread,
      aiInterpretation,
      userQuestion,
      revealedCards: new Set(),
      currentStep: 'revelation',
      controlMessageId: null
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    await this.sendMysticalSpreadLayout(bot, chatId, cards, spread);
  }

  async handlePremiumCallback(bot, chatId, messageId, data, from, queryId = null) {
    try {
      const user = await this.ensureUser(from);
      const userToken = user.token;

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handlers –∏–∑ –Ω–æ–≤–æ–≥–æ premium.js
      const premiumHandlers = require('./premium');

      switch (data) {
        case 'premium_info':
          const premiumInfoQuery = {
            id: queryId || Date.now().toString(),
            message: { chat: { id: chatId } },
            from: from,
            data: data
          };
          await premiumHandlers.handlePremiumInfo(bot, premiumInfoQuery, userToken);
          break;

        case 'how_to_get_stars':
          const starsInfoQuery = {
            id: queryId || Date.now().toString(),
            message: { chat: { id: chatId } },
            from: from,
            data: data
          };
          await premiumHandlers.handleHowToGetStars(bot, starsInfoQuery);
          break;

        default:
          if (data.startsWith('buy_premium_')) {
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É callbackQuery
            const mockCallbackQuery = {
              id: queryId || Date.now().toString(),
              message: { chat: { id: chatId } },
              from: from,
              data: data
            };
            await premiumHandlers.handleBuyPremium(bot, mockCallbackQuery, userToken);
          }
          break;
      }

    } catch (error) {
      console.error('Error in premium callback:', error);
      await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async handleReferralCallback(bot, chatId, messageId, data, from) {
    try {
      const user = await this.ensureUser(from);
      
      // –°–æ–∑–¥–∞–µ–º mock callback query –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å referral handlers
      const mockCallbackQuery = {
        id: data,
        message: { chat: { id: chatId } },
        from: from
      };

      switch (data) {
        case 'referral_program':
          await referralHandlers.handleReferralProgram(bot, mockCallbackQuery, database.apiService);
          break;
        case 'referral_stats':
          await referralHandlers.handleReferralStats(bot, mockCallbackQuery, database.apiService);
          break;
        case 'referral_invite':
          await referralHandlers.handleInviteFriends(bot, mockCallbackQuery, database.apiService);
          break;
        case 'referral_copy_link':
          await referralHandlers.handleCopyReferralLink(bot, mockCallbackQuery, database.apiService);
          break;
        case 'referral_rewards':
          await referralHandlers.handleReferralRewards(bot, mockCallbackQuery, database.apiService);
          break;
        case 'referral_claim':
          await referralHandlers.handleClaimReferralRewards(bot, mockCallbackQuery, database.apiService);
          break;
        default:
          await bot.editMessageText('üéÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã...', {
            chat_id: chatId,
            message_id: messageId
          });
      }

      await database.trackEvent({
        type: 'referral_callback',
        userId: user.id,
        metadata: { action: data }
      });

    } catch (error) {
      console.error('Error in referral callback:', error);
      await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'referral_program' }],
            [{ text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });
    }
  }

  async handleDailyCallback(bot, chatId, messageId, data, from) {
    try {
      switch (data) {
        case 'daily_details':
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const user = await this.ensureUser(from);
          
          // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–Ω–µ–≤–Ω—É—é –∫–∞—Ä—Ç—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          const todaysReading = await this.getTodaysDailyReading(user.token);
          
          if (todaysReading) {
            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å summary –∏ advice
            const card = todaysReading.cards[0];
            const cardName = card.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞';
            const isReversed = card.reversed;
            
            let detailsMessage = `üîÆ <b>–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è</b>\n\n`;
            detailsMessage += `üÉè <b>${cardName}</b>${isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}\n\n`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (summary)
            if (todaysReading.summary) {
              detailsMessage += `üìù <b>–ö—Ä–∞—Ç–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>\n${todaysReading.summary}\n\n`;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç—ã (advice)
            if (todaysReading.advice) {
              detailsMessage += `üí° <b>–°–æ–≤–µ—Ç—ã –Ω–∞ –¥–µ–Ω—å:</b>\n${todaysReading.advice}\n\n`;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç summary
            if (todaysReading.interpretation && todaysReading.interpretation !== todaysReading.summary) {
              detailsMessage += `üîç <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b>\n${todaysReading.interpretation}`;
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.sendMessage(chatId, detailsMessage, {
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                  [{ text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                ]
              }
            });
          } else {
            // –ï—Å–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é
            await bot.sendMessage(chatId, 'üåÖ <b>–ö–∞—Ä—Ç–∞ –¥–Ω—è –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞</b>\n\n–ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ—é –∫–∞—Ä—Ç—É –¥–Ω—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ.', {
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üåÖ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è', callback_data: 'daily_card' }],
                  [{ text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                ]
              }
            });
          }
          break;
          
        default:
          await bot.editMessageText(getMysticalLoadingMessage('tarot'), {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
          });
          
          await this.handleDailyCommand(bot, { chat: { id: chatId }, from });
      }
    } catch (error) {
      console.error('Error in daily callback:', error);
      await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'daily_card' }],
            [{ text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });
    }
  }

  async handleLunarCallback(bot, chatId, messageId, data, from) {
    try {
      switch (data) {
        case 'lunar_calendar':
          await bot.editMessageText('üåô *–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å*\n\n–ó–∞–≥—Ä—É–∂–∞—é –ø–æ–ª–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ñ–∞–∑ –ª—É–Ω—ã...', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
          });
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ñ–∞–∑ –ª—É–Ω—ã
          await this.showLunarCalendar(bot, chatId, messageId);
          break;
          
        case 'lunar_reading':
          await bot.editMessageText('üåô *–õ—É–Ω–Ω–æ–µ –≥–∞–¥–∞–Ω–∏–µ*\n\n–ü—Ä–æ–≤–µ–¥—É –≥–∞–¥–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ –ª—É–Ω—ã...', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
          });
          
          await this.handleLunarCommand(bot, { chat: { id: chatId }, from });
          break;
          
        default:
          await this.handleLunarCommand(bot, { chat: { id: chatId }, from });
      }
    } catch (error) {
      console.error('Error in lunar callback:', error);
      await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª—É–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'lunar_reading' }],
            [{ text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });
    }
  }

  async handleGeneralCallback(bot, chatId, messageId, data, from) {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç
      if (data.startsWith('reveal_card_')) {
        const cardIndex = parseInt(data.replace('reveal_card_', ''));
        await this.handleCardReveal(bot, chatId, messageId, cardIndex, from);
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É
      if (data.startsWith('card_revealed_')) {
        const cardIndex = parseInt(data.replace('card_revealed_', ''));
        await this.handleRevealedCardTouch(bot, chatId, messageId, cardIndex, from);
        return;
      }

      if (data === 'reveal_all_cards') {
        await this.handleRevealAllCards(bot, chatId, messageId, from);
        return;
      }

      if (data === 'show_interpretation' || data === 'show_full_interpretation') {
        await this.handleShowFullInterpretation(bot, chatId, messageId, from);
        return;
      }

      switch (data) {
        case 'new_reading':
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –≥–∞–¥–∞–Ω–∏—è
          await this.showMainMenu(bot, chatId, messageId);
          break;

        case 'ask_question_first':
          await bot.editMessageText('‚ùì *–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å*\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –∫–∞—Ä—Ç –¢–∞—Ä–æ.\n\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞.', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–∞—Å–∫–ª–∞–¥–∞', callback_data: 'new_reading' }]
              ]
            }
          });
          break;

        case 'reading_history':
          try {
            const user = await this.ensureUser(from);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            await bot.editMessageText('üìã *–ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –≥–∞–¥–∞–Ω–∏–π...*', {
              chat_id: chatId,
              message_id: messageId,
              parse_mode: 'Markdown'
            });

            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≥–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const history = await database.getUserReadings(user.id, 10); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≥–∞–¥–∞–Ω–∏–π

            if (!history || history.length === 0) {
              await bot.editMessageText(
                'üìã <b>–ò—Å—Ç–æ—Ä–∏—è –≥–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç–∞</b>\n\n' +
                '–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏ –≥–∞–¥–∞–Ω–∏—è.\n' +
                '–ù–∞—á–Ω–∏—Ç–µ —Å –∫–∞—Ä—Ç—ã –¥–Ω—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥!', {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: 'üåÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è', callback_data: 'daily_card' }],
                    [{ text: 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'new_reading' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                  ]
                }
              });
              break;
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            let historyText = 'üìã <b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –≥–∞–¥–∞–Ω–∏–π</b>\n\n';
            
            history.forEach((reading, index) => {
              const date = new Date(reading.createdAt).toLocaleDateString('ru-RU');
              const time = new Date(reading.createdAt).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
              const cardNames = reading.cards.map(card => 
                `${card.name}${card.reversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}`
              ).join(', ');
              
              historyText += `${index + 1}. <b>${reading.spreadName}</b>\n`;
              historyText += `üìÖ ${date} –≤ ${time}\n`;
              historyText += `üÉè ${cardNames}\n`;
              if (reading.question && reading.question !== '–ö–∞—Ä—Ç–∞ –¥–Ω—è') {
                historyText += `‚ùì <i>${reading.question}</i>\n`;
              }
              historyText += '\n';
            });

            historyText += 'üí° <i>–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</i>';

            await bot.editMessageText(historyText, {
              chat_id: chatId,
              message_id: messageId,
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', web_app: { url: `${process.env.WEBAPP_URL}/history` } }],
                  [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                ]
              }
            });

          } catch (error) {
            console.error('Error in reading_history callback:', error);
            await bot.editMessageText(
              '‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏</b>\n\n' +
              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.', {
              chat_id: chatId,
              message_id: messageId,
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'reading_history' }],
                  [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                ]
              }
            });
          }
          break;

        case 'profile_stats':
          await bot.editMessageText('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', callback_data: 'back_to_profile' }]
              ]
            }
          });
          break;


        case 'back_to_spread':
          await bot.editMessageText('üîÆ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ —Ä–∞—Å–∫–ª–∞–¥—É...', {
            chat_id: chatId,
            message_id: messageId
          });
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–∞—Å–∫–ª–∞–¥—É
          break;

        case 'daily_card':
          // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          await this.handleDailyCommand(bot, { chat: { id: chatId }, from });
          break;

        case 'premium_menu':
          // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–º–∏—É–º
          const user = await this.ensureUser(from);
          const userToken = user.token;
          const premiumHandlers = require('./premium');
          await premiumHandlers.handlePremium(bot, { chat: { id: chatId }, from }, userToken);
          break;

        case 'back_to_menu':
          // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          await this.showMainMenu(bot, chatId, messageId);
          break;

        case 'back_to_profile':
          // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          await this.handleProfileCommand(bot, { chat: { id: chatId }, from });
          break;

        case 'retry':
          await bot.editMessageText('üîÑ *–ü–æ–≤—Ç–æ—Ä—è—é –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ...*', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
          });
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
          setTimeout(() => {
            this.showMainMenu(bot, chatId, messageId);
          }, 1000);
          break;


        case 'profile':
          // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          await this.handleProfileCommand(bot, { chat: { id: chatId }, from });
          break;

        case 'numerology':
        case 'numerology_menu':
          await this.numerologyHandler.handleNumerologyMenu({
            editMessageText: (text, options) => bot.editMessageText(text, { ...options, chat_id: chatId, message_id: messageId }),
            reply: (text, options) => bot.sendMessage(chatId, text, options),
            callbackQuery: true,
            from: { id: from.id }
          });
          break;

        case 'numerology_create_profile':
        case 'numerology_calculate':
          await this.numerologyHandler.handleCalculateStart({
            editMessageText: (text, options) => bot.editMessageText(text, { ...options, chat_id: chatId, message_id: messageId }),
            reply: (text, options) => bot.sendMessage(chatId, text, options),
            from: { id: from.id }
          });
          break;

        case 'numerology_my_profile':
          await this.numerologyHandler.handleMyProfile({
            editMessageText: (text, options) => bot.editMessageText(text, { ...options, chat_id: chatId, message_id: messageId }),
            reply: (text, options) => bot.sendMessage(chatId, text, options),
            from: { id: from.id }
          });
          break;

        case 'numerology_personal_reading':
          await bot.editMessageText('üîÆ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –≥–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...', { chat_id: chatId, message_id: messageId });
          break;

        case 'numerology_cancel':
          // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
          await this.numerologyHandler.handleNumerologyMenu({
            editMessageText: (text, options) => bot.editMessageText(text, { ...options, chat_id: chatId, message_id: messageId }),
            reply: (text, options) => bot.sendMessage(chatId, text, options),
            from: { id: from.id }
          });
          break;

        case 'numerology_detailed':
          await this.numerologyHandler.handleDetailedAnalysis({
            editMessageText: (text, options) => bot.editMessageText(text, { ...options, chat_id: chatId, message_id: messageId }),
            reply: (text, options) => bot.sendMessage(chatId, text, options),
            from: { id: from.id }
          });
          break;

        case 'numerology_compatibility':
          await this.numerologyHandler.handleCompatibility({
            editMessageText: (text, options) => bot.editMessageText(text, { ...options, chat_id: chatId, message_id: messageId }),
            reply: (text, options) => bot.sendMessage(chatId, text, options),
            from: { id: from.id }
          });
          break;

        case 'numerology_forecast':
          await this.numerologyHandler.handleForecast({
            editMessageText: (text, options) => bot.editMessageText(text, { ...options, chat_id: chatId, message_id: messageId }),
            reply: (text, options) => bot.sendMessage(chatId, text, options),
            from: { id: from.id }
          });
          break;

        case 'numerology_name':
          await this.numerologyHandler.handleNameAnalysis({
            editMessageText: (text, options) => bot.editMessageText(text, { ...options, chat_id: chatId, message_id: messageId }),
            reply: (text, options) => bot.sendMessage(chatId, text, options),
            from: { id: from.id }
          });
          break;

        case 'numerology_year':
          await this.numerologyHandler.handlePersonalYear({
            editMessageText: (text, options) => bot.editMessageText(text, { ...options, chat_id: chatId, message_id: messageId }),
            reply: (text, options) => bot.sendMessage(chatId, text, options),
            from: { id: from.id }
          });
          break;

        case 'numerology_profile':
          await this.numerologyHandler.handleMyProfile({
            editMessageText: (text, options) => bot.editMessageText(text, { ...options, chat_id: chatId, message_id: messageId }),
            reply: (text, options) => bot.sendMessage(chatId, text, options),
            from: { id: from.id }
          });
          break;

        case 'help':
          await this.handleHelpCommand(bot, { chat: { id: chatId }, from });
          break;

        case 'settings':
          await this.handleSettingsCommand(bot, { chat: { id: chatId }, from });
          break;
          
        case 'settings_notifications':
          await this.handleSettingsNotifications(bot, chatId, messageId, from);
          break;
          
        case 'settings_theme':
          await this.handleSettingsTheme(bot, chatId, messageId, from);
          break;
          
        case 'settings_language':
          await this.handleSettingsLanguage(bot, chatId, messageId, from);
          break;
          
        case 'settings_deck':
          await this.handleSettingsDeck(bot, chatId, messageId, from);
          break;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–ª–æ–¥—ã
        case 'deck_mystic':
        case 'deck_classic':
        case 'deck_modern':
        case 'deck_fantasy':
        case 'deck_gothic':
        case 'deck_vintage':
        case 'deck_art_nouveau':
        case 'deck_baroque':
        case 'deck_minimalist':
        case 'deck_steampunk':
          await this.handleDeckSelection(bot, chatId, messageId, data, from);
          break;

        default:
          await bot.editMessageText('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...', {
            chat_id: chatId,
            message_id: messageId
          });
          break;
      }
    } catch (error) {
      console.error('Error in general callback:', error);
      await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        chat_id: chatId,
        message_id: messageId
      });
    }
  }

  async handlePhotoMessage(bot, msg) {
    await bot.sendMessage(msg.chat.id, 'üì∑ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
  }

  async handleVoiceMessage(bot, msg) {
    await bot.sendMessage(msg.chat.id, 'üé§ –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
  }

  async sendErrorMessage(bot, chatId, errorText = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.') {
    await bot.sendMessage(chatId, `‚ùå ${errorText}`);
  }

  /**
   * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ—Ç—Å–∞)
   */
  shuffleArray(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API —Å–µ—Ä–≤–µ—Ä–∞
   */
  async getAIInterpretation(cards, spread, user) {
    try {
      const response = await database.makeRequest('POST', '/ai/interpret', {
        cards: cards,
        spreadType: spread.id,
        positions: spread.positions,
        question: '–û–±—â–µ–µ –≥–∞–¥–∞–Ω–∏–µ',
        user: {
          id: user.id,
          language: user.languageCode || 'ru'
        }
      });

      return response;
    } catch (error) {
      console.error('Failed to get AI interpretation:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getAIInterpretationWithQuestion(cards, spread, user, userQuestion) {
    try {
      const question = userQuestion || '–û–±—â–µ–µ –≥–∞–¥–∞–Ω–∏–µ';
      
      const response = await database.makeRequest('POST', '/ai/interpret', {
        cards: cards,
        spreadType: spread.id,
        positions: spread.positions,
        question: question,
        user: {
          id: user.id,
          language: user.languageCode || 'ru'
        }
      });

      return response;
    } catch (error) {
      console.error('Failed to get AI interpretation with question:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—Ç—ã –¥–Ω—è
   */
  async getDailyCardInterpretation(card, user) {
    try {
      const response = await database.makeRequest('POST', '/ai/interpret', {
        cards: [card],
        spreadType: 'daily_card',
        positions: [{ name: '–ö–∞—Ä—Ç–∞ –¥–Ω—è', description: '–ì–ª–∞–≤–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –¥–Ω—è' }],
        question: '–ö–∞–∫—É—é —ç–Ω–µ—Ä–≥–∏—é –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω–µ—Å–µ—Ç —ç—Ç–æ—Ç –¥–µ–Ω—å?',
        user: {
          id: user.id,
          language: user.languageCode || 'ru'
        }
      });

      return response;
    } catch (error) {
      console.error('Failed to get daily card AI interpretation:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–Ω–µ–≤–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getTodaysDailyReading(userToken) {
    try {
      const apiService = require('../services/api');
      const response = await apiService.getDailyCard(userToken);
      
      if (response && response.success) {
        return {
          cards: [{
            name: response.card.name,
            reversed: response.isReversed
          }],
          interpretation: response.interpretation,
          summary: response.interpretation,
          advice: '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —ç–Ω–µ—Ä–≥–∏–∏ —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –≤–µ—Å—å –¥–µ–Ω—å'
        };
      }
      
      return null;
    } catch (error) {
      console.error('Failed to get today\'s daily reading:', error.message);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ª—É–Ω–Ω–æ–π —Ñ–∞–∑—ã
   */
  async getLunarRecommendations(moonPhase, user) {
    try {
      // –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É –¥–ª—è –ª—É–Ω–Ω–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è
      const lunarCard = {
        name: `–õ—É–Ω–∞ –≤ —Ñ–∞–∑–µ "${moonPhase.name}"`,
        description: moonPhase.description,
        type: 'lunar',
        phase: moonPhase.name
      };

      const response = await database.makeRequest('POST', '/ai/interpret', {
        cards: [lunarCard],
        spreadType: 'lunar_calendar',
        positions: [{ 
          name: '–õ—É–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è', 
          description: `–í–ª–∏—è–Ω–∏–µ —Ñ–∞–∑—ã ${moonPhase.name} –Ω–∞ –≤–∞—à—É –∂–∏–∑–Ω—å` 
        }],
        question: `–ö–∞–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Ñ–∞–∑—ã –ª—É–Ω—ã "${moonPhase.name}"? –ß—Ç–æ –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å –∏ —á–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥?`,
        user: {
          id: user.id,
          language: user.languageCode || 'ru'
        }
      });

      return response;
    } catch (error) {
      console.error('Failed to get lunar AI recommendations:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
   */
  async showLunarCalendar(bot, chatId, messageId) {
    const currentPhase = this.getCurrentMoonPhase();
    const today = new Date();
    
    // –†–∞—Å—á–µ—Ç —Ñ–∞–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
    const phases = [];
    for (let i = 0; i < 28; i += 7) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      const phaseIndex = Math.floor((date.getDate() - 1) / 7) % 4;
      const phaseNames = ['–ù–æ–≤–æ–ª—É–Ω–∏–µ', '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞', '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ', '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞'];
      const emojis = ['üåë', 'üåí', 'üåï', 'üåò'];
      
      phases.push({
        date: date.toLocaleDateString('ru-RU'),
        name: phaseNames[phaseIndex],
        emoji: emojis[phaseIndex]
      });
    }

    const calendarText = `üåô *–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å*

${currentPhase.emoji} *–¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞:* ${currentPhase.name}
${currentPhase.description}

üìÖ *–ë–ª–∏–∂–∞–π—à–∏–µ —Ñ–∞–∑—ã:*
${phases.map(phase => `${phase.emoji} ${phase.date} - ${phase.name}`).join('\n')}

üîÆ *–õ—É–Ω–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å:* –ö–∞–∂–¥–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã –Ω–µ—Å–µ—Ç –æ—Å–æ–±—É—é —ç–Ω–µ—Ä–≥–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–ª–∏—è–µ—Ç –Ω–∞ –Ω–∞—à–∏ —Ä–µ—à–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è.`;

    await bot.editMessageText(calendarText, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üåô –ü–æ–ª—É—á–∏—Ç—å –ª—É–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data: 'lunar_reading' }],
          [{ text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ]
      }
    });
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –ª—É–Ω—ã
   */
  getCurrentMoonPhase() {
    const today = new Date();
    const dayOfMonth = today.getDate();
    
    // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ —Ñ–∞–∑ –ª—É–Ω—ã (–∫–∞–∂–¥—ã–µ ~7 –¥–Ω–µ–π)
    const phaseIndex = Math.floor((dayOfMonth - 1) / 7) % 4;
    
    const phases = [
      { 
        name: '–ù–æ–≤–æ–ª—É–Ω–∏–µ', 
        emoji: 'üåë', 
        description: '–í—Ä–µ–º—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–µ–π' 
      },
      { 
        name: '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞', 
        emoji: 'üåí', 
        description: '–ü–µ—Ä–∏–æ–¥ —Ä–æ—Å—Ç–∞, —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏' 
      },
      { 
        name: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ', 
        emoji: 'üåï', 
        description: '–ü–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å' 
      },
      { 
        name: '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞', 
        emoji: 'üåò', 
        description: '–í—Ä–µ–º—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è, –æ—á–∏—â–µ–Ω–∏—è –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏' 
      }
    ];
    
    return phases[phaseIndex];
  }

  /**
   * –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–∞–∑—ã –ª—É–Ω—ã
   */
  getBasicLunarRecommendation(moonPhase) {
    const recommendations = {
      '–ù–æ–≤–æ–ª—É–Ω–∏–µ': '–ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö —Ü–µ–ª–µ–π –∏ –Ω–∞—á–∞–ª–∞ –≤–∞–∂–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –≠–Ω–µ—Ä–≥–∏—è –ª—É–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è.',
      '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞': '–ü–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è. –°–µ–π—á–∞—Å —Ö–æ—Ä–æ—à–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ–º –∏ –≤–æ–ø–ª–æ—â–∞—Ç—å –ø–ª–∞–Ω—ã –≤ –∂–∏–∑–Ω—å.',
      '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ': '–ü–∏–∫ –ª—É–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏. –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤, –≤—ã—Ä–∞–∂–µ–Ω–∏—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ç—É–∏—Ü–∏–µ–π.',
      '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞': '–ü–µ—Ä–∏–æ–¥ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–µ–Ω—É–∂–Ω–æ–≥–æ. –•–æ—Ä–æ—à–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –æ—á–∏—â–µ–Ω–∏–µ–º –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö.'
    };
    
    return recommendations[moonPhase.name] || '–ö–∞–∂–¥–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã –Ω–µ—Å–µ—Ç —Å–≤–æ—é –æ—Å–æ–±—É—é —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.';
  }

  /**
   * –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ñ–∞–∑—ã –ª—É–Ω—ã
   */
  getBasicLunarPractices(moonPhase) {
    const practices = {
      '–ù–æ–≤–æ–ª—É–Ω–∏–µ': ['–ú–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–∞ —Ü–µ–ª–∏', '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤', '–†–∞–±–æ—Ç–∞ —Å –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º–∏'],
      '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞': ['–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏', '–ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ', '–†–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤'],
      '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ': ['–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã', '–†–∞–±–æ—Ç–∞ —Å –∏–Ω—Ç—É–∏—Ü–∏–µ–π', '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–ª'],
      '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞': ['–û—á–∏—â–∞—é—â–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏', '–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ', '–†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ –∞–Ω–∞–ª–∏–∑']
    };
    
    return practices[moonPhase.name] || ['–ú–µ–¥–∏—Ç–∞—Ü–∏—è', '–†–∞–±–æ—Ç–∞ —Å —ç–Ω–µ—Ä–≥–∏–µ–π'];
  }

  /**
   * –ß—Ç–æ –∏–∑–±–µ–≥–∞—Ç—å –≤ —Ñ–∞–∑—É –ª—É–Ω—ã
   */
  getBasicLunarAvoid(moonPhase) {
    const avoid = {
      '–ù–æ–≤–æ–ª—É–Ω–∏–µ': ['–ó–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –¥–µ–ª', '–ü—Ä–∏–Ω—è—Ç–∏—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π'],
      '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞': ['–ü–∞—Å—Å–∏–≤–Ω–æ—Å—Ç–∏', '–û—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –¥–µ–ª'],
      '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ': ['–ù–∞—á–∞–ª–∞ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤', '–ü–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —ç–Ω–µ—Ä–≥–∏–µ–π'],
      '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞': ['–ù–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π', '–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –Ω–µ–≥–∞—Ç–∏–≤–∞']
    };
    
    return avoid[moonPhase.name] || ['–ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –º—ã—Å–ª–µ–π', '–ü–æ—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π'];
  }


  /**
   * –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç –¥–ª—è –º–ª–∞–¥—à–∏—Ö –∞—Ä–∫–∞–Ω–æ–≤
   */
  getBasicCardMeaning(card, isReversed) {
    const suitMeanings = {
      wands: isReversed 
        ? '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –∑–∞—Å—Ç–æ–π –≤ –¥–µ–ª–∞—Ö'
        : '–≠–Ω–µ—Ä–≥–∏—è, –¥–µ–π—Å—Ç–≤–∏–µ, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, —Å—Ç—Ä–∞—Å—Ç—å',
      cups: isReversed
        ? '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ, –∑–∞–∫—Ä—ã—Ç–æ—Å—Ç—å'
        : '–õ—é–±–æ–≤—å, —ç–º–æ—Ü–∏–∏, –∏–Ω—Ç—É–∏—Ü–∏—è, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å',
      swords: isReversed
        ? '–ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—É—Ç–∞–Ω–∏—Ü–∞, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –∞–≥—Ä–µ—Å—Å–∏—è'
        : '–ú—ã—Å–ª–∏, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å',
      pentacles: isReversed
        ? '–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, —É–ø—É—â–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'
        : '–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –±–ª–∞–≥–∞, –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'
    };

    return suitMeanings[card.suit] || '–ó–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–π –∫–∞—Ä—Ç—ã —Ç—Ä–µ–±—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏';
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã —Å –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º
   */
  async handleCardReveal(bot, chatId, messageId, cardIndex, from) {
    try {
      const readingData = this.pendingReadings?.get(chatId);
      if (!readingData) {
        console.log('Reading data not found for chat:', chatId);
        return;
      }

      const { cards, cardImages, spread, revealedCards, aiInterpretation } = readingData;
      const card = cards[cardIndex];

      if (!card || revealedCards.has(cardIndex)) {
        console.log('Card not found or already revealed:', cardIndex);
        return;
      }

      // –û—Ç–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—É –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—É—é
      revealedCards.add(cardIndex);

      // –ú–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç—ã
      await this.revealCardMystically(bot, chatId, card, cardIndex, cardImages[cardIndex], spread, aiInterpretation);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      await this.updateRevelationControls(bot, chatId, cards, revealedCards, spread);

      console.log(`Card revealed: ${card.name} for user ${from.id}`);

    } catch (error) {
      console.error('Error revealing card:', error);
    }
  }

  /**
   * –ú–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã
   */
  async revealCardMystically(bot, chatId, card, cardIndex, cardImage, spread, aiInterpretation) {
    const position = spread.positions[cardIndex];
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const mysticalText = `‚ú® *–ö–∞—Ä—Ç–∞ ${cardIndex + 1} —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ–∏ —Ç–∞–π–Ω—ã...*\n\n` +
      `üîÆ *${position.name}*\n` +
      `${position.description || '–ö–ª—é—á–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–∞—Å–∫–ª–∞–¥–µ'}\n\n` +
      `*–ö–∞—Ä—Ç–∞ –≥–æ–≤–æ—Ä–∏—Ç:* "${card.name}"${card.reversed ? ' *(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)*' : ''}`;

    await bot.sendMessage(chatId, mysticalText, { parse_mode: 'Markdown' });

    // –ü–∞—É–∑–∞ –¥–ª—è –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 500));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if (cardImage && cardImage.imageData) {
      console.log(`Card image for ${card.name}: valid=${this.isValidBase64Image(cardImage.imageData)}, length=${cardImage.imageData.length}, isMock=${cardImage.isMock}`);
      
      if (this.isValidBase64Image(cardImage.imageData)) {
        try {
          const imageBuffer = Buffer.from(cardImage.imageData, 'base64');
          console.log(`Sending card image for ${card.name}, buffer size: ${imageBuffer.length}`);
          
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É caption –¥–ª—è Telegram (–º–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞)
          const mysticalDesc = this.getCardMysticalDescription(card);
          let caption = `üÉè *${card.name}*${card.reversed ? ' *(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)*' : ''}`;
          
          if (mysticalDesc && (caption.length + mysticalDesc.length + 4) <= 1020) {
            caption += `\n\n${mysticalDesc}`;
          }
          
          await bot.sendPhoto(chatId, imageBuffer, {
            caption,
            parse_mode: 'Markdown'
          }, {
            filename: `${card.name.replace(/\s+/g, '_')}.png`,
            contentType: 'image/png'
          });
          
          console.log(`Successfully sent card image for ${card.name}`);
        } catch (imageError) {
          console.log('Failed to send card image:', imageError.message);
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
          await bot.sendMessage(chatId, `üÉè *${card.name}*${card.reversed ? ' *(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)*' : ''}\n\n${this.getCardMysticalDescription(card)}`, {
            parse_mode: 'Markdown'
          });
        }
      } else {
        console.log(`Invalid card image for ${card.name}, sending text instead`);
        // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        await bot.sendMessage(chatId, `üÉè *${card.name}*${card.reversed ? ' *(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)*' : ''}\n\n${this.getCardMysticalDescription(card)}`, {
          parse_mode: 'Markdown'
        });
      }
    } else {
      console.log(`No card image data for ${card.name}, sending text`);
      // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
      await bot.sendMessage(chatId, `üÉè *${card.name}*${card.reversed ? ' *(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)*' : ''}\n\n${this.getCardMysticalDescription(card)}`, {
        parse_mode: 'Markdown'
      });
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
    if (aiInterpretation && aiInterpretation.success) {
      const positionInterpretation = this.extractPositionInterpretation(aiInterpretation, cardIndex, position.name);
      if (positionInterpretation) {
        await bot.sendMessage(chatId, `üí´ *–ú—É–¥—Ä–æ—Å—Ç—å –∫–∞—Ä—Ç—ã:*\n\n${positionInterpretation}`, { parse_mode: 'Markdown' });
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
   */
  getCardMysticalDescription(card) {
    const keywords = card.keywords || [];
    const description = card.description || '–ö–∞—Ä—Ç–∞ –Ω–µ—Å–µ—Ç –≤–∞–∂–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è –≤–∞—Å';
    
    let mysticalDesc = `${card.unicode || 'üîÆ'} ${description}\n\n`;
    
    if (keywords.length > 0) {
      mysticalDesc += `*–ö–ª—é—á–µ–≤—ã–µ —ç–Ω–µ—Ä–≥–∏–∏:* ${keywords.slice(0, 3).join(', ')}\n\n`;
    }
    
    if (card.reversed) {
      mysticalDesc += `‚ö†Ô∏è *–ö–∞—Ä—Ç–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞:* –≠–Ω–µ—Ä–≥–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞–±–æ—Ç—ã`;
    } else {
      mysticalDesc += `‚úÖ *–ü—Ä—è–º–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:* –≠–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞`;
    }
    
    return mysticalDesc;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
   */
  extractPositionInterpretation(aiInterpretation, cardIndex, positionName) {
    const interpretation = aiInterpretation.interpretation?.interpretation || aiInterpretation.interpretation?.main || '';
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
    const lines = interpretation.split('\n');
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].toLowerCase();
      if (line.includes(positionName.toLowerCase()) || line.includes(`${cardIndex + 1}`)) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∏ —Å–ª–µ–¥—É—é—â–∏–µ 2-3 —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        return lines.slice(i, i + 3).join('\n').trim();
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –º—É–¥—Ä–æ—Å—Ç—å
    const sentences = interpretation.split('. ');
    return sentences[cardIndex] || sentences[0] || '–ö–∞—Ä—Ç–∞ –≥–æ–≤–æ—Ä–∏—Ç –æ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏.';
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç —Å—Ä–∞–∑—É
   */
  async handleRevealAllCards(bot, chatId, messageId, from) {
    try {
      const readingData = this.pendingReadings?.get(chatId);
      if (!readingData) {
        console.log('Reading data not found for chat:', chatId);
        return;
      }

      const { cards, cardImages, spread, revealedCards, aiInterpretation } = readingData;

      await bot.sendMessage(chatId, 'üåü *–†–∞—Å–∫—Ä—ã–≤–∞—é –≤—Å–µ –∫–∞—Ä—Ç—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ...*\n\nüîÆ –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –ø—Ä–∏–Ω—è—Ç—å –≤—Å—é –º—É–¥—Ä–æ—Å—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∞!', { 
        parse_mode: 'Markdown' 
      });

      // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç—ã
      for (let i = 0; i < cards.length; i++) {
        if (!revealedCards.has(i)) {
          const card = cards[i];
          const cardImage = cardImages[i];

          // –ú–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã
          await this.revealCardMystically(bot, chatId, card, i, cardImage, spread, aiInterpretation);
          revealedCards.add(i);

          // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
          await new Promise(resolve => setTimeout(resolve, 1200));
        }
      }

      console.log(`All cards revealed for user ${from.id}`);

      // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const finalKeyboard = {
        inline_keyboard: [
          [{ text: 'üìú –ü–æ–ª–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ', callback_data: 'show_full_interpretation' }],
          [{ text: 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'new_reading' }]
        ]
      };
      
      await bot.sendMessage(chatId, '‚ú® *–í—Å–µ –∫–∞—Ä—Ç—ã —Ä–∞—Å–∫—Ä—ã—Ç—ã!*\n\nüîÆ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞.', {
        parse_mode: 'Markdown',
        reply_markup: this.addMainMenuButton(finalKeyboard)
      });

    } catch (error) {
      console.error('Error revealing all cards:', error);
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.pendingReadings.delete(chatId);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –∫–∞—Ä—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'new_reading' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É (–ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏)
   */
  async handleRevealedCardTouch(bot, chatId, messageId, cardIndex, from) {
    try {
      const readingData = this.pendingReadings?.get(chatId);
      if (!readingData) {
        console.log('Reading data not found for chat:', chatId);
        return;
      }

      const { cards, spread, aiInterpretation } = readingData;
      const card = cards[cardIndex];
      const position = spread.positions[cardIndex];

      if (!card) {
        console.log('Card not found at index:', cardIndex);
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
      let detailText = `üÉè *–î–ï–¢–ê–õ–ò –ö–ê–†–¢–´*\n\n`;
      detailText += `**${card.name}**${card.reversed ? ' *(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)*' : ''}\n\n`;
      detailText += `üéØ *–ü–æ–∑–∏—Ü–∏—è:* ${position.name}\n`;
      detailText += `üìù *–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:* ${position.description || '–ö–ª—é—á–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–∞—Å–∫–ª–∞–¥–µ'}\n\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∫–∞—Ä—Ç—ã
      if (card.element) {
        detailText += `üåü *–°—Ç–∏—Ö–∏—è:* ${card.element}\n`;
      }
      if (card.suit) {
        detailText += `‚ô†Ô∏è *–ú–∞—Å—Ç—å:* ${this.getSuitName(card.suit)}\n`;
      }
      if (card.number) {
        detailText += `üî¢ *–ù–æ–º–µ—Ä:* ${card.number}\n`;
      }
      
      detailText += `\n${this.getCardMysticalDescription(card)}\n\n`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
      if (aiInterpretation && aiInterpretation.success) {
        const positionInterpretation = this.extractPositionInterpretation(aiInterpretation, cardIndex, position.name);
        if (positionInterpretation) {
          detailText += `üí´ *–ú—É–¥—Ä–æ—Å—Ç—å –¥–ª—è –≤–∞—Å:*\n${positionInterpretation}`;
        }
      }

      await bot.sendMessage(chatId, detailText, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÆ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞—Å–∫–ª–∞–¥—É', callback_data: 'back_to_spread' }],
            [{ text: 'üìú –ü–æ–ª–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ', callback_data: 'show_full_interpretation' }]
          ]
        }
      });

      console.log(`Card details shown: ${card.name} for user ${from.id}`);

    } catch (error) {
      console.error('Error showing card details:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Å—Ç–∏
   */
  getSuitName(suit) {
    const suitNames = {
      'wands': '–ñ–µ–∑–ª—ã',
      'cups': '–ö—É–±–∫–∏', 
      'swords': '–ú–µ—á–∏',
      'pentacles': '–ü–µ–Ω—Ç–∞–∫–ª–∏'
    };
    return suitNames[suit] || suit;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
   */
  async handleShowFullInterpretation(bot, chatId, messageId, from) {
    try {
      const readingData = this.pendingReadings?.get(chatId);
      if (!readingData) {
        console.log('Reading data not found for chat:', chatId);
        return;
      }

      const { cards, spread, aiInterpretation, userQuestion } = readingData;

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
      await this.sendFullReadingInterpretation(bot, chatId, cards, spread, aiInterpretation, userQuestion);

      console.log(`Full interpretation shown for user ${from.id}`);

      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      this.pendingReadings?.delete(chatId);

    } catch (error) {
      console.error('Error showing full interpretation:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≥–∞–¥–∞–Ω–∏—è
   */
  async sendFullReadingInterpretation(bot, chatId, cards, spread, aiInterpretation, userQuestion) {
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
    let interpretationText = `üìú *–ü–û–õ–ù–û–ï –¢–û–õ–ö–û–í–ê–ù–ò–ï –†–ê–°–ö–õ–ê–î–ê*\n\n`;
    interpretationText += `üîÆ *${spread.name}*\n\n`;
    
    if (userQuestion) {
      interpretationText += `‚ùì *–í–∞—à –≤–æ–ø—Ä–æ—Å:* "${userQuestion}"\n\n`;
    }

    await bot.sendMessage(chatId, interpretationText, { parse_mode: 'Markdown' });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç—É —Å –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ–º
    for (let i = 0; i < cards.length; i++) {
      const card = cards[i];
      const position = spread.positions[i];
      
      let cardText = `üÉè *${position.name}*\n`;
      cardText += `${card.unicode || 'üîÆ'} **${card.name}**${card.reversed ? ' *(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)*' : ''}\n\n`;
      cardText += `${position.description || '–ö–ª—é—á–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–∞—Å–∫–ª–∞–¥–µ'}\n\n`;
      cardText += `${this.getCardMysticalDescription(card)}`;

      await bot.sendMessage(chatId, cardText, { parse_mode: 'Markdown' });
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    // AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
    if (aiInterpretation && aiInterpretation.success && aiInterpretation.interpretation) {
      let aiText = `üåü *–ú–£–î–†–û–°–¢–¨ –í–´–°–®–ò–• –°–ò–õ*\n\n`;
      
      if (aiInterpretation.interpretation.interpretation) {
        aiText += `${aiInterpretation.interpretation.interpretation}\n\n`;
      }
      
      if (aiInterpretation.interpretation.summary) {
        aiText += `üìã *–†–µ–∑—é–º–µ:*\n${aiInterpretation.interpretation.summary}\n\n`;
      }
      
      if (aiInterpretation.interpretation.advice) {
        aiText += `üí° *–°–æ–≤–µ—Ç –º—É–¥—Ä–µ—Ü–æ–≤:*\n${aiInterpretation.interpretation.advice}`;
      }

      await bot.sendMessage(chatId, aiText, { parse_mode: 'Markdown' });
    } else {
      // Fallback –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
      const fallbackText = `üåü *–¢–†–ê–î–ò–¶–ò–û–ù–ù–û–ï –¢–û–õ–ö–û–í–ê–ù–ò–ï*\n\n` +
        `–ö–∞—Ä—Ç—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ–±—è —Å–∞–º–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º –ø—É—Ç—å. ` +
        `–ö–∞–∂–¥–∞—è –Ω–µ—Å–µ—Ç –≤–∞–∂–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –æ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏. ` +
        `–î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤.`;

      await bot.sendMessage(chatId, fallbackText, { parse_mode: 'Markdown' });
    }

    // –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const closingText = `‚ú® *–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï*\n\n` +
      `–ì–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—É—Å—Ç—å –º—É–¥—Ä–æ—Å—Ç—å –∫–∞—Ä—Ç –Ω–∞–ø—Ä–∞–≤–∏—Ç –≤–∞—Å –Ω–∞ –ø—É—Ç–∏ –∫ –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ —É—Å–ø–µ—Ö—É.\n\n` +
      `üôè –ë–ª–∞–≥–æ–¥–∞—Ä—é –¥—É—Ö–æ–≤ –∫–∞—Ä—Ç –∑–∞ –∏—Ö –ø–æ—Å–ª–∞–Ω–∏—è.`;

    await bot.sendMessage(chatId, closingText, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'new_reading' }],
          [{ text: 'üìã –ò—Å—Ç–æ—Ä–∏—è –≥–∞–¥–∞–Ω–∏–π', callback_data: 'reading_history' }],
          [{ text: 'üåô –ö–∞—Ä—Ç–∞ –¥–Ω—è', callback_data: 'daily_card' }]
        ]
      }
    });
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
   */
  async sendMysticalSpreadLayout(bot, chatId, cards, spread) {
    let layoutText = `üîÆ *${spread.name}*\n\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–∞—Ä—Ç
    cards.forEach((card, index) => {
      const position = spread.positions[index];
      layoutText += `üé≠ *–ü–æ–∑–∏—Ü–∏—è ${index + 1}:* ${position.name}\n`;
      layoutText += `   ${position.description || '–ö–ª—é—á–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–∞—Å–∫–ª–∞–¥–µ'}\n\n`;
    });

    layoutText += `‚ú® *–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É*`;

    await bot.sendMessage(chatId, layoutText, { parse_mode: 'Markdown' });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç
    await this.sendRevelationButtons(bot, chatId, cards, new Set());
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç
   */
  async sendRevelationButtons(bot, chatId, cards, revealedCards) {
    const buttons = [];
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã
    const cardButtons = [];
    for (let i = 0; i < cards.length; i++) {
      if (!revealedCards.has(i)) {
        cardButtons.push({
          text: `üé≠ –ö–∞—Ä—Ç–∞ ${i + 1}`,
          callback_data: `reveal_card_${i}`
        });
      } else {
        cardButtons.push({
          text: `‚ú® –ö–∞—Ä—Ç–∞ ${i + 1} ‚ú®`,
          callback_data: `card_revealed_${i}`
        });
      }
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä—è–¥–∞–º (–º–∞–∫—Å–∏–º—É–º 2 –≤ —Ä—è–¥—É –¥–ª—è –ª—É—á—à–µ–≥–æ UX)
    for (let i = 0; i < cardButtons.length; i += 2) {
      buttons.push(cardButtons.slice(i, i + 2));
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const controlButtons = [];
    
    if (revealedCards.size > 0 && revealedCards.size < cards.length) {
      controlButtons.push({ text: 'üåü –û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã', callback_data: 'reveal_all_cards' });
    }
    
    if (revealedCards.size > 0) {
      controlButtons.push({ text: 'üìú –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ', callback_data: 'show_full_interpretation' });
    }

    if (controlButtons.length > 0) {
      buttons.push(controlButtons);
    }

    // –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É
    buttons.push([{ text: 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'new_reading' }]);

    const controlMessage = await bot.sendMessage(chatId, 'üéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–æ–º:*', {
      reply_markup: { inline_keyboard: buttons },
      parse_mode: 'Markdown'
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const readingData = this.pendingReadings?.get(chatId);
    if (readingData) {
      readingData.controlMessageId = controlMessage.message_id;
      this.pendingReadings.set(chatId, readingData);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º
   */
  async updateRevelationControls(bot, chatId, cards, revealedCards, spread) {
    const readingData = this.pendingReadings?.get(chatId);
    if (!readingData) return;

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
    if (readingData.controlMessageId) {
      await bot.deleteMessage(chatId, readingData.controlMessageId).catch(() => {});
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    await this.sendRevelationButtons(bot, chatId, cards, revealedCards);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  async saveReadingToDatabase(cards, spread, readingType, userQuestion, user, aiInterpretation) {
    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø –≥–∞–¥–∞–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
      let dbReadingType;
      switch (readingType) {
        case 'single':
          dbReadingType = 'single_card';
          break;
        case 'three':
          dbReadingType = 'three_cards';
          break;
        case 'celtic':
          dbReadingType = 'celtic_cross';
          break;
        case 'relationship':
          dbReadingType = 'relationship';
          break;
        default:
          dbReadingType = 'single_card';
      }

      const readingData = {
        userId: user.id,
        type: dbReadingType,
        spreadName: spread.name,
        cards: cards,
        positions: spread.positions,
        question: userQuestion || '–û–±—â–µ–µ –≥–∞–¥–∞–Ω–∏–µ',
        interpretation: (aiInterpretation && aiInterpretation.success && aiInterpretation.interpretation) 
          ? aiInterpretation.interpretation.interpretation 
          : '–ì–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤'
      };

      await database.createReading(readingData);
      console.log('Reading saved to database successfully');
    } catch (error) {
      console.log('Failed to save reading to database:', error.message);
    }
  }

  /**
   * –†–∞—Å–∫–ª–∞–¥ –∏–∑ —Ç—Ä–µ—Ö –∫–∞—Ä—Ç –≤ —Ä—è–¥
   */
  async sendThreeCardLayout(bot, chatId, cards, spread, mode, revealedCards) {
    const readingData = this.pendingReadings?.get(chatId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –≤ —Ä—è–¥ –∫–∞–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
    const mediaGroup = [];
    for (let i = 0; i < cards.length; i++) {
      const card = cards[i];
      const cardImage = readingData.cardImages[i];
      
      if (revealedCards.has(i)) {
        // –û—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞
        if (cardImage && cardImage.imageData && this.isValidBase64Image(cardImage.imageData)) {
          try {
            const imageBuffer = Buffer.from(cardImage.imageData, 'base64');
            mediaGroup.push({
              type: 'photo',
              media: imageBuffer,
              caption: i === 0 ? `üîÆ <b>${spread.name}</b>\n\nüÉè ${card.name}${card.reversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}\n${spread.positions[i]?.name}` : `üÉè ${card.name}${card.reversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}\n${spread.positions[i]?.name}`,
              parse_mode: 'HTML'
            });
          } catch (imageError) {
            console.log(`Failed to process card image ${i}:`, imageError.message);
            // Fallback –∫ –∑–∞–±–ª—é—Ä–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            const blurredImage = await this.createBlurredCardImage();
            mediaGroup.push({
              type: 'photo',
              media: blurredImage,
              caption: `üÉè ${card.name}${card.reversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}\n${spread.positions[i]?.name}\n(–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)`,
              parse_mode: 'HTML'
            });
          }
        } else {
          // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–±–ª—é—Ä–µ–Ω–Ω–æ–µ
          const blurredImage = await this.createBlurredCardImage();
          mediaGroup.push({
            type: 'photo',
            media: blurredImage,
            caption: `üÉè ${card.name}${card.reversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}\n${spread.positions[i]?.name}`,
            parse_mode: 'HTML'
          });
        }
      } else {
        // –ó–∞–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ (—Ä—É–±–∞—à–∫–∞)
        const blurredImage = await this.createBlurredCardImage();
        mediaGroup.push({
          type: 'photo',
          media: blurredImage,
          caption: i === 0 ? `üîÆ <b>${spread.name}</b>\n\nüé≠ ${spread.positions[i]?.name}\n(–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å)` : `üé≠ ${spread.positions[i]?.name}\n(–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å)`,
          parse_mode: 'HTML'
        });
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
    await bot.sendMediaGroup(chatId, mediaGroup);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await this.sendControlButtons(bot, chatId, cards, mode, revealedCards);
  }

  /**
   * –†–∞—Å–∫–ª–∞–¥ –∫–µ–ª—å—Ç—Å–∫–æ–≥–æ –∫—Ä–µ—Å—Ç–∞
   */
  async sendCelticCrossLayout(bot, chatId, cards, spread, mode, revealedCards) {
    const readingData = this.pendingReadings?.get(chatId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await bot.sendMessage(chatId, `üîÆ <b>${spread.name}</b>\n\n‚ú® –î—Ä–µ–≤–Ω–∏–π —Ä–∞—Å–∫–ª–∞–¥ –∫–µ–ª—å—Ç—Å–∫–∏—Ö –¥—Ä—É–∏–¥–æ–≤`, {
      parse_mode: 'HTML'
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –∫—Ä–µ—Å—Ç–∞
    // –¶–µ–Ω—Ç—Ä (–∫–∞—Ä—Ç—ã 0, 1)
    const centerGroup = [];
    for (let i = 0; i < 2; i++) {
      const card = cards[i];
      const cardImage = readingData.cardImages[i];
      
      if (revealedCards.has(i)) {
        centerGroup.push({
          type: 'photo',
          media: Buffer.from(cardImage.imageData, 'base64'),
          caption: `üÉè ${card.name}${card.reversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}\n${spread.positions[i]?.name}`,
          parse_mode: 'HTML'
        });
      } else {
        const blurredImage = await this.createBlurredCardImage();
        centerGroup.push({
          type: 'photo',
          media: blurredImage,
          caption: `üé≠ ${spread.positions[i]?.name}\n(–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å)`,
          parse_mode: 'HTML'
        });
      }
    }

    if (centerGroup.length > 0) {
      await bot.sendMediaGroup(chatId, centerGroup);
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–ø–∞—Ä–Ω–æ
    for (let i = 2; i < cards.length; i += 2) {
      const pairGroup = [];
      for (let j = i; j < Math.min(i + 2, cards.length); j++) {
        const card = cards[j];
        const cardImage = readingData.cardImages[j];
        
        if (revealedCards.has(j)) {
          pairGroup.push({
            type: 'photo',
            media: Buffer.from(cardImage.imageData, 'base64'),
            caption: `üÉè ${card.name}${card.reversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}\n${spread.positions[j]?.name}`,
            parse_mode: 'HTML'
          });
        } else {
          const blurredImage = await this.createBlurredCardImage();
          pairGroup.push({
            type: 'photo',
            media: blurredImage,
            caption: `üé≠ ${spread.positions[j]?.name}\n(–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å)`,
            parse_mode: 'HTML'
          });
        }
      }
      
      if (pairGroup.length > 0) {
        await bot.sendMediaGroup(chatId, pairGroup);
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await this.sendControlButtons(bot, chatId, cards, mode, revealedCards);
  }

  /**
   * –†–∞—Å–∫–ª–∞–¥ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã
   */
  async sendSingleCardLayout(bot, chatId, cards, spread, mode, revealedCards) {
    const readingData = this.pendingReadings?.get(chatId);
    const card = cards[0];
    const cardImage = readingData.cardImages[0];
    
    if (revealedCards.has(0)) {
      // –û—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞
      const imageBuffer = Buffer.from(cardImage.imageData, 'base64');
      await bot.sendPhoto(chatId, imageBuffer, {
        caption: `üîÆ <b>${spread.name}</b>\n\nüÉè ${card.name}${card.reversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}\n\n${spread.positions[0]?.name}`,
        parse_mode: 'HTML'
      }, {
        filename: `${card.name.replace(/\s+/g, '_')}_single.png`,
        contentType: 'image/png'
      });
    } else {
      // –ó–∞–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞
      const blurredImage = await this.createBlurredCardImage();
      await bot.sendPhoto(chatId, blurredImage, {
        caption: `üîÆ <b>${spread.name}</b>\n\nüé≠ ${spread.positions[0]?.name}\n(–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å)`,
        parse_mode: 'HTML'
      }, {
        filename: 'card_back.png',
        contentType: 'image/png'
      });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await this.sendControlButtons(bot, chatId, cards, mode, revealedCards);
  }

  /**
   * –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–º
   */
  async sendControlButtons(bot, chatId, cards, mode, revealedCards) {
    const readingData = this.pendingReadings?.get(chatId);
    if (!readingData) return;

    const allRevealed = revealedCards.size === cards.length;
    const buttons = [];

    if (!allRevealed) {
      // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
      const cardButtons = [];
      for (let i = 0; i < cards.length; i++) {
        if (!revealedCards.has(i)) {
          cardButtons.push({
            text: `üÉè ${i + 1}`,
            callback_data: `reveal_card_${i}`
          });
        }
      }

      if (cardButtons.length > 0) {
        // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä—è–¥–∞–º (–º–∞–∫—Å–∏–º—É–º 3 –≤ —Ä—è–¥—É)
        for (let i = 0; i < cardButtons.length; i += 3) {
          buttons.push(cardButtons.slice(i, i + 3));
        }
      }

      // –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ"
      if (revealedCards.size > 0 && revealedCards.size < cards.length) {
        buttons.push([{ text: 'üîÆ –û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã', callback_data: 'reveal_all_cards' }]);
      }
    }

    // –ö–Ω–æ–ø–∫–∞ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É)
    if (allRevealed || revealedCards.size > 0) {
      buttons.push([{ text: 'üìú –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ', callback_data: 'show_interpretation' }]);
    }

    // –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è
    buttons.push([{ text: 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'new_reading' }]);

    const controlMessage = await bot.sendMessage(chatId, 'üé≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–æ–º:', {
      reply_markup: {
        inline_keyboard: buttons
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    readingData.controlMessageId = controlMessage.message_id;
    this.pendingReadings.set(chatId, readingData);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–±–ª—é—Ä–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã (—Ä—É–±–∞—à–∫–∞)
   */
  async createBlurredCardImage() {
    // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä—É–±–∞—à–∫–∏ –∫–∞—Ä—Ç—ã –≤ base64 (—Å–∏–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç)
    const cardBackImage = Buffer.from('', 'base64');
    return cardBackImage;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –ø–∞–º—è—Ç–∏ (—Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç)
   */
  cleanupOldQuestions() {
    if (!this.pendingQuestions) return;
    
    const now = Date.now();
    const maxAge = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
    
    for (const [chatId, questionData] of this.pendingQuestions.entries()) {
      if (now - questionData.timestamp > maxAge) {
        this.pendingQuestions.delete(chatId);
        console.log(`Cleaned up old question for chat ${chatId}`);
      }
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö pending —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
   */
  cleanupPendingStates() {
    const now = Date.now();
    const timeout = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

    // –û—á–∏—Å—Ç–∫–∞ pending –≥–∞–¥–∞–Ω–∏–π
    if (this.pendingReadings) {
      for (const [chatId, data] of this.pendingReadings.entries()) {
        const timestamp = data.timestamp || data.startTime || 0;
        if (now - timestamp > timeout) {
          this.pendingReadings.delete(chatId);
          console.log(`Cleaned up pending reading for chat ${chatId}`);
        }
      }
    }

    const totalPending = (this.pendingReadings?.size || 0) + (this.pendingQuestions?.size || 0);
    if (totalPending > 0) {
      console.log(`Active pending states: questions=${this.pendingQuestions?.size || 0}, readings=${this.pendingReadings?.size || 0}`);
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
   */
  addMainMenuButton(keyboard) {
    if (!keyboard.inline_keyboard) {
      keyboard.inline_keyboard = [];
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    const hasMainMenu = keyboard.inline_keyboard.some(row => 
      row.some(button => button.callback_data === 'back_to_menu')
    );
    
    if (!hasMainMenu) {
      keyboard.inline_keyboard.push([
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }
      ]);
    }
    
    return keyboard;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  isValidBase64Image(base64String) {
    try {
      if (!base64String || typeof base64String !== 'string') {
        return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π base64
      const buffer = Buffer.from(base64String, 'base64');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫)
      if (buffer.length < 100) {
        return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const signatures = [
        [0xFF, 0xD8, 0xFF], // JPEG
        [0x89, 0x50, 0x4E, 0x47], // PNG  
        [0x47, 0x49, 0x46], // GIF
        [0x42, 0x4D], // BMP
        [0x52, 0x49, 0x46, 0x46] // WEBP
      ];
      
      return signatures.some(sig => 
        sig.every((byte, index) => buffer[index] === byte)
      );
    } catch (error) {
      console.log('Base64 validation error:', error.message);
      return false;
    }
  }
  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
   */
  async handleAppCommand(bot, msg) {
    try {
      const user = await this.ensureUser(msg.from);

      const text = `üì± *MISTIKA - –ü–æ–ª–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ*\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ MISTIKA –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º:\n\n‚ú® **–ß—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:**\n‚Ä¢ –ü–æ–ª–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ\n‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è\n‚Ä¢ –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å —Ä–∏—Ç—É–∞–ª–∞–º–∏\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –≥–∞–¥–∞–Ω–∏–π\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\nüîÆ –û—Ç–∫—Ä–æ–π—Ç–µ –º–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç–∞–ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;

      await bot.sendMessage(msg.chat.id, text, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚ú® –û—Ç–∫—Ä—ã—Ç—å MISTIKA',
                web_app: { url: process.env.WEBAPP_URL || 'https://mistika.app' }
              }
            ],
            [
              { text: 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'new_reading' },
              { text: 'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è', callback_data: 'numerology' }
            ]
          ]
        }
      });

      await database.trackEvent({
        type: 'button_app',
        userId: user.id
      });

    } catch (error) {
      console.error('Error in app command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async handleSettingsNotifications(bot, chatId, messageId, from) {
    try {
      const user = await this.ensureUser(from);
      
      const text = `üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:`;
      
      const keyboard = {
        inline_keyboard: [
          [
            { text: user.notifyDailyCard ? '‚úÖ' : '‚ùå', callback_data: 'toggle_daily_notifications' },
            { text: '–î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞', callback_data: 'info_daily_notifications' }
          ],
          [
            { text: user.notifyLunar ? '‚úÖ' : '‚ùå', callback_data: 'toggle_lunar_notifications' },
            { text: '–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data: 'info_lunar_notifications' }
          ],
          [
            { text: user.notifyPremium ? '‚úÖ' : '‚ùå', callback_data: 'toggle_premium_notifications' },
            { text: '–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏', callback_data: 'info_premium_notifications' }
          ],
          [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings' }
          ]
        ]
      };

      await bot.editMessageText(text, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('Error in settings notifications:', error);
      await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings' }]
          ]
        }
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–º—ã
   */
  async handleSettingsTheme(bot, chatId, messageId, from) {
    try {
      const user = await this.ensureUser(from);
      
      const text = `üé® *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:`;
      
      const keyboard = {
        inline_keyboard: [
          [
            { text: user.theme === 'dark' ? 'üåô –¢–µ–º–Ω–∞—è ‚úÖ' : 'üåô –¢–µ–º–Ω–∞—è', callback_data: 'theme_dark' },
            { text: user.theme === 'light' ? '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è ‚úÖ' : '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è', callback_data: 'theme_light' }
          ],
          [
            { text: user.theme === 'mystical' ? 'üîÆ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è ‚úÖ' : 'üîÆ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è', callback_data: 'theme_mystical' }
          ],
          [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings' }
          ]
        ]
      };

      await bot.editMessageText(text, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('Error in settings theme:', error);
      await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–º—ã.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings' }]
          ]
        }
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞
   */
  async handleSettingsLanguage(bot, chatId, messageId, from) {
    try {
      const user = await this.ensureUser(from);
      
      const text = `üåê *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:`;
      
      const keyboard = {
        inline_keyboard: [
          [
            { text: user.language === 'ru' ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π ‚úÖ' : 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' },
            { text: user.language === 'en' ? 'üá∫üá∏ English ‚úÖ' : 'üá∫üá∏ English', callback_data: 'lang_en' }
          ],
          [
            { text: user.language === 'es' ? 'üá™üá∏ Espa√±ol ‚úÖ' : 'üá™üá∏ Espa√±ol', callback_data: 'lang_es' },
            { text: user.language === 'fr' ? 'üá´üá∑ Fran√ßais ‚úÖ' : 'üá´üá∑ Fran√ßais', callback_data: 'lang_fr' }
          ],
          [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings' }
          ]
        ]
      };

      await bot.editMessageText(text, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('Error in settings language:', error);
      await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings' }]
          ]
        }
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–ª–æ–¥—ã
   */
  async handleSettingsDeck(bot, chatId, messageId, from) {
    try {
      const user = await this.ensureUser(from);
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
      const userPreferences = user.preferences || {};
      const cardGeneration = userPreferences.cardGeneration || {};
      const currentDeck = cardGeneration.defaultStyle || user.deckType || 'mystic';
      
      console.log(`üé® Bot: Showing deck settings for user ${user.telegramId}, current style: ${currentDeck}`);
      
      const text = `üîÆ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è –∫–æ–ª–æ–¥—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç:\n\nüí° *–°—Ç–∏–ª—å –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ, –∫–∞–∫ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–∏ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ*`;
      
      const deckStyles = [
        { key: 'mystic', name: 'üîÆ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π', desc: '–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞–≥–∏—á–µ—Å–∫–∏–π' },
        { key: 'classic', name: 'üìú –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', desc: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –†–∞–π–¥–µ—Ä-–£—ç–π—Ç' },
        { key: 'modern', name: 'üî≥ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π', desc: '–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω' },
        { key: 'fantasy', name: 'üßö –§—ç–Ω—Ç–µ–∑–∏', desc: '–í–æ–ª—à–µ–±–Ω—ã–π —Å–∫–∞–∑–æ—á–Ω—ã–π' },
        { key: 'gothic', name: 'üè∞ –ì–æ—Ç–∏—á–µ—Å–∫–∏–π', desc: '–¢–µ–º–Ω—ã–π –¥—Ä–∞–º–∞—Ç–∏—á–Ω—ã–π' },
        { key: 'vintage', name: 'üì∞ –í–∏–Ω—Ç–∞–∂–Ω—ã–π', desc: '–°—Ç–∞—Ä–∏–Ω–Ω—ã–π —Ä–µ—Ç—Ä–æ' },
        { key: 'art_nouveau', name: 'üåø –ê—Ä-–Ω—É–≤–æ', desc: '–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π' },
        { key: 'baroque', name: 'üëë –ë–∞—Ä–æ–∫–∫–æ', desc: '–†–æ—Å–∫–æ—à–Ω—ã–π –ø—ã—à–Ω—ã–π' }
      ];
      
      const keyboard = {
        inline_keyboard: []
      };
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 —Å—Ç–∏–ª—è –≤ —Ä—è–¥
      for (let i = 0; i < deckStyles.length; i += 2) {
        const row = [];
        for (let j = i; j < Math.min(i + 2, deckStyles.length); j++) {
          const style = deckStyles[j];
          const isSelected = currentDeck === style.key;
          const buttonText = isSelected ? `${style.name} ‚úÖ` : style.name;
          row.push({ 
            text: buttonText, 
            callback_data: `deck_${style.key}` 
          });
        }
        keyboard.inline_keyboard.push(row);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∏–ª–µ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      keyboard.inline_keyboard.push([
        { text: `üìã –¢–µ–∫—É—â–∏–π: ${deckStyles.find(s => s.key === currentDeck)?.name || currentDeck}`, callback_data: 'test_show_settings' }
      ]);
      keyboard.inline_keyboard.push([
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings' }
      ]);

      await bot.editMessageText(text, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('Error in settings deck:', error);
      await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–ª–æ–¥—ã.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings' }]
          ]
        }
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–ª–æ–¥—ã
   */
  async handleDeckSelection(bot, chatId, messageId, data, from) {
    try {
      const user = await this.ensureUser(from);
      const selectedStyle = data.replace('deck_', '');
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è
      const styleDescriptions = {
        mystic: '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å - —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞–≥–∏—á–µ—Å–∫–∏–π —Å —Ç–µ–º–Ω—ã–º–∏ —Ç–æ–Ω–∞–º–∏ –∏ –∑–æ–ª–æ—Ç—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏',
        classic: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å - —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –†–∞–π–¥–µ—Ä-–£—ç–π—Ç —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é',
        modern: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å —á–∏—Å—Ç—ã–º–∏ –ª–∏–Ω–∏—è–º–∏ –∏ –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π',
        fantasy: '–§—ç–Ω—Ç–µ–∑–∏ —Å—Ç–∏–ª—å - –≤–æ–ª—à–µ–±–Ω—ã–π —Å–∫–∞–∑–æ—á–Ω—ã–π —Å –º–∞–≥–∏—á–µ—Å–∫–∏–º–∏ —Å—É—â–µ—Å—Ç–≤–∞–º–∏',
        gothic: '–ì–æ—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å - —Ç–µ–º–Ω—ã–π –¥—Ä–∞–º–∞—Ç–∏—á–Ω—ã–π —Å –≥–æ—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–æ—Ç–∏–≤–∞–º–∏',
        vintage: '–í–∏–Ω—Ç–∞–∂–Ω—ã–π —Å—Ç–∏–ª—å - —Å—Ç–∞—Ä–∏–Ω–Ω—ã–π —Ä–µ—Ç—Ä–æ —Å —Å–æ—Å—Ç–∞—Ä–µ–Ω–Ω–æ–π –±—É–º–∞–≥–æ–π',
        art_nouveau: '–ê—Ä-–Ω—É–≤–æ —Å—Ç–∏–ª—å - —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ—Ä–Ω–∞–º–µ–Ω—Ç–∞–º–∏',
        baroque: '–ë–∞—Ä–æ–∫–∫–æ —Å—Ç–∏–ª—å - —Ä–æ—Å–∫–æ—à–Ω—ã–π –ø—ã—à–Ω—ã–π —Å –±–æ–≥–∞—Ç—ã–º–∏ –æ—Ä–Ω–∞–º–µ–Ω—Ç–∞–º–∏',
        minimalist: '–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç—Å–∫–∏–π —Å—Ç–∏–ª—å - –ø—Ä–æ—Å—Ç–æ–π –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–π',
        steampunk: '–°—Ç–∏–º–ø–∞–Ω–∫ —Å—Ç–∏–ª—å - –≤–∏–∫—Ç–æ—Ä–∏–∞–Ω—Å–∫–∏–π –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —Å —à–µ—Å—Ç–µ—Ä–µ–Ω–∫–∞–º–∏'
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
      // –ü–∞—Ä—Å–∏–º preferences –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—à–ª–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
      let currentPreferences = {};
      if (typeof user.preferences === 'string') {
        try {
          currentPreferences = JSON.parse(user.preferences);
        } catch (error) {
          console.error('Error parsing user preferences in deck selection:', error);
          currentPreferences = {};
        }
      } else {
        currentPreferences = user.preferences || {};
      }
      
      const currentCardGeneration = currentPreferences.cardGeneration || {};
      
      const updateData = { 
        deckType: selectedStyle, // –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        preferences: {
          ...currentPreferences,
          cardDeck: selectedStyle, // –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          cardGeneration: {
            ...currentCardGeneration,
            defaultStyle: selectedStyle
          }
        }
      };

      console.log(`üé® Bot: Updating user ${user.telegramId} with data:`, JSON.stringify(updateData, null, 2));

      const result = await database.updateUser(user.telegramId, updateData);

      console.log(`üé® Bot: Update result:`, JSON.stringify(result, null, 2));

      // –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      console.log(`üîÑ Bot: Reloading user data after update...`);
      const refreshedUser = await this.ensureUser(from);
      console.log(`üîÑ Bot: Refreshed user preferences:`, JSON.stringify(refreshedUser.preferences, null, 2));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
      setTimeout(async () => {
        try {
          const updatedUser = await database.getUserByTelegramId(user.telegramId);
          console.log(`üîç Bot: User after update check:`, {
            deckType: updatedUser?.user?.deckType,
            preferences: JSON.stringify(updatedUser?.user?.preferences, null, 2)
          });
        } catch (error) {
          console.error('Error checking updated user:', error);
        }
      }, 1000);

      const confirmText = `‚úÖ *–°—Ç–∏–ª—å –∫–æ–ª–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω*\n\nüé® *–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å:* ${styleDescriptions[selectedStyle]}\n\nüí° –¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ!\n\nüß™ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /test ‚Üí "üìã –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"`;

      await bot.editMessageText(confirmText, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÆ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å', callback_data: 'settings_deck' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });

    } catch (error) {
      console.error('Error in deck selection:', error);
      await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'settings_deck' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings' }]
          ]
        }
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
   */
  async handleTestCommand(bot, msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
      const user = await this.ensureUser(msg.from);

      await bot.sendMessage(chatId, 
        'üß™ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π MISTIKA</b>\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:', {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üé® –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
                callback_data: 'test_image_generation'
              }
            ],
            [
              {
                text: '‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç',
                callback_data: 'test_parallel_generation'
              }
            ],
            [
              {
                text: 'üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å fallback',
                callback_data: 'test_fallback_generation'
              }
            ],
            [
              {
                text: 'üé¥ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏',
                callback_data: 'test_available_styles'
              }
            ],
            [
              {
                text: 'üíä –ó–¥–æ—Ä–æ–≤—å–µ Kandinsky API',
                callback_data: 'test_kandinsky_health'
              }
            ],
            [
              {
                text: 'üìã –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                callback_data: 'test_show_settings'
              }
            ],
            [
              {
                text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                callback_data: 'back_to_menu'
              }
            ]
          ]
        }
      });

    } catch (error) {
      console.error('Error in test command:', error);
      await bot.sendMessage(chatId, 
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'restart' }
          ]]
        }
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  async handleTestImageGeneration(bot, chatId, messageId, from) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const user = await this.ensureUser(from);
      const userPreferences = user.preferences || {};
      const cardGeneration = userPreferences.cardGeneration || {};
      const style = cardGeneration.defaultStyle || 'mystic';
      
      await bot.editMessageText(
        'üé® <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n\n' +
        `üé® <b>–°—Ç–∏–ª—å:</b> ${style}\n` +
        '‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...', {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML'
      });

      console.log(`üß™ Bot: Testing image generation for user ${user.telegramId} with style: ${style}`);

      const result = await database.testImageGeneration();

      let resultText;
      if (result.success) {
        resultText = '‚úÖ <b>–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!</b>\n\n' +
          `üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> ${result.isMock ? 'Fallback —Ä–µ–∂–∏–º' : 'AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è'}\n` +
          `üÜî <b>UUID:</b> ${result.uuid}\n` +
          `üìè <b>–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:</b> ${result.imageLength} –±–∞–π—Ç`;
      } else {
        resultText = '‚ùå <b>–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª—Å—è</b>\n\n' +
          `üö´ <b>–û—à–∏–±–∫–∞:</b> ${result.error}`;
      }

      await bot.editMessageText(resultText, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç', callback_data: 'test_image_generation' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º', callback_data: 'test_menu' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });

    } catch (error) {
      console.error('Error in image generation test:', error);
      await bot.editMessageText(
        '‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏</b>\n\n' +
        `–î–µ—Ç–∞–ª–∏: ${error.message}`, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º', callback_data: 'test_menu' }]
          ]
        }
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  async handleTestParallelGeneration(bot, chatId, messageId, from) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const user = await this.ensureUser(from);
      const userPreferences = user.preferences || {};
      const cardGeneration = userPreferences.cardGeneration || {};
      const style = cardGeneration.defaultStyle || 'mystic';
      
      await bot.editMessageText(
        '‚ö° <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>\n\n' +
        `üé® <b>–°—Ç–∏–ª—å:</b> ${style}\n` +
        '‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 –∫–∞—Ä—Ç—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ...', {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML'
      });

      console.log(`üß™ Bot: Testing parallel generation for user ${user.telegramId} with style: ${style}`);

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã
      const testCards = [
        { name: '–ú–∞–≥', description: '–ö–∞—Ä—Ç–∞ –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π' },
        { name: '–ñ—Ä–∏—Ü–∞', description: '–ö–∞—Ä—Ç–∞ –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ —Ç–∞–π–Ω–æ–≥–æ –∑–Ω–∞–Ω–∏—è' },
        { name: '–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞', description: '–ö–∞—Ä—Ç–∞ –∏–∑–æ–±–∏–ª–∏—è –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞' }
      ];

      const startTime = Date.now();
      const result = await database.generateMultipleCardImages(testCards, {
        style: style,
        maxConcurrent: 3
      });
      const duration = Date.now() - startTime;

      let resultText;
      if (result.success) {
        const stats = result.stats;
        resultText = '‚úÖ <b>–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n' +
          `‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> ${(duration / 1000).toFixed(1)} —Å–µ–∫\n` +
          `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
          `  ‚Ä¢ –í—Å–µ–≥–æ: ${stats.total}\n` +
          `  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${stats.successful}\n` +
          `  ‚Ä¢ –û—à–∏–±–æ–∫: ${stats.failed}\n\n` +
          `üéØ <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> ${Math.round((stats.successful / stats.total) * 100)}%`;
      } else {
        resultText = '‚ùå <b>–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å</b>\n\n' +
          `üö´ <b>–û—à–∏–±–∫–∞:</b> ${result.error}`;
      }

      await bot.editMessageText(resultText, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç', callback_data: 'test_parallel_generation' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º', callback_data: 'test_menu' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });

    } catch (error) {
      console.error('Error in parallel generation test:', error);
      await bot.editMessageText(
        '‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>\n\n' +
        `–î–µ—Ç–∞–ª–∏: ${error.message}`, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º', callback_data: 'test_menu' }]
          ]
        }
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
   */
  async handleTestAvailableStyles(bot, chatId, messageId) {
    try {
      await bot.editMessageText(
        'üé¥ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–ª–µ–π...</b>', {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML'
      });

      const result = await database.getAvailableStyles();

      let resultText;
      if (result.success) {
        resultText = 'üé® <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫–æ–ª–æ–¥:</b>\n\n';
        Object.entries(result.styles).forEach(([key, style]) => {
          resultText += `${style.emoji} <b>${style.name}</b>\n`;
          if (style.description) {
            resultText += `<i>${style.description}</i>\n\n`;
          }
        });
        resultText += `üìä <b>–í—Å–µ–≥–æ —Å—Ç–∏–ª–µ–π:</b> ${result.count}`;
      } else {
        resultText = '‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∏–ª–∏</b>\n\n' +
          `üö´ <b>–û—à–∏–±–∫–∞:</b> ${result.error}`;
      }

      await bot.editMessageText(resultText, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'test_available_styles' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º', callback_data: 'test_menu' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });

    } catch (error) {
      console.error('Error in styles test:', error);
      await bot.editMessageText(
        '‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∏–ª–µ–π</b>\n\n' +
        `–î–µ—Ç–∞–ª–∏: ${error.message}`, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º', callback_data: 'test_menu' }]
          ]
        }
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è Kandinsky API
   */
  async handleTestKandinskyHealth(bot, chatId, messageId) {
    try {
      await bot.editMessageText(
        'üíä <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Kandinsky API...</b>', {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML'
      });

      const result = await database.checkKandinskyHealth();

      let resultText;
      if (result.success) {
        const health = result.kandinsky;
        resultText = 'üíä <b>–°—Ç–∞—Ç—É—Å Kandinsky API</b>\n\n';
        
        if (health.available) {
          resultText += '‚úÖ <b>–°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n';
          resultText += `üÜî <b>Pipeline ID:</b> ${health.pipelineId}\n`;
          resultText += `üì° <b>–°—Ç–∞—Ç—É—Å:</b> ${health.pipelineStatus}\n`;
        } else {
          resultText += '‚ùå <b>–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n';
          if (health.error) {
            resultText += `üö´ <b>–û—à–∏–±–∫–∞:</b> ${health.error}\n`;
          }
          if (health.status) {
            resultText += `üì° <b>HTTP Status:</b> ${health.status}\n`;
          }
        }
        
        resultText += `üîë <b>API Key:</b> ${health.apiKey}\n`;
        resultText += `üîê <b>Secret Key:</b> ${health.secretKey}`;
      } else {
        resultText = '‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API</b>\n\n' +
          `üö´ <b>–î–µ—Ç–∞–ª–∏:</b> ${result.error}`;
      }

      await bot.editMessageText(resultText, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É', callback_data: 'test_kandinsky_health' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º', callback_data: 'test_menu' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });

    } catch (error) {
      console.error('Error in Kandinsky health test:', error);
      await bot.editMessageText(
        '‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è API</b>\n\n' +
        `–î–µ—Ç–∞–ª–∏: ${error.message}`, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º', callback_data: 'test_menu' }]
          ]
        }
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async handleTestCallback(bot, chatId, messageId, data, from) {
    try {
      console.log(`Processing test callback: ${data} for user ${from.id}`);

      switch (data) {
        case 'test_menu':
          await this.handleTestCommand(bot, { chat: { id: chatId }, from: from, message_id: messageId });
          break;

        case 'test_image_generation':
          await this.handleTestImageGeneration(bot, chatId, messageId, from);
          break;

        case 'test_parallel_generation':
          await this.handleTestParallelGeneration(bot, chatId, messageId, from);
          break;

        case 'test_available_styles':
          await this.handleTestAvailableStyles(bot, chatId, messageId);
          break;

        case 'test_kandinsky_health':
          await this.handleTestKandinskyHealth(bot, chatId, messageId);
          break;

        case 'test_show_settings':
          await this.handleShowUserSettings(bot, chatId, messageId, from);
          break;

        default:
          console.warn(`Unknown test callback: ${data}`);
          await bot.answerCallbackQuery(query.id, {
            text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∞',
            show_alert: true
          });
      }

    } catch (error) {
      console.error('Error in test callback:', error);
      await bot.editMessageText(
        '‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞</b>\n\n' +
        `–î–µ—Ç–∞–ª–∏: ${error.message}`, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º', callback_data: 'test_menu' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async handleShowUserSettings(bot, chatId, messageId, from) {
    try {
      const user = await this.ensureUser(from);
      
      // –ü–∞—Ä—Å–∏–º preferences –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—à–ª–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
      let userPreferences = {};
      if (typeof user.preferences === 'string') {
        try {
          userPreferences = JSON.parse(user.preferences);
        } catch (error) {
          console.error('Error parsing user preferences:', error);
          userPreferences = {};
        }
      } else {
        userPreferences = user.preferences || {};
      }
      
      const cardGeneration = userPreferences.cardGeneration || {};
      
      console.log(`üìã Bot: Showing settings for user ${user.telegramId}:`, userPreferences);
      
      const settingsText = 'üìã <b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç</b>\n\n' +
        `üé® <b>–°—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b> ${cardGeneration.defaultStyle || 'mystic'}\n` +
        `üîÑ <b>–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è:</b> ${cardGeneration.autoGenerate !== false ? '–í–ö–õ ‚úÖ' : '–í–´–ö–õ ‚ùå'}\n` +
        `‚ö° <b>–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è:</b> ${cardGeneration.parallelGeneration !== false ? '–í–ö–õ ‚úÖ' : '–í–´–ö–õ ‚ùå'}\n` +
        `üîÆ <b>–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b> ${cardGeneration.fallbackEnabled !== false ? '–í–ö–õ ‚úÖ' : '–í–´–ö–õ ‚ùå'}\n` +
        `üíé <b>–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ:</b> ${cardGeneration.highQuality ? '–í–ö–õ ‚úÖ' : '–í–´–ö–õ ‚ùå'}\n\n` +
        'üí° <i>–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (–ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)</i>';

      await bot.editMessageText(settingsText, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            ...(process.env.WEBAPP_URL ? [[{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', web_app: { url: `${process.env.WEBAPP_URL}/profile` } }]] : []),
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º', callback_data: 'test_menu' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });

    } catch (error) {
      console.error('Error showing user settings:', error);
      await bot.editMessageText(
        '‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n\n' +
        `–î–µ—Ç–∞–ª–∏: ${error.message}`, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º', callback_data: 'test_menu' }]
          ]
        }
      });
    }
  }
}

module.exports = new BotHandlers();