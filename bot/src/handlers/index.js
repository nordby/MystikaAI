// bot/src/handlers/index.js
const database = require('../database');
const config = require('../config');
const { TAROT_CARDS } = require('../data/tarot');
const NumerologyHandler = require('./numerology');

class BotHandlers {
  constructor() {
    this.handlers = new Map();
    this.commandHandlers = new Map();
    this.callbackHandlers = new Map();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Maps –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    this.pendingQuestions = new Map();
    this.pendingReadings = new Map();
    this.pendingNumerology = new Map();
    
    // –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –æ—á–∏—â–∞–µ—Ç—Å—è)
    this.userProfiles = new Map(); // chatId -> { profile, birthDate, fullName, lastAnalysis }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
    this.numerologyHandler = new NumerologyHandler();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
    this.numerologyHandler.setProfileHandler({
      saveProfile: (userId, profile) => {
        this.userProfiles.set(userId, profile);
      },
      getProfile: (userId) => {
        return this.userProfiles.get(userId);
      }
    });
    
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    setInterval(() => {
      this.cleanupOldQuestions();
      this.cleanupPendingStates();
    }, 10 * 60 * 1000);
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
   */
  registerAll(bot) {
    console.log('Registering bot handlers...');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    this.registerCommandHandlers(bot);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback queries
    this.registerCallbackHandlers(bot);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.registerMessageHandlers(bot);

    console.log('Bot handlers registered successfully');
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
   */
  registerCommandHandlers(bot) {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    bot.onText(/\/start/, async (msg) => {
      await this.handleStartCommand(bot, msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /reading
    bot.onText(/\/reading/, async (msg) => {
      await this.handleReadingCommand(bot, msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /daily
    bot.onText(/\/daily/, async (msg) => {
      await this.handleDailyCommand(bot, msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /lunar
    bot.onText(/\/lunar/, async (msg) => {
      await this.handleLunarCommand(bot, msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /numerology
    bot.onText(/\/numerology/, async (msg) => {
      await this.handleNumerologyCommand(bot, msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /profile
    bot.onText(/\/profile/, async (msg) => {
      await this.handleProfileCommand(bot, msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /history
    bot.onText(/\/history/, async (msg) => {
      await this.handleHistoryCommand(bot, msg);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /settings
    bot.onText(/\/settings/, async (msg) => {
      await this.handleSettingsCommand(bot, msg);
    });

    console.log('Command handlers registered');
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback queries
   */
  registerCallbackHandlers(bot) {
    bot.on('callback_query', async (query) => {
      await this.handleCallbackQuery(bot, query);
    });

    console.log('Callback handlers registered');
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  registerMessageHandlers(bot) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on('message', async (msg) => {
      if (msg.text && !msg.text.startsWith('/')) {
        await this.handleTextMessage(bot, msg);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    bot.on('photo', async (msg) => {
      await this.handlePhotoMessage(bot, msg);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on('voice', async (msg) => {
      await this.handleVoiceMessage(bot, msg);
    });

    console.log('Message handlers registered');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
   */
  async handleStartCommand(bot, msg) {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;

      console.log('Processing /start command:', { userId, chatId });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
      let userResponse = await database.getUserByTelegramId(userId);
      let user = userResponse?.user;
      let isNewUser = false;

      if (!user) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = {
          telegramId: userId,
          username: msg.from.username || null,
          firstName: msg.from.first_name || null,
          lastName: msg.from.last_name || null,
          languageCode: msg.from.language_code || 'ru',
          chatId: chatId
        };

        const createResponse = await database.createUser(userData);
        user = createResponse.user; // –ò–∑–≤–ª–µ–∫–∞–µ–º user –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        isNewUser = true;

        console.log('New user created:', { userId, username: msg.from.username });
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ  
        await database.updateUser(user.telegramId, {
          lastActive: new Date(),
          chatId: chatId
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const messages = config.getMessages();
      const keyboards = config.getKeyboards();
      
      const welcomeText = isNewUser ? 
        messages.start.new_user : 
        messages.start.returning_user;

      await bot.sendMessage(chatId, welcomeText, {
        reply_markup: keyboards.mainMenu,
        parse_mode: 'Markdown'
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É WebApp
      await bot.sendMessage(chatId, 'üîÆ –û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ MISTIKA:', {
        reply_markup: keyboards.webApp
      });

      // –¢—Ä–µ–∫–∏–Ω–≥ —Å–æ–±—ã—Ç–∏—è
      await database.trackEvent({
        type: 'command_start',
        userId: user.id,
        isNewUser,
        metadata: {
          username: msg.from.username,
          languageCode: msg.from.language_code
        }
      });

    } catch (error) {
      console.error('Error in /start command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
   */
  async handleHelpCommand(bot, msg) {
    try {
      const messages = config.getMessages();
      
      await bot.sendMessage(msg.chat.id, messages.help, {
        parse_mode: 'HTML'
      });

      await database.trackEvent({
        type: 'command_help',
        userId: msg.from.id
      });

    } catch (error) {
      console.error('Error in /help command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reading
   */
  async handleReadingCommand(bot, msg) {
    try {
      const user = await this.ensureUser(msg.from);

      await bot.sendMessage(msg.chat.id, 'üîÆ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:\n\nüí° *–°–æ–≤–µ—Ç:* –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∞ –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥.', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üÉè –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞', callback_data: 'reading_single' },
              { text: 'üÉèüÉèüÉè –¢—Ä–∏ –∫–∞—Ä—Ç—ã', callback_data: 'reading_three' }
            ],
            [
              { text: 'üåü –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç', callback_data: 'reading_celtic' },
              { text: 'üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è', callback_data: 'reading_relationship' }
            ],
            [{ text: '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–Ω–∞—á–∞–ª–∞', callback_data: 'ask_question_first' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
          ]
        }
      });

      await database.trackEvent({
        type: 'command_reading',
        userId: user.id
      });

    } catch (error) {
      console.error('Error in /reading command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /daily
   */
  async handleDailyCommand(bot, msg) {
    try {
      const user = await this.ensureUser(msg.from);

      await bot.sendChatAction(msg.chat.id, 'typing');

      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –¥–Ω—è
      const allCards = [
        ...TAROT_CARDS.major,
        ...TAROT_CARDS.minor.wands,
        ...TAROT_CARDS.minor.cups,
        ...TAROT_CARDS.minor.swords,
        ...TAROT_CARDS.minor.pentacles
      ];
      
      const randomCard = allCards[Math.floor(Math.random() * allCards.length)];
      const isReversed = Math.random() < 0.2; // 20% —à–∞–Ω—Å –Ω–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—É—é –∫–∞—Ä—Ç—É
      
      const cardWithState = {
        ...randomCard,
        reversed: isReversed
      };

      // –ü–æ–ª—É—á–∞–µ–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–ª—è –∫–∞—Ä—Ç—ã –¥–Ω—è
      let dailyInterpretation = null;
      try {
        await bot.sendChatAction(msg.chat.id, 'typing');
        
        const aiResponse = await this.getDailyCardInterpretation(cardWithState, user);
        dailyInterpretation = aiResponse;
        console.log('Daily card AI interpretation received:', JSON.stringify(aiResponse, null, 2));
      } catch (error) {
        console.log('Daily card AI interpretation failed:', error.message);
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
      let cardImage = null;
      try {
        await bot.sendChatAction(msg.chat.id, 'typing');
        
        const imageResponse = await database.generateCardImage(cardWithState.name, cardWithState.description || '–ö–∞—Ä—Ç–∞ –¢–∞—Ä–æ');
        if (imageResponse && imageResponse.success) {
          cardImage = imageResponse;
        }
      } catch (error) {
        console.log('Daily card image generation failed:', error.message);
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
      let interpretationText;
      let advice;
      
      if (dailyInterpretation && dailyInterpretation.success) {
        interpretationText = dailyInterpretation.interpretation.interpretation || dailyInterpretation.interpretation.main;
        advice = dailyInterpretation.interpretation.advice;
      } else {
        // Fallback –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
        interpretationText = `–ö–∞—Ä—Ç–∞ ${cardWithState.name}${isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''} –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤–∞–∂–Ω—ã–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤ –≤–∞—à –¥–µ–Ω—å.`;
        advice = '–î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –±—É–¥—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º.';
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º caption —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã –¥–ª—è Telegram (–º–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞)
      let caption = `üåÖ <b>–ö–∞—Ä—Ç–∞ –¥–Ω—è</b>\n\nüÉè <b>${cardWithState.name}</b>${isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –µ—Å–ª–∏ –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è
      if (interpretationText) {
        const withInterpretation = caption + `\n\n${interpretationText}`;
        if (withInterpretation.length <= 950) { // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Å–æ–≤–µ—Ç–∞
          caption = withInterpretation;
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç –µ—Å–ª–∏ –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è
      if (advice) {
        const withAdvice = caption + `\n\n‚ú® <i>–°–æ–≤–µ—Ç –¥–Ω—è:</i> ${advice}`;
        if (withAdvice.length <= 1020) {
          caption = withAdvice;
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –±–µ–∑
      if (cardImage && cardImage.imageData) {
        try {
          const imageBuffer = Buffer.from(cardImage.imageData, 'base64');
          await bot.sendPhoto(msg.chat.id, imageBuffer, {
            caption: caption,
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîÆ –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ', callback_data: 'daily_details' }],
                [{ text: 'üÉè –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'new_reading' }]
              ]
            }
          }, {
            filename: `daily_card_${cardWithState.name.replace(/\s+/g, '_')}.png`,
            contentType: 'image/png'
          });
        } catch (photoError) {
          console.log('Failed to send daily card photo:', photoError.message);
          // Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
          await bot.sendMessage(msg.chat.id, caption, {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîÆ –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ', callback_data: 'daily_details' }],
                [{ text: 'üÉè –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'new_reading' }]
              ]
            }
          });
        }
      } else {
        await bot.sendMessage(msg.chat.id, caption, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÆ –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ', callback_data: 'daily_details' }],
              [{ text: 'üÉè –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'new_reading' }]
            ]
          }
        });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –¥–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      try {
        const dailyCardData = {
          userId: user.id,
          type: 'daily_card',
          spreadName: '–ö–∞—Ä—Ç–∞ –¥–Ω—è',
          cards: [cardWithState],
          question: '–ö–∞—Ä—Ç–∞ –¥–Ω—è',
          interpretation: interpretationText
        };
        
        await database.createReading(dailyCardData);
      } catch (error) {
        console.log('Failed to save daily card to database:', error.message);
      }

      await database.trackEvent({
        type: 'command_daily',
        userId: user.id
      });

    } catch (error) {
      console.error('Error in /daily command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /lunar
   */
  async handleLunarCommand(bot, msg) {
    try {
      const user = await this.ensureUser(msg.from);

      await bot.sendChatAction(msg.chat.id, 'typing');

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –ª—É–Ω—ã
      const moonPhase = this.getCurrentMoonPhase();
      
      // –ü–æ–ª—É—á–∞–µ–º AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ª—É–Ω–Ω–æ–π —Ñ–∞–∑—ã
      let lunarRecommendations = null;
      try {
        await bot.sendChatAction(msg.chat.id, 'typing');
        
        const aiResponse = await this.getLunarRecommendations(moonPhase, user);
        lunarRecommendations = aiResponse;
        console.log('Lunar AI recommendations received:', JSON.stringify(aiResponse, null, 2));
      } catch (error) {
        console.log('Lunar AI recommendations failed:', error.message);
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      let recommendationsText;
      let practices;
      let avoid;
      
      if (lunarRecommendations && lunarRecommendations.success) {
        recommendationsText = lunarRecommendations.interpretation.interpretation || lunarRecommendations.interpretation.main;
        practices = lunarRecommendations.interpretation.practices || ['–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è', '–†–∞–±–æ—Ç–∞ —Å –∏–Ω—Ç—É–∏—Ü–∏–µ–π'];
        avoid = lunarRecommendations.interpretation.avoid || ['–ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ —Å–ø–æ—Ä–æ–≤', '–ü–æ—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π'];
      } else {
        // Fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendationsText = this.getBasicLunarRecommendation(moonPhase);
        practices = this.getBasicLunarPractices(moonPhase);
        avoid = this.getBasicLunarAvoid(moonPhase);
      }

      const practicesText = Array.isArray(practices) ? practices.map(p => `‚Ä¢ ${p}`).join('\n') : `‚Ä¢ ${practices}`;
      const avoidText = Array.isArray(avoid) ? avoid.map(a => `‚Ä¢ ${a}`).join('\n') : `‚Ä¢ ${avoid}`;

      const text = `üåô <b>–õ—É–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n\n<b>${moonPhase.emoji} ${moonPhase.name}</b>\n\n${recommendationsText}\n\n<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</b>\n${practicesText}\n\n<b>–ò–∑–±–µ–≥–∞–π—Ç–µ:</b>\n${avoidText}`;

      await bot.sendMessage(msg.chat.id, text, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìÖ –ü–æ–ª–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data: 'lunar_calendar' }],
            [{ text: 'üîÆ –ì–∞–¥–∞–Ω–∏–µ –ø–æ —Ñ–∞–∑–µ', callback_data: 'lunar_reading' }]
          ]
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É–Ω–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
      try {
        const lunarData = {
          userId: user.id,
          type: 'lunar_calendar',
          spreadName: '–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å',
          cards: [{ 
            name: `–õ—É–Ω–∞ –≤ —Ñ–∞–∑–µ "${moonPhase.name}"`, 
            description: moonPhase.description 
          }],
          positions: [{ 
            name: '–õ—É–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è', 
            description: `–í–ª–∏—è–Ω–∏–µ —Ñ–∞–∑—ã ${moonPhase.name}` 
          }],
          question: '–õ—É–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
          interpretation: recommendationsText,
          metadata: {
            moonPhase: moonPhase.name,
            date: new Date().toISOString()
          }
        };
        
        await database.createReading(lunarData);
      } catch (error) {
        console.log('Failed to save lunar reading to database:', error.message);
      }

      await database.trackEvent({
        type: 'command_lunar',
        userId: user.id,
        metadata: { moonPhase: moonPhase.name }
      });

    } catch (error) {
      console.error('Error in /lunar command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /premium
   */
  async handlePremiumCommand(bot, msg) {
    try {
      const user = await this.ensureUser(msg.from);
      const subscription = await database.getUserSubscription(user.id);

      let text;
      let keyboard;

      if (subscription && subscription.isActive) {
        text = `üíé *–í–∞—à Premium –∞–∫—Ç–∏–≤–µ–Ω!*\n\n–ü–ª–∞–Ω: ${subscription.planName}\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(subscription.endDate).toLocaleDateString('ru-RU')}\n\n‚ú® –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ MISTIKA Premium!`;
        
        keyboard = {
          inline_keyboard: [
            [{ text: 'üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'extend_premium' }],
            [{ text: 'üí≥ –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω', callback_data: 'change_plan' }],
            [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'premium_stats' }]
          ]
        };
      } else {
        const messages = config.getMessages();
        text = `üíé *MISTIKA Premium*\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∏—Ä–∞:\n\n‚ú® **–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ Premium:**\n‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è (–≤–º–µ—Å—Ç–æ 3 –≤ –¥–µ–Ω—å)\n‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ\n‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –≥–∞–¥–∞–Ω–∏–π\n‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\nüéØ **–ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:**\n‚Ä¢ –ú–µ—Å—è—Ü: 299‚ÇΩ\n‚Ä¢ 3 –º–µ—Å—è—Ü–∞: 799‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 33%)\n‚Ä¢ –ì–æ–¥: 2999‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 50%)\n\nüéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 7 –¥–Ω–µ–π!`;
        
        keyboard = config.getKeyboards().premium;
      }

      await bot.sendMessage(msg.chat.id, text, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });

      await database.trackEvent({
        type: 'command_premium',
        userId: user.id,
        metadata: { hasActiveSubscription: !!(subscription && subscription.isActive) }
      });

    } catch (error) {
      console.error('Error in /premium command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries
   */
  async handleCallbackQuery(bot, query) {
    try {
      const { data, message, from } = query;
      const chatId = message.chat.id;
      const messageId = message.message_id;

      console.log('Processing callback query:', { data, userId: from.id });

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback query —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å timeout
      try {
        await bot.answerCallbackQuery(query.id, {
          text: '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...'
        });
      } catch (err) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (query is too old)
        if (!err.message.includes('query is too old') && !err.message.includes('query ID is invalid')) {
          console.error('Error answering callback query:', err.message);
        }
      }

      // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É callback data
      if (data.startsWith('reading_')) {
        await this.handleReadingCallback(bot, chatId, messageId, data, from);
      } else if (data.startsWith('premium_')) {
        await this.handlePremiumCallback(bot, chatId, messageId, data, from);
      } else if (data.startsWith('daily_')) {
        await this.handleDailyCallback(bot, chatId, messageId, data, from);
      } else if (data.startsWith('lunar_')) {
        await this.handleLunarCallback(bot, chatId, messageId, data, from);
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö callback
        await this.handleGeneralCallback(bot, chatId, messageId, data, from);
      }

    } catch (error) {
      console.error('Error in callback query:', error);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è
      try {
        await bot.answerCallbackQuery(query.id, {
          text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          show_alert: true
        });
      } catch (answerError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å—Ç–∞—Ä—ã–µ query
        if (!answerError.message.includes('query is too old') && !answerError.message.includes('query ID is invalid')) {
          console.error('Error answering callback query in error handler:', answerError.message);
        }
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async handleTextMessage(bot, msg) {
    try {
      const text = msg.text;
      const chatId = msg.chat.id;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
      switch (text) {
        case 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ':
          // –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          this.pendingNumerology?.delete(chatId);
          await this.handleReadingCommand(bot, msg);
          break;
        case 'üÉè –î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞':
        case 'üìÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è':
          // –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          this.pendingNumerology?.delete(chatId);
          await this.handleDailyCommand(bot, msg);
          break;
        case 'üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å':
          // –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          this.pendingNumerology?.delete(chatId);
          await this.handleLunarCommand(bot, msg);
          break;
        case 'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è':
          // –ù–ï –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–µ–π
          await this.handleNumerologyCommand(bot, msg);
          break;
        case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
          // –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          this.pendingNumerology?.delete(chatId);
          await this.handleProfileCommand(bot, msg);
          break;
        case 'üíé –ü—Ä–µ–º–∏—É–º':
          // –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          this.pendingNumerology?.delete(chatId);
          await this.handlePremiumCommand(bot, msg);
          break;
        case 'üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ':
          // –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          this.pendingNumerology?.delete(chatId);
          await this.handleAppCommand(bot, msg);
          break;
        case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
          // –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          this.pendingNumerology?.delete(chatId);
          await this.handleSettingsCommand(bot, msg);
          break;
        case '‚ùì –ü–æ–º–æ—â—å':
          // –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          this.pendingNumerology?.delete(chatId);
          await this.handleHelpCommand(bot, msg);
          break;
        default:
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
          if (this.numerologyHandler.userSessions.has(chatId)) {
            await this.numerologyHandler.handleTextInput({
              message: { text },
              from: { id: msg.from.id },
              reply: (text, options) => bot.sendMessage(chatId, text, options)
            });
            return;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          if (this.pendingNumerology && this.pendingNumerology.has(chatId)) {
            const session = this.pendingNumerology.get(chatId);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10 –º–∏–Ω—É—Ç)
            if (session && (Date.now() - session.timestamp) < 10 * 60 * 1000) {
              await this.handleNumerologyInput(bot, msg);
              return;
            } else {
              // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é —Å–µ—Å—Å–∏—é
              this.pendingNumerology.delete(chatId);
            }
          }
          
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≥–∞–¥–∞–Ω–∏—è
          await this.handleQuestionText(bot, msg);
      }

    } catch (error) {
      console.error('Error in text message:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≥–∞–¥–∞–Ω–∏—è
   */
  async handleQuestionText(bot, msg) {
    const chatId = msg.chat.id;
    const question = msg.text;

    if (question.length < 5) {
      await bot.sendMessage(chatId, 'ü§î –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).');
      return;
    }

    if (question.length > 500) {
      await bot.sendMessage(chatId, 'üìù –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // Map —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ constructor
    const questionId = Date.now().toString(); // –ü—Ä–æ—Å—Ç–æ–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
    this.pendingQuestions.set(chatId, {
      questionId,
      question,
      timestamp: Date.now()
    });

    await bot.sendMessage(chatId, `‚ú® –û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å!\n\n"${question}"\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ –¥–ª—è –≥–∞–¥–∞–Ω–∏—è:`, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üÉè –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞', callback_data: `reading_single_q_${questionId}` },
            { text: 'üÉèüÉèüÉè –¢—Ä–∏ –∫–∞—Ä—Ç—ã', callback_data: `reading_three_q_${questionId}` }
          ],
          [{ text: 'üåü –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç', callback_data: `reading_celtic_q_${questionId}` }]
        ]
      }
    });
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
   */
  async showMainMenu(bot, chatId, messageId = null) {
    const menuText = `üîÆ *MISTIKA - –ú–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –¢–∞—Ä–æ*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –¥—Ä–µ–≤–Ω–µ–π –º—É–¥—Ä–æ—Å—Ç–∏! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:

üÉè *–ì–∞–¥–∞–Ω–∏—è –¢–∞—Ä–æ*
üåÖ *–ö–∞—Ä—Ç–∞ –¥–Ω—è*  
üåô *–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å*
üî¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è*
üë§ *–ü—Ä–æ—Ñ–∏–ª—å*`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üÉè –ì–∞–¥–∞–Ω–∏–µ –¢–∞—Ä–æ', callback_data: 'new_reading' },
          { text: 'üåÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è', callback_data: 'daily_card' }
        ],
        [
          { text: 'üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data: 'lunar_reading' },
          { text: 'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è', callback_data: 'numerology' }
        ],
        [
          { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }
        ]
      ]
    };

    if (messageId) {
      await bot.editMessageText(menuText, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } else {
      await bot.sendMessage(chatId, menuText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async ensureUser(telegramUser) {
    try {
      let userResponse = await database.getUserByTelegramId(telegramUser.id);
      let user = userResponse?.user;
      
      if (!user) {
        const userData = {
          telegramId: telegramUser.id,
          username: telegramUser.username || null,
          firstName: telegramUser.first_name || null,
          lastName: telegramUser.last_name || null,
          languageCode: telegramUser.language_code || 'ru'
        };

        const createdResponse = await database.createUser(userData);
        user = createdResponse.user || createdResponse;
      }

      return user;
    } catch (error) {
      console.error('Error ensuring user:', error.message);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
      return {
        id: telegramUser.id,
        telegramId: telegramUser.id,
        username: telegramUser.username,
        firstName: telegramUser.first_name,
        lastName: telegramUser.last_name,
        languageCode: telegramUser.language_code || 'ru',
        isPremium: false,
        subscriptionType: 'basic',
        totalReadings: 0,
        dailyReadingsUsed: 0,
        isActive: true
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   */
  async sendErrorMessage(bot, chatId) {
    const messages = config.getMessages();
    await bot.sendMessage(chatId, messages.errors.general, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'retry' }],
          [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
        ]
      }
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
   */
  async handleNumerologyCommand(bot, msg) {
    try {
      const user = await this.ensureUser(msg.from);

      await bot.sendChatAction(msg.chat.id, 'typing');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
      await this.numerologyHandler.handleNumerologyMenu({
        editMessageText: (text, options) => bot.sendMessage(msg.chat.id, text, options),
        reply: (text, options) => bot.sendMessage(msg.chat.id, text, options),
        callbackQuery: false,
        from: { id: msg.from.id }
      });

      await database.trackEvent({
        type: 'command_numerology',
        userId: user.id
      });

    } catch (error) {
      console.error('Error in /numerology command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  async handleProfileCommand(bot, msg) {
    try {
      const user = await this.ensureUser(msg.from);
      
      const profileText = `üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n` +
        `<b>–ò–º—è:</b> ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
        `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `<b>–°—Ç–∞—Ç—É—Å:</b> ${user.isPremium ? 'üíé Premium' : 'üÜì –ë–∞–∑–æ–≤—ã–π'}\n` +
        `<b>–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:</b> ${user.subscriptionType || 'basic'}\n` +
        `<b>–í—Å–µ–≥–æ –≥–∞–¥–∞–Ω–∏–π:</b> ${user.totalReadings || 0}\n` +
        `<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è:</b> ${user.dailyReadingsUsed || 0}\n` +
        `<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> ${new Date(user.createdAt || Date.now()).toLocaleDateString('ru-RU')}\n`;

      await bot.sendMessage(msg.chat.id, profileText, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'profile_stats' }],
            [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
          ]
        }
      });

    } catch (error) {
      console.error('Error in profile command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  async handleHistoryCommand(bot, msg) {
    await bot.sendMessage(msg.chat.id, 'üìã –ò—Å—Ç–æ—Ä–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
  }

  async handleSettingsCommand(bot, msg) {
    try {
      const user = await this.ensureUser(msg.from);
      
      const settingsText = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:`;
      
      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'settings_notifications' },
            { text: 'üé® –¢–µ–º–∞', callback_data: 'settings_theme' }
          ],
          [
            { text: 'üåê –Ø–∑—ã–∫', callback_data: 'settings_language' },
            { text: 'üîÆ –ö–æ–ª–æ–¥–∞', callback_data: 'settings_deck' }
          ],
          [
            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }
          ]
        ]
      };

      await bot.sendMessage(msg.chat.id, settingsText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('Error in settings command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }

  async handleReadingCallback(bot, chatId, messageId, data, from) {
    try {
      const user = await this.ensureUser(from);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥–∞–¥–∞–Ω–∏—è –∏–∑ callback data
      let readingType, userQuestion = null;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ callback data ID –≤–æ–ø—Ä–æ—Å–∞
      if (data.includes('_q_')) {
        const parts = data.split('_q_');
        readingType = parts[0].replace('reading_', '');
        const questionId = parts[1];
        
        // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –ø–∞–º—è—Ç–∏
        const questionData = this.pendingQuestions?.get(chatId);
        if (questionData && questionData.questionId === questionId) {
          userQuestion = questionData.question;
          console.log('User question retrieved:', userQuestion);
          // –û—á–∏—â–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          this.pendingQuestions.delete(chatId);
        } else {
          console.log('Question not found in memory for ID:', questionId);
        }
      } else {
        readingType = data.replace('reading_', '');
      }

      // –ù–∞—á–∏–Ω–∞–µ–º —Ä–∏—Ç—É–∞–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      await this.conductTarotRitual(bot, chatId, messageId, readingType, userQuestion, user);

    } catch (error) {
      console.error('Error in reading callback:', error);
      await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        chat_id: chatId,
        message_id: messageId
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∏—Ç—É–∞–ª–∞ –≥–∞–¥–∞–Ω–∏—è –¢–∞—Ä–æ
   */
  async conductTarotRitual(bot, chatId, messageId, readingType, userQuestion, user) {
    try {
      // –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
      await bot.editMessageText('üîÆ *–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≥–∞–¥–∞–Ω–∏—é*\n\nüïØÔ∏è –ó–∞–∂–∏–≥–∞—é —Å–≤–µ—á–∏...\nüåü –û—á–∏—â–∞—é —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ...\nüìø –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Å—å –Ω–∞ –≤–∞—à—É —ç–Ω–µ—Ä–≥–∏—é...', {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown'
      });

      await new Promise(resolve => setTimeout(resolve, 2000));

      // –≠—Ç–∞–ø 2: –ü—Ä–∏–∑—ã–≤ –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–∏–µ
      let focusText = 'üåô *–ü—Ä–∏–∑—ã–≤–∞—é –º—É–¥—Ä–æ—Å—Ç—å –¥—Ä–µ–≤–Ω–∏—Ö*\n\n';
      if (userQuestion) {
        focusText += `üßò‚Äç‚ôÄÔ∏è –°–æ—Å—Ä–µ–¥–æ—Ç–∞—á–∏–≤–∞–µ–º—Å—è –Ω–∞ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ:\n"${userQuestion}"\n\n`;
      }
      focusText += 'üîÆ –ü—Ä–æ—à—É –¥—É—Ö–æ–≤ –∫–∞—Ä—Ç –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–∏–Ω—É...';

      await bot.editMessageText(focusText, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown'
      });

      await new Promise(resolve => setTimeout(resolve, 1500));

      // –≠—Ç–∞–ø 3: –í—ã–±–æ—Ä –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞—Ä—Ç
      const { TAROT_CARDS, SPREAD_TYPES } = require('../data/tarot');
      const spread = SPREAD_TYPES[readingType] || SPREAD_TYPES.single;

      await bot.editMessageText(`üÉè *–¢–∞—Å—É—é –∫–æ–ª–æ–¥—É –∏–∑ ${78} –∫–∞—Ä—Ç –¢–∞—Ä–æ*\n\nüåÄ –ö–∞—Ä—Ç—ã –≤—ã–±–∏—Ä–∞—é—Ç —Å–µ–±—è —Å–∞–º–∏...\n‚ú® –≠–Ω–µ—Ä–≥–∏—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å...`, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown'
      });

      await new Promise(resolve => setTimeout(resolve, 2000));

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞—Ä—Ç
      const allCards = [
        ...TAROT_CARDS.major,
        ...TAROT_CARDS.minor.wands,
        ...TAROT_CARDS.minor.cups,
        ...TAROT_CARDS.minor.swords,
        ...TAROT_CARDS.minor.pentacles
      ];

      const shuffledCards = this.shuffleArray([...allCards]);
      const drawnCards = shuffledCards.slice(0, spread.maxCards);

      const cardsWithReverse = drawnCards.map((card, index) => ({
        ...card,
        reversed: Math.random() < 0.25, // 25% —à–∞–Ω—Å —Ä–µ–≤–µ—Ä—Å–∞
        position: spread.positions[index]?.name || `–ü–æ–∑–∏—Ü–∏—è ${index + 1}`,
        positionDescription: spread.positions[index]?.description || '–í–∞–∂–Ω—ã–π –∞—Å–ø–µ–∫—Ç —Å–∏—Ç—É–∞—Ü–∏–∏'
      }));

      // –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –∫–∞—Ä—Ç
      await bot.editMessageText(`üé® *–°–æ–∑–¥–∞—é –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–∑—ã*\n\n${spread.name}\n\nüñºÔ∏è –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑—É—é —ç–Ω–µ—Ä–≥–∏–∏ –∫–∞—Ä—Ç –≤ –æ–±—Ä–∞–∑—ã...\n‚ö° –ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ—Å–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–∏–±—Ä–∞—Ü–∏—é...`, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown'
      });

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      let cardImages = [];
      try {
        const imageResponse = await Promise.race([
          database.generateSpreadImages(cardsWithReverse, readingType),
          new Promise((_, reject) => setTimeout(() => reject(new Error('Image generation timeout')), 180000))
        ]);
        
        if (imageResponse && imageResponse.success) {
          cardImages = imageResponse.results.filter(r => r.success);
          console.log(`Generated ${cardImages.length} card images successfully`);
        }
      } catch (error) {
        console.log('Card image generation failed:', error.message);
      }

      // –≠—Ç–∞–ø 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –º—É–¥—Ä–æ—Å—Ç–∏
      await bot.editMessageText(`üîÆ *–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –≤—ã—Å—à–∏–º–∏ —Å–∏–ª–∞–º–∏*\n\nüåå –°–æ–µ–¥–∏–Ω—è—é—Å—å —Å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º —Å–æ–∑–Ω–∞–Ω–∏–µ–º...\nüìú –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—é –ø–æ—Å–ª–∞–Ω–∏—è –∫–∞—Ä—Ç...\nüí´ –ü–µ—Ä–µ–≤–æ–∂—É —Å–∏–º–≤–æ–ª—ã –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫...`, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown'
      });

      // –ü–æ–ª—É—á–∞–µ–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
      let aiInterpretation = null;
      try {
        const aiResponse = await this.getAIInterpretationWithQuestion(cardsWithReverse, spread, user, userQuestion);
        aiInterpretation = aiResponse;
        console.log('AI interpretation received successfully');
      } catch (error) {
        console.log('AI interpretation failed:', error.message);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.saveReadingToDatabase(cardsWithReverse, spread, readingType, userQuestion, user, aiInterpretation);

      // –≠—Ç–∞–ø 6: –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç
      await this.startCardRevelation(bot, chatId, messageId, cardsWithReverse, cardImages, spread, aiInterpretation, userQuestion);

    } catch (error) {
      console.error('Error in tarot ritual:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—á–∞–ª–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
   */
  async startCardRevelation(bot, chatId, messageId, cards, cardImages, spread, aiInterpretation, userQuestion) {
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
    await bot.deleteMessage(chatId, messageId).catch(() => {});

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å–∫–ª–∞–¥–∞
    let headerText = `üîÆ *${spread.name}*\n\n`;
    if (userQuestion) {
      headerText += `‚ùì *–í–∞—à –≤–æ–ø—Ä–æ—Å:* "${userQuestion}"\n\n`;
    }
    headerText += `‚ú® –ö–∞—Ä—Ç—ã –≤—ã–±—Ä–∞–Ω—ã. –¢–µ–ø–µ—Ä—å —Ä–∞—Å–∫—Ä–æ–µ–º –∏—Ö —Ç–∞–π–Ω—ã...\n\n`;
    headerText += `üé≠ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ—ë –ø–æ—Å–ª–∞–Ω–∏–µ`;

    await bot.sendMessage(chatId, headerText, { parse_mode: 'Markdown' });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    // Map —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ constructor
    this.pendingReadings.set(chatId, {
      cards,
      cardImages: cardImages.filter(img => img && img.success && img.imageData && !img.isMock),
      spread,
      aiInterpretation,
      userQuestion,
      revealedCards: new Set(),
      currentStep: 'revelation',
      controlMessageId: null
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    await this.sendMysticalSpreadLayout(bot, chatId, cards, spread);
  }

  async handlePremiumCallback(bot, chatId, messageId, data, from) {
    try {
      switch (data) {
          
        case 'extend_premium':
          await bot.editMessageText('üíé *–ü—Ä–æ–¥–ª–µ–Ω–∏–µ Premium*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: '1 –º–µ—Å—è—Ü - 299‚ÇΩ', callback_data: 'premium_plan_month' }],
                [{ text: '3 –º–µ—Å—è—Ü–∞ - 799‚ÇΩ (-33%)', callback_data: 'premium_plan_3month' }],
                [{ text: '1 –≥–æ–¥ - 2999‚ÇΩ (-50%)', callback_data: 'premium_plan_year' }],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'premium' }]
              ]
            }
          });
          break;
          
        case 'premium_stats':
          await bot.editMessageText('üìä *Premium —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'premium' }]
              ]
            }
          });
          break;
          
        case 'premium_plan_month':
        case 'premium_plan_3month':
        case 'premium_plan_year':
          await bot.editMessageText('üí≥ *–û–ø–ª–∞—Ç–∞ Premium*\n\n–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º', callback_data: 'extend_premium' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
              ]
            }
          });
          break;
          
        default:
          await bot.editMessageText('üíé –û–±—Ä–∞–±–æ—Ç–∫–∞ Premium...', {
            chat_id: chatId,
            message_id: messageId
          });
      }
    } catch (error) {
      console.error('Error in premium callback:', error);
      await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Premium. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'premium' }],
            [{ text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });
    }
  }

  async handleDailyCallback(bot, chatId, messageId, data, from) {
    try {
      switch (data) {
        case 'daily_details':
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–∞–∫ –∫–∞–∫ –∏—Å—Ö–æ–¥–Ω–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º)
          await bot.sendMessage(chatId, 'üîÆ *–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è*\n\n–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é...', {
            parse_mode: 'Markdown'
          });
          
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –∫–∞—Ä—Ç—ã –¥–Ω—è
          await this.handleDailyCommand(bot, { chat: { id: chatId }, from });
          break;
          
        default:
          await bot.editMessageText('üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã –¥–Ω—è...', {
            chat_id: chatId,
            message_id: messageId
          });
          
          await this.handleDailyCommand(bot, { chat: { id: chatId }, from });
      }
    } catch (error) {
      console.error('Error in daily callback:', error);
      await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'daily_card' }],
            [{ text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });
    }
  }

  async handleLunarCallback(bot, chatId, messageId, data, from) {
    try {
      switch (data) {
        case 'lunar_calendar':
          await bot.editMessageText('üåô *–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å*\n\n–ó–∞–≥—Ä—É–∂–∞—é –ø–æ–ª–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ñ–∞–∑ –ª—É–Ω—ã...', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
          });
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ñ–∞–∑ –ª—É–Ω—ã
          await this.showLunarCalendar(bot, chatId, messageId);
          break;
          
        case 'lunar_reading':
          await bot.editMessageText('üåô *–õ—É–Ω–Ω–æ–µ –≥–∞–¥–∞–Ω–∏–µ*\n\n–ü—Ä–æ–≤–µ–¥—É –≥–∞–¥–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ –ª—É–Ω—ã...', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
          });
          
          await this.handleLunarCommand(bot, { chat: { id: chatId }, from });
          break;
          
        default:
          await this.handleLunarCommand(bot, { chat: { id: chatId }, from });
      }
    } catch (error) {
      console.error('Error in lunar callback:', error);
      await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª—É–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'lunar_reading' }],
            [{ text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });
    }
  }

  async handleGeneralCallback(bot, chatId, messageId, data, from) {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç
      if (data.startsWith('reveal_card_')) {
        const cardIndex = parseInt(data.replace('reveal_card_', ''));
        await this.handleCardReveal(bot, chatId, messageId, cardIndex, from);
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É
      if (data.startsWith('card_revealed_')) {
        const cardIndex = parseInt(data.replace('card_revealed_', ''));
        await this.handleRevealedCardTouch(bot, chatId, messageId, cardIndex, from);
        return;
      }

      if (data === 'reveal_all_cards') {
        await this.handleRevealAllCards(bot, chatId, messageId, from);
        return;
      }

      if (data === 'show_interpretation' || data === 'show_full_interpretation') {
        await this.handleShowFullInterpretation(bot, chatId, messageId, from);
        return;
      }

      switch (data) {
        case 'new_reading':
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≥–∞–¥–∞–Ω–∏—è
          await bot.editMessageText('üîÆ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:\n\nüí° *–°–æ–≤–µ—Ç:* –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∞ –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥.', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'üÉè –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞', callback_data: 'reading_single' },
                  { text: 'üÉèüÉèüÉè –¢—Ä–∏ –∫–∞—Ä—Ç—ã', callback_data: 'reading_three' }
                ],
                [
                  { text: 'üåü –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç', callback_data: 'reading_celtic' },
                  { text: 'üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è', callback_data: 'reading_relationship' }
                ],
                [{ text: '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–Ω–∞—á–∞–ª–∞', callback_data: 'ask_question_first' }]
              ]
            }
          });
          break;

        case 'ask_question_first':
          await bot.editMessageText('‚ùì *–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å*\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –∫–∞—Ä—Ç –¢–∞—Ä–æ.\n\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞.', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–∞—Å–∫–ª–∞–¥–∞', callback_data: 'new_reading' }]
              ]
            }
          });
          break;

        case 'reading_history':
          await bot.editMessageText('üìã –ò—Å—Ç–æ—Ä–∏—è –≥–∞–¥–∞–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'new_reading' }]
              ]
            }
          });
          break;

        case 'profile_stats':
          await bot.editMessageText('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', callback_data: 'back_to_profile' }]
              ]
            }
          });
          break;


        case 'back_to_spread':
          await bot.editMessageText('üîÆ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ —Ä–∞—Å–∫–ª–∞–¥—É...', {
            chat_id: chatId,
            message_id: messageId
          });
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–∞—Å–∫–ª–∞–¥—É
          break;

        case 'daily_card':
          // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          this.pendingNumerology?.delete(chatId);
          await this.handleDailyCommand(bot, { chat: { id: chatId }, from });
          break;

        case 'back_to_menu':
          // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          this.pendingNumerology?.delete(chatId);
          await this.showMainMenu(bot, chatId, messageId);
          break;

        case 'back_to_profile':
          // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          this.pendingNumerology?.delete(chatId);
          await this.handleProfileCommand(bot, { chat: { id: chatId }, from });
          break;

        case 'retry':
          await bot.editMessageText('üîÑ *–ü–æ–≤—Ç–æ—Ä—è—é –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ...*', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
          });
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
          setTimeout(() => {
            this.showMainMenu(bot, chatId, messageId);
          }, 1000);
          break;


        case 'profile':
          // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
          this.pendingNumerology?.delete(chatId);
          await this.handleProfileCommand(bot, { chat: { id: chatId }, from });
          break;

        case 'numerology':
        case 'numerology_menu':
          await this.numerologyHandler.handleNumerologyMenu({
            editMessageText: (text, options) => bot.editMessageText(text, { ...options, chat_id: chatId, message_id: messageId }),
            reply: (text, options) => bot.sendMessage(chatId, text, options),
            callbackQuery: true,
            from: { id: from.id }
          });
          break;

        case 'numerology_create_profile':
        case 'numerology_calculate':
          await this.numerologyHandler.handleCalculateStart({
            editMessageText: (text, options) => bot.editMessageText(text, { ...options, chat_id: chatId, message_id: messageId }),
            reply: (text, options) => bot.sendMessage(chatId, text, options),
            from: { id: from.id }
          });
          break;

        case 'numerology_my_profile':
          await this.handleMyNumerologyProfile(bot, chatId, messageId, from);
          break;

        case 'numerology_personal_reading':
          await bot.editMessageText('üîÆ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –≥–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...', { chat_id: chatId, message_id: messageId });
          break;

        case 'numerology_compatibility':
          await this.handleNumerologyCompatibility(bot, chatId, messageId, from);
          break;

        case 'numerology_name':
          await this.handleNumerologyNameAnalysis(bot, chatId, messageId, from);
          break;

        case 'numerology_forecast':
        case 'numerology_year':
          await this.handleNumerologyForecast(bot, chatId, messageId, from);
          break;

        case 'numerology_cancel':
          // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
          this.pendingNumerology?.delete(chatId);
          await this.handleNumerologyMenu(bot, chatId, messageId, from);
          break;

        case 'numerology_detailed':
          await this.numerologyHandler.handleDetailedAnalysis({
            editMessageText: (text, options) => bot.editMessageText(text, { ...options, chat_id: chatId, message_id: messageId }),
            reply: (text, options) => bot.sendMessage(chatId, text, options),
            from: { id: from.id }
          });
          break;

        case 'numerology_compatibility':
          await this.numerologyHandler.handleCompatibility({
            editMessageText: (text, options) => bot.editMessageText(text, { ...options, chat_id: chatId, message_id: messageId }),
            reply: (text, options) => bot.sendMessage(chatId, text, options),
            from: { id: from.id }
          });
          break;

        case 'numerology_forecast':
          await this.numerologyHandler.handleForecast({
            editMessageText: (text, options) => bot.editMessageText(text, { ...options, chat_id: chatId, message_id: messageId }),
            reply: (text, options) => bot.sendMessage(chatId, text, options),
            from: { id: from.id }
          });
          break;

        case 'numerology_name':
          await this.numerologyHandler.handleNameAnalysis({
            editMessageText: (text, options) => bot.editMessageText(text, { ...options, chat_id: chatId, message_id: messageId }),
            reply: (text, options) => bot.sendMessage(chatId, text, options),
            from: { id: from.id }
          });
          break;

        case 'numerology_year':
          await this.numerologyHandler.handlePersonalYear({
            editMessageText: (text, options) => bot.editMessageText(text, { ...options, chat_id: chatId, message_id: messageId }),
            reply: (text, options) => bot.sendMessage(chatId, text, options),
            from: { id: from.id }
          });
          break;

        case 'numerology_profile':
          // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
          const userProfile = this.userProfiles.get(chatId);
          if (!userProfile || !userProfile.profile) {
            await bot.editMessageText('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å–Ω–∞—á–∞–ª–∞.', {
              chat_id: chatId,
              message_id: messageId,
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üî¢ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'numerology_calculate' }],
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
                ]
              }
            });
          } else {
            const profile = userProfile.profile;
            let message = `üë§ *–í–∞—à –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å*\n\n`;
            message += `üìõ *–ò–º—è:* ${userProfile.fullName}\n`;
            message += `üìÖ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${userProfile.birthDate.toLocaleDateString('ru-RU')}\n\n`;
            message += `üõ§ *–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å:* ${profile.lifePath.number}\n`;
            message += `‚≠ê *–°—É–¥—å–±–∞:* ${profile.destiny.number}\n`;
            message += `üí´ *–î—É—à–∞:* ${profile.soul.number}\n`;
            message += `üë§ *–õ–∏—á–Ω–æ—Å—Ç—å:* ${profile.personality.number}\n`;

            await bot.editMessageText(message, {
              chat_id: chatId,
              message_id: messageId,
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑', callback_data: 'numerology_detailed' }],
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
                ]
              }
            });
          }
          break;

        case 'help':
          await this.handleHelpCommand(bot, { chat: { id: chatId }, from });
          break;

        case 'settings':
        case 'settings_notifications':
        case 'settings_theme':
        case 'settings_language':
        case 'settings_deck':
          await this.handleSettingsCommand(bot, { chat: { id: chatId }, from });
          break;

        default:
          await bot.editMessageText('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...', {
            chat_id: chatId,
            message_id: messageId
          });
          break;
      }
    } catch (error) {
      console.error('Error in general callback:', error);
      await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        chat_id: chatId,
        message_id: messageId
      });
    }
  }

  async handlePhotoMessage(bot, msg) {
    await bot.sendMessage(msg.chat.id, 'üì∑ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
  }

  async handleVoiceMessage(bot, msg) {
    await bot.sendMessage(msg.chat.id, 'üé§ –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
  }

  async sendErrorMessage(bot, chatId, errorText = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.') {
    await bot.sendMessage(chatId, `‚ùå ${errorText}`);
  }

  /**
   * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ—Ç—Å–∞)
   */
  shuffleArray(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API —Å–µ—Ä–≤–µ—Ä–∞
   */
  async getAIInterpretation(cards, spread, user) {
    try {
      const response = await database.makeRequest('POST', '/ai/interpret', {
        cards: cards,
        spreadType: spread.id,
        positions: spread.positions,
        question: '–û–±—â–µ–µ –≥–∞–¥–∞–Ω–∏–µ',
        user: {
          id: user.id,
          language: user.languageCode || 'ru'
        }
      });

      return response;
    } catch (error) {
      console.error('Failed to get AI interpretation:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getAIInterpretationWithQuestion(cards, spread, user, userQuestion) {
    try {
      const question = userQuestion || '–û–±—â–µ–µ –≥–∞–¥–∞–Ω–∏–µ';
      
      const response = await database.makeRequest('POST', '/ai/interpret', {
        cards: cards,
        spreadType: spread.id,
        positions: spread.positions,
        question: question,
        user: {
          id: user.id,
          language: user.languageCode || 'ru'
        }
      });

      return response;
    } catch (error) {
      console.error('Failed to get AI interpretation with question:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—Ç—ã –¥–Ω—è
   */
  async getDailyCardInterpretation(card, user) {
    try {
      const response = await database.makeRequest('POST', '/ai/interpret', {
        cards: [card],
        spreadType: 'daily_card',
        positions: [{ name: '–ö–∞—Ä—Ç–∞ –¥–Ω—è', description: '–ì–ª–∞–≤–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –¥–Ω—è' }],
        question: '–ö–∞–∫—É—é —ç–Ω–µ—Ä–≥–∏—é –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω–µ—Å–µ—Ç —ç—Ç–æ—Ç –¥–µ–Ω—å?',
        user: {
          id: user.id,
          language: user.languageCode || 'ru'
        }
      });

      return response;
    } catch (error) {
      console.error('Failed to get daily card AI interpretation:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ª—É–Ω–Ω–æ–π —Ñ–∞–∑—ã
   */
  async getLunarRecommendations(moonPhase, user) {
    try {
      // –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É –¥–ª—è –ª—É–Ω–Ω–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è
      const lunarCard = {
        name: `–õ—É–Ω–∞ –≤ —Ñ–∞–∑–µ "${moonPhase.name}"`,
        description: moonPhase.description,
        type: 'lunar',
        phase: moonPhase.name
      };

      const response = await database.makeRequest('POST', '/ai/interpret', {
        cards: [lunarCard],
        spreadType: 'lunar_calendar',
        positions: [{ 
          name: '–õ—É–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è', 
          description: `–í–ª–∏—è–Ω–∏–µ —Ñ–∞–∑—ã ${moonPhase.name} –Ω–∞ –≤–∞—à—É –∂–∏–∑–Ω—å` 
        }],
        question: `–ö–∞–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Ñ–∞–∑—ã –ª—É–Ω—ã "${moonPhase.name}"? –ß—Ç–æ –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å –∏ —á–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥?`,
        user: {
          id: user.id,
          language: user.languageCode || 'ru'
        }
      });

      return response;
    } catch (error) {
      console.error('Failed to get lunar AI recommendations:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
   */
  async showLunarCalendar(bot, chatId, messageId) {
    const currentPhase = this.getCurrentMoonPhase();
    const today = new Date();
    
    // –†–∞—Å—á–µ—Ç —Ñ–∞–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
    const phases = [];
    for (let i = 0; i < 28; i += 7) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      const phaseIndex = Math.floor((date.getDate() - 1) / 7) % 4;
      const phaseNames = ['–ù–æ–≤–æ–ª—É–Ω–∏–µ', '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞', '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ', '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞'];
      const emojis = ['üåë', 'üåí', 'üåï', 'üåò'];
      
      phases.push({
        date: date.toLocaleDateString('ru-RU'),
        name: phaseNames[phaseIndex],
        emoji: emojis[phaseIndex]
      });
    }

    const calendarText = `üåô *–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å*

${currentPhase.emoji} *–¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞:* ${currentPhase.name}
${currentPhase.description}

üìÖ *–ë–ª–∏–∂–∞–π—à–∏–µ —Ñ–∞–∑—ã:*
${phases.map(phase => `${phase.emoji} ${phase.date} - ${phase.name}`).join('\n')}

üîÆ *–õ—É–Ω–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å:* –ö–∞–∂–¥–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã –Ω–µ—Å–µ—Ç –æ—Å–æ–±—É—é —ç–Ω–µ—Ä–≥–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–ª–∏—è–µ—Ç –Ω–∞ –Ω–∞—à–∏ —Ä–µ—à–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è.`;

    await bot.editMessageText(calendarText, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üåô –ü–æ–ª—É—á–∏—Ç—å –ª—É–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data: 'lunar_reading' }],
          [{ text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
        ]
      }
    });
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –ª—É–Ω—ã
   */
  getCurrentMoonPhase() {
    const today = new Date();
    const dayOfMonth = today.getDate();
    
    // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ —Ñ–∞–∑ –ª—É–Ω—ã (–∫–∞–∂–¥—ã–µ ~7 –¥–Ω–µ–π)
    const phaseIndex = Math.floor((dayOfMonth - 1) / 7) % 4;
    
    const phases = [
      { 
        name: '–ù–æ–≤–æ–ª—É–Ω–∏–µ', 
        emoji: 'üåë', 
        description: '–í—Ä–µ–º—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–µ–π' 
      },
      { 
        name: '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞', 
        emoji: 'üåí', 
        description: '–ü–µ—Ä–∏–æ–¥ —Ä–æ—Å—Ç–∞, —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏' 
      },
      { 
        name: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ', 
        emoji: 'üåï', 
        description: '–ü–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å' 
      },
      { 
        name: '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞', 
        emoji: 'üåò', 
        description: '–í—Ä–µ–º—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è, –æ—á–∏—â–µ–Ω–∏—è –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏' 
      }
    ];
    
    return phases[phaseIndex];
  }

  /**
   * –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–∞–∑—ã –ª—É–Ω—ã
   */
  getBasicLunarRecommendation(moonPhase) {
    const recommendations = {
      '–ù–æ–≤–æ–ª—É–Ω–∏–µ': '–ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö —Ü–µ–ª–µ–π –∏ –Ω–∞—á–∞–ª–∞ –≤–∞–∂–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –≠–Ω–µ—Ä–≥–∏—è –ª—É–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è.',
      '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞': '–ü–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è. –°–µ–π—á–∞—Å —Ö–æ—Ä–æ—à–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ–º –∏ –≤–æ–ø–ª–æ—â–∞—Ç—å –ø–ª–∞–Ω—ã –≤ –∂–∏–∑–Ω—å.',
      '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ': '–ü–∏–∫ –ª—É–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏. –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤, –≤—ã—Ä–∞–∂–µ–Ω–∏—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ç—É–∏—Ü–∏–µ–π.',
      '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞': '–ü–µ—Ä–∏–æ–¥ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–µ–Ω—É–∂–Ω–æ–≥–æ. –•–æ—Ä–æ—à–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –æ—á–∏—â–µ–Ω–∏–µ–º –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö.'
    };
    
    return recommendations[moonPhase.name] || '–ö–∞–∂–¥–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã –Ω–µ—Å–µ—Ç —Å–≤–æ—é –æ—Å–æ–±—É—é —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.';
  }

  /**
   * –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ñ–∞–∑—ã –ª—É–Ω—ã
   */
  getBasicLunarPractices(moonPhase) {
    const practices = {
      '–ù–æ–≤–æ–ª—É–Ω–∏–µ': ['–ú–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–∞ —Ü–µ–ª–∏', '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤', '–†–∞–±–æ—Ç–∞ —Å –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º–∏'],
      '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞': ['–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏', '–ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ', '–†–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤'],
      '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ': ['–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã', '–†–∞–±–æ—Ç–∞ —Å –∏–Ω—Ç—É–∏—Ü–∏–µ–π', '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–ª'],
      '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞': ['–û—á–∏—â–∞—é—â–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏', '–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ', '–†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ –∞–Ω–∞–ª–∏–∑']
    };
    
    return practices[moonPhase.name] || ['–ú–µ–¥–∏—Ç–∞—Ü–∏—è', '–†–∞–±–æ—Ç–∞ —Å —ç–Ω–µ—Ä–≥–∏–µ–π'];
  }

  /**
   * –ß—Ç–æ –∏–∑–±–µ–≥–∞—Ç—å –≤ —Ñ–∞–∑—É –ª—É–Ω—ã
   */
  getBasicLunarAvoid(moonPhase) {
    const avoid = {
      '–ù–æ–≤–æ–ª—É–Ω–∏–µ': ['–ó–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –¥–µ–ª', '–ü—Ä–∏–Ω—è—Ç–∏—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π'],
      '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞': ['–ü–∞—Å—Å–∏–≤–Ω–æ—Å—Ç–∏', '–û—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –¥–µ–ª'],
      '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ': ['–ù–∞—á–∞–ª–∞ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤', '–ü–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —ç–Ω–µ—Ä–≥–∏–µ–π'],
      '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞': ['–ù–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π', '–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –Ω–µ–≥–∞—Ç–∏–≤–∞']
    };
    
    return avoid[moonPhase.name] || ['–ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –º—ã—Å–ª–µ–π', '–ü–æ—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π'];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
   */
  async getNumerologyInterpretation(numerologyResult, user) {
    try {
      // –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
      const numerologyCards = [
        {
          name: `–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã ${numerologyResult.lifePathNumber}`,
          description: '–û—Å–Ω–æ–≤–Ω–æ–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ',
          type: 'numerology',
          number: numerologyResult.lifePathNumber
        },
        {
          name: `–ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏ ${numerologyResult.personalityNumber}`,
          description: '–ö–∞–∫ –≤–∞—Å –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é—Ç –æ–∫—Ä—É–∂–∞—é—â–∏–µ',
          type: 'numerology',
          number: numerologyResult.personalityNumber
        },
        {
          name: `–ß–∏—Å–ª–æ –¥—É—à–∏ ${numerologyResult.soulNumber}`,
          description: '–í–∞—à–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è',
          type: 'numerology',
          number: numerologyResult.soulNumber
        }
      ];

      const response = await database.makeRequest('POST', '/ai/interpret', {
        cards: numerologyCards,
        spreadType: 'numerology',
        positions: [
          { name: '–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã', description: '–û—Å–Ω–æ–≤–Ω–æ–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ' },
          { name: '–ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏', description: '–ö–∞–∫ –≤–∞—Å –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é—Ç –æ–∫—Ä—É–∂–∞—é—â–∏–µ' },
          { name: '–ß–∏—Å–ª–æ –¥—É—à–∏', description: '–í–∞—à–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è' }
        ],
        question: `–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ß–∏—Å–ª–æ —Å—É–¥—å–±—ã: ${numerologyResult.lifePathNumber}, –ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏: ${numerologyResult.personalityNumber}, –ß–∏—Å–ª–æ –¥—É—à–∏: ${numerologyResult.soulNumber}. –ö–∞–∫–∏–µ —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º –ø—É—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞?`,
        user: {
          id: user.id,
          language: user.languageCode || 'ru'
        }
      });

      return response;
    } catch (error) {
      console.error('Failed to get numerology AI interpretation:', error.message);
      throw error;
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª
   */
  calculateNumerology(birthDate) {
    const day = birthDate.getDate();
    const month = birthDate.getMonth() + 1;
    const year = birthDate.getFullYear();

    // –ß–∏—Å–ª–æ —Å—É–¥—å–±—ã (—Å—É–º–º–∞ –≤—Å–µ—Ö —Ü–∏—Ñ—Ä –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è)
    const lifePathNumber = this.reduceToSingleDigit(day + month + year);

    // –ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏ (–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è)
    const personalityNumber = this.reduceToSingleDigit(day);

    // –ß–∏—Å–ª–æ –¥—É—à–∏ (–º–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è)
    const soulNumber = this.reduceToSingleDigit(month);

    return {
      lifePathNumber,
      personalityNumber,
      soulNumber,
      birthDay: day,
      birthMonth: month,
      birthYear: year
    };
  }

  /**
   * –°–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∫ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–º—É
   */
  reduceToSingleDigit(number) {
    while (number > 9) {
      number = Math.floor(number / 10) + (number % 10);
    }
    return number;
  }

  /**
   * –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
   */
  getBasicNumerologyInterpretation(numerologyResult) {
    const lifePathMeanings = {
      1: '–õ–∏–¥–µ—Ä—Å—Ç–≤–æ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –Ω–æ–≤–∞—Ç–æ—Ä—Å—Ç–≤–æ. –í—ã –ø—Ä–∏—Ä–æ–∂–¥–µ–Ω–Ω—ã–π –ª–∏–¥–µ—Ä —Å —Å–∏–ª—å–Ω–æ–π –≤–æ–ª–µ–π.',
      2: '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, –¥–∏–ø–ª–æ–º–∞—Ç–∏—è, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –í—ã –º–∏—Ä–æ—Ç–≤–æ—Ä–µ—Ü –∏ –∫–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫.',
      3: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –æ–±—â–µ–Ω–∏–µ, –æ–ø—Ç–∏–º–∏–∑–º. –£ –≤–∞—Å —è—Ä–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.',
      4: '–ü—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å, —Ç—Ä—É–¥–æ–ª—é–±–∏–µ. –í—ã –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã.',
      5: '–°–≤–æ–±–æ–¥–∞, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, –ø–µ—Ä–µ–º–µ–Ω—ã. –í—ã –ª—é–±–∏—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∏ –Ω–æ–≤—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è.',
      6: '–ó–∞–±–æ—Ç–∞, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, —Å–µ–º—å—è. –í—ã –ø—Ä–∏—Ä–æ–∂–¥–µ–Ω–Ω—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫ –∏ –æ–ø–µ–∫—É–Ω.',
      7: '–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å, –∞–Ω–∞–ª–∏–∑, –º—É–¥—Ä–æ—Å—Ç—å. –í—ã –≥–ª—É–±–æ–∫–∏–π –º—ã—Å–ª–∏—Ç–µ–ª—å –∏ –∏—Å–∫–∞—Ç–µ–ª—å –∏—Å—Ç–∏–Ω—ã.',
      8: '–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π —É—Å–ø–µ—Ö, –≤–ª–∞—Å—Ç—å, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –£ –≤–∞—Å —Å–∏–ª—å–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.',
      9: '–ì—É–º–∞–Ω–∏–∑–º, —â–µ–¥—Ä–æ—Å—Ç—å, –º—É–¥—Ä–æ—Å—Ç—å. –í—ã —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –∏ –º–∏—Ä—É.'
    };

    const personalityMeanings = {
      1: '–£–≤–µ—Ä–µ–Ω–Ω–∞—è –∏ —Å–∏–ª—å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å',
      2: '–ú—è–≥–∫–∞—è –∏ –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω–∞—è –Ω–∞—Ç—É—Ä–∞',
      3: '–Ø—Ä–∫–∞—è –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å',
      4: '–ù–∞–¥–µ–∂–Ω–∞—è –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å',
      5: '–°–≤–æ–±–æ–¥–æ–ª—é–±–∏–≤–∞—è –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è –Ω–∞—Ç—É—Ä–∞',
      6: '–ó–∞–±–æ—Ç–ª–∏–≤–∞—è –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å',
      7: '–ì–ª—É–±–æ–∫–∞—è –∏ –º—É–¥—Ä–∞—è –Ω–∞—Ç—É—Ä–∞',
      8: '–ê–º–±–∏—Ü–∏–æ–∑–Ω–∞—è –∏ —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å',
      9: '–í–µ–ª–∏–∫–æ–¥—É—à–Ω–∞—è –∏ –º—É–¥—Ä–∞—è –Ω–∞—Ç—É—Ä–∞'
    };

    const interpretation = `–í–∞—à–µ —á–∏—Å–ª–æ —Å—É–¥—å–±—ã ${numerologyResult.lifePathNumber} –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ ${lifePathMeanings[numerologyResult.lifePathNumber] || '—É –≤–∞—Å –æ—Å–æ–±—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å'}. ` +
      `–ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏ ${numerologyResult.personalityNumber} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —É –≤–∞—Å ${personalityMeanings[numerologyResult.personalityNumber] || '—É–Ω–∏–∫–∞–ª—å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å'}.`;

    return interpretation;
  }

  /**
   * –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
   */
  getBasicNumerologyRecommendations(numerologyResult) {
    const recommendations = {
      1: '–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞, –Ω–µ –±–æ–π—Ç–µ—Å—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –∏ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.',
      2: '–†–∞–±–æ—Ç–∞–π—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ, —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ —ç–º–ø–∞—Ç–∏—é.',
      3: '–í—ã—Ä–∞–∂–∞–π—Ç–µ —Å–≤–æ—é —Ç–≤–æ—Ä—á–µ—Å–∫—É—é –Ω–∞—Ç—É—Ä—É, –æ–±—â–∞–π—Ç–µ—Å—å –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π—Ç–µ –¥—Ä—É–≥–∏—Ö.',
      4: '–ë—É–¥—å—Ç–µ –º–µ—Ç–æ–¥–∏—á–Ω—ã –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã, —Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—á–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –¥–ª—è –±—É–¥—É—â–µ–≥–æ.',
      5: '–ù–µ –±–æ–π—Ç–µ—Å—å –ø–µ—Ä–µ–º–µ–Ω, –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–π—Ç–µ –∏ –∏–∑—É—á–∞–π—Ç–µ –Ω–æ–≤–æ–µ.',
      6: '–ó–∞–±–æ—Ç—å—Ç–µ—Å—å –æ –±–ª–∏–∑–∫–∏—Ö, —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –≥–∞—Ä–º–æ–Ω–∏—é –≤ —Å–µ–º—å–µ –∏ –æ–±—â–µ—Å—Ç–≤–µ.',
      7: '–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å, –º–µ–¥–∏—Ç–∏—Ä—É–π—Ç–µ –∏ –∏—â–∏—Ç–µ –≥–ª—É–±–∏–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è.',
      8: '–°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–º—É —É—Å–ø–µ—Ö—É, —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ –±–∏–∑–Ω–µ—Å-–Ω–∞–≤—ã–∫–∏.',
      9: '–ü–æ–º–æ–≥–∞–π—Ç–µ –ª—é–¥—è–º, –∑–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ –¥–µ–ª–∏—Ç–µ—Å—å –º—É–¥—Ä–æ—Å—Ç—å—é.'
    };

    return recommendations[numerologyResult.lifePathNumber] || '–°–ª–µ–¥—É–π—Ç–µ —Å–≤–æ–µ–º—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã.';
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
   */
  async handleNumerologyInput(bot, msg) {
    try {
      const chatId = msg.chat.id;
      const input = msg.text.trim();
      const numerologyData = this.pendingNumerology.get(chatId);

      if (!numerologyData) {
        return;
      }

      switch (numerologyData.step) {
        case 'waiting_birthdate':
          await this.processNumerologyBirthDate(bot, chatId, input, msg.from, numerologyData);
          break;
          
        case 'waiting_fullname':
          await this.processNumerologyFullName(bot, chatId, input, msg.from, numerologyData);
          break;
          
        case 'waiting_partner_birthdate':
          await this.processNumerologyPartnerBirthDate(bot, chatId, input, msg.from, numerologyData);
          break;
          
        case 'waiting_partner_name':
          await this.processNumerologyPartnerName(bot, chatId, input, msg.from, numerologyData);
          break;
          
        case 'waiting_name_analysis':
          await this.processNameAnalysis(bot, chatId, input, msg.from);
          break;
      }

    } catch (error) {
      console.error('Error in numerology input:', error);
      await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      this.pendingNumerology?.delete(msg.chat.id);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
  async processNumerologyBirthDate(bot, chatId, text, from, session) {
    const dateRegex = /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/;
    const match = text.match(dateRegex);

    if (!match) {
      await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)');
      return;
    }

    const [, day, month, year] = match;
    const birthDate = new Date(year, month - 1, day);

    if (isNaN(birthDate.getTime()) || birthDate > new Date()) {
      await bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.');
      return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º data –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!session.data) {
      session.data = {};
    }
    
    session.data.birthDate = birthDate;
    session.step = 'waiting_fullname';
    this.pendingNumerology.set(chatId, session);

    await bot.sendMessage(chatId, `‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${day}.${month}.${year}\n\nüë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'numerology_menu' }]
        ]
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏
  async processNumerologyFullName(bot, chatId, text, from, session) {
    if (text.length < 2) {
      await bot.sendMessage(chatId, '‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.');
      return;
    }

    session.data.fullName = text;
    
    try {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      const numerologyService = require('../../../server/src/services/numerologyService');
      const profile = await numerologyService.generateFullAnalysis(
        session.data.birthDate,
        session.data.fullName
      );

      // –ü–æ–ª—É—á–∞–µ–º –ò–ò –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
      let aiInterpretation = null;
      try {
        const aiResponse = await database.makeRequest('POST', '/ai/interpret', {
          cards: [{
            name: `–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è: –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å`,
            description: `–ù–£–ú–ï–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–ù–ï –¢–ê–†–û): –ü–æ–ª–Ω–æ–µ –∏–º—è: ${session.data.fullName}, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${session.data.birthDate.toDateString()}. –ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏: ${profile.lifePath.number} (${profile.lifePath.meaning?.description}), –ß–∏—Å–ª–æ —Å—É–¥—å–±—ã: ${profile.destiny.number} (${profile.destiny.meaning?.description}), –ß–∏—Å–ª–æ –¥—É—à–∏: ${profile.soul.number}, –ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏: ${profile.personality.number}`,
            isReversed: false
          }],
          spreadType: 'numerology_profile',
          positions: [{ name: '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç', description: '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —á–∏—Å–ª–∞' }],
          question: `–ü—Ä–æ–≤–µ–¥–∏ –ù–£–ú–ï–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô (–Ω–µ —Ç–∞—Ä–æ) –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏. –ò–≥–Ω–æ—Ä–∏—Ä—É–π —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞—Ä—Ç —Ç–∞—Ä–æ - —ç—Ç–æ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è. –°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∏—Å–µ–ª –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏, —Å—É–¥—å–±—ã, –¥—É—à–∏ –∏ –ª–∏—á–Ω–æ—Å—Ç–∏.`,
          user: { id: session.userId, language: 'ru' }
        });
        
        aiInterpretation = aiResponse.interpretation;
        console.log('Numerology AI interpretation received:', JSON.stringify(aiResponse, null, 2));
      } catch (error) {
        console.log('Numerology AI interpretation failed:', error.message);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ù–ï —É–¥–∞–ª—è–µ–º!)
      this.userProfiles.set(chatId, {
        profile: profile,
        birthDate: session.data.birthDate,
        fullName: session.data.fullName,
        aiInterpretation: aiInterpretation,
        createdAt: new Date(),
        userId: session.userId
      });

      await this.sendNumerologyProfileResult(bot, chatId, profile, aiInterpretation);
      
      // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –≤–≤–æ–¥–∞ (–ø—Ä–æ—Ñ–∏–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º!)
      this.pendingNumerology.delete(chatId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      this.pendingNumerology.delete(chatId);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–µ–Ω–∏
  async processNameAnalysis(bot, chatId, text, from) {
    try {
      const numerologyService = require('../../../server/src/services/numerologyService');
      const destinyNumber = await numerologyService.calculateDestinyNumber(text);
      const nameNumber = await numerologyService.calculateNameNumber(text);
      
      let message = `üìù *–ê–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–∏ "${text}"*\n\n`;
      message += `‚≠ê *–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã:* ${destinyNumber}\n`;
      message += `üìö *–ß–∏—Å–ª–æ –∏–º–µ–Ω–∏:* ${nameNumber}\n\n`;
      
      // –ü–æ–ª—É—á–∞–µ–º –ò–ò –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –∏–º–µ–Ω–∏
      let aiInterpretation = null;
      try {
        const aiResponse = await database.makeRequest('POST', '/ai/interpret', {
          cards: [{
            name: `–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è: –ê–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–∏`,
            description: `–ù–£–ú–ï–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–ù–ï –¢–ê–†–û): –ê–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–∏ "${text}". –ß–∏—Å–ª–æ —Å—É–¥—å–±—ã: ${destinyNumber}, –ß–∏—Å–ª–æ –∏–º–µ–Ω–∏: ${nameNumber}. –ó–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ —Å—É–¥—å–±—ã: ${numerologyService.numberMeanings[destinyNumber]?.description || '–∞–Ω–∞–ª–∏–∑ —á–∏—Å–ª–∞'}`,
            isReversed: false
          }],
          spreadType: 'numerology_name',
          positions: [{ name: '–í–ª–∏—è–Ω–∏–µ –∏–º–µ–Ω–∏', description: '–ö–∞–∫ –∏–º—è –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—É–¥—å–±—É –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä' }],
          question: `–ü—Ä–æ–≤–µ–¥–∏ –ù–£–ú–ï–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô (–Ω–µ —Ç–∞—Ä–æ) –∞–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–∏ "${text}". –ò–≥–Ω–æ—Ä–∏—Ä—É–π —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞—Ä—Ç —Ç–∞—Ä–æ - —ç—Ç–æ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è. –†–∞—Å—Å–∫–∞–∂–∏ –æ –≤–ª–∏—è–Ω–∏–∏ –∏–º–µ–Ω–∏ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ —Å—É–¥—å–±—É —á–µ–ª–æ–≤–µ–∫–∞.`,
          user: { id: from.id, language: 'ru' }
        });
        
        aiInterpretation = aiResponse.interpretation;
        console.log('Name analysis AI interpretation received:', JSON.stringify(aiResponse, null, 2));
      } catch (error) {
        console.log('Name analysis AI interpretation failed:', error.message);
      }

      if (aiInterpretation && aiInterpretation.interpretation) {
        message += `ü§ñ *–ò–ò-–∞–Ω–∞–ª–∏–∑:*\n${aiInterpretation.interpretation}\n\n`;
        
        if (aiInterpretation.advice) {
          message += `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n${aiInterpretation.advice}`;
        }
      } else {
        // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–∏—Å–ª–∞
        const meaning = numerologyService.numberMeanings[destinyNumber];
        if (meaning) {
          message += `üí¨ *–ó–Ω–∞—á–µ–Ω–∏–µ:* ${meaning.description}\n\n`;
          message += `üîë *–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:* ${meaning.keywords.join(', ')}`;
        }
      }

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üîÑ –î—Ä—É–≥–æ–µ –∏–º—è', callback_data: 'numerology_name' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
        ]
      };

      await bot.sendMessage(chatId, message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });

      this.pendingNumerology.delete(chatId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–µ–Ω–∏:', error);
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è
  async sendNumerologyProfileResult(bot, chatId, profile, aiInterpretation = null) {
    try {
      let message = `üî¢ *–í–∞—à –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å*\n\n`;

      // –û—Å–Ω–æ–≤–Ω—ã–µ —á–∏—Å–ª–∞
      message += `üõ§ *–ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏:* ${profile.lifePath.number}\n`;
      message += `‚≠ê *–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã:* ${profile.destiny.number}\n`;
      message += `üí´ *–ß–∏—Å–ª–æ –¥—É—à–∏:* ${profile.soul.number}\n`;
      message += `üë§ *–ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏:* ${profile.personality.number}\n\n`;

      // –ò–ò –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∏–ª–∏ –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      if (aiInterpretation && aiInterpretation.interpretation) {
        message += `ü§ñ *–ò–ò-–∞–Ω–∞–ª–∏–∑:*\n${aiInterpretation.interpretation}\n\n`;
        
        if (aiInterpretation.advice) {
          message += `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n${aiInterpretation.advice}\n\n`;
        }
      } else {
        // –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        message += `üí¨ *–ì–ª–∞–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:*\n${profile.lifePath.meaning?.description || '–í–∞—à –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —É—Ä–æ–∫–∏ –∏ –∑–∞–¥–∞—á–∏'}\n\n`;

        // –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        if (profile.lifePath.meaning?.positive && profile.lifePath.meaning.positive.length > 0) {
          message += `üí™ *–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:*\n`;
          profile.lifePath.meaning.positive.slice(0, 3).forEach(strength => {
            message += `‚Ä¢ ${strength}\n`;
          });
          message += '\n';
        }
      }

      const keyboard = {
        inline_keyboard: [
          [{ text: '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!', callback_data: 'numerology_menu' }]
        ]
      };

      await bot.sendMessage(chatId, message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async handleMyNumerologyProfile(bot, chatId, messageId, from) {
    try {
      const userProfile = this.userProfiles.get(chatId);
      
      if (!userProfile || !userProfile.profile) {
        await bot.editMessageText('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ.', {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üî¢ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'numerology_create_profile' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
            ]
          }
        });
        return;
      }

      const profile = userProfile.profile;
      let message = `üë§ *–í–∞—à –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å*\n\n`;
      message += `üìù *–ò–º—è:* ${userProfile.fullName}\n`;
      message += `üìÖ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${userProfile.birthDate.toLocaleDateString('ru-RU')}\n\n`;

      // –û—Å–Ω–æ–≤–Ω—ã–µ —á–∏—Å–ª–∞
      message += `üî¢ *–í–∞—à–∏ —á–∏—Å–ª–∞:*\n`;
      message += `üõ§ –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å: *${profile.lifePath.number}*\n`;
      message += `‚≠ê –ß–∏—Å–ª–æ —Å—É–¥—å–±—ã: *${profile.destiny.number}*\n`;
      message += `üí´ –ß–∏—Å–ª–æ –¥—É—à–∏: *${profile.soul.number}*\n`;
      message += `üë§ –ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏: *${profile.personality.number}*\n\n`;

      // –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      message += `üí¨ *–ö—Ä–∞—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞:*\n${profile.lifePath.meaning?.description || '–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å'}`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑', callback_data: 'numerology_detailed' },
            { text: 'üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å', callback_data: 'numerology_create_profile' }
          ],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
        ]
      };

      await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('Error in my numerology profile:', error);
      await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
          ]
        }
      });
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –ò–ò –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async showDetailedNumerologyAnalysis(bot, chatId, messageId, from) {
    try {
      const userProfile = this.userProfiles.get(chatId);
      
      if (!userProfile || !userProfile.profile) {
        await bot.editMessageText('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ.', {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üî¢ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'numerology_create_profile' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
            ]
          }
        });
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      await bot.editMessageText('üîÑ *–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑...*\n\n–ò–ò —Å–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.', {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown'
      });

      let message = `üìä *–ü–æ–¥—Ä–æ–±–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑*\n\n`;
      message += `üë§ *${userProfile.fullName}*\n`;
      message += `üìÖ ${userProfile.birthDate.toLocaleDateString('ru-RU')}\n\n`;

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ò–ò –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ
      if (userProfile.aiInterpretation && userProfile.aiInterpretation.interpretation) {
        message += `ü§ñ *–ò–ò-–∞–Ω–∞–ª–∏–∑:*\n${userProfile.aiInterpretation.interpretation}\n\n`;
        
        if (userProfile.aiInterpretation.advice) {
          message += `üí° *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n${userProfile.aiInterpretation.advice}`;
        }
      } else {
        // –ï—Å–ª–∏ –ò–ò –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∑–∞–Ω–æ–≤–æ
        try {
          const profile = userProfile.profile;
          const aiResponse = await database.makeRequest('POST', '/ai/interpret', {
            cards: [{
              name: `–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑`,
              description: `–î–ï–¢–ê–õ–¨–ù–´–ô –ù–£–ú–ï–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–ù–ï –¢–ê–†–û): ${userProfile.fullName}, ${userProfile.birthDate.toDateString()}. –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å: ${profile.lifePath.number} (${profile.lifePath.meaning?.description}), –°—É–¥—å–±–∞: ${profile.destiny.number} (${profile.destiny.meaning?.description}), –î—É—à–∞: ${profile.soul.number}, –õ–∏—á–Ω–æ—Å—Ç—å: ${profile.personality.number}`,
              isReversed: false
            }],
            spreadType: 'numerology_detailed',
            positions: [{ name: '–ì–ª—É–±–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑', description: '–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –ª–∏—á–Ω–æ—Å—Ç–∏' }],
            question: `–ü—Ä–æ–≤–µ–¥–∏ –î–ï–¢–ê–õ–¨–ù–´–ô –ù–£–ú–ï–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –∞–Ω–∞–ª–∏–∑. –ò–≥–Ω–æ—Ä–∏—Ä—É–π —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞—Ä—Ç —Ç–∞—Ä–æ. –î–∞–π –≥–ª—É–±–æ–∫—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–ª—è –∂–∏–∑–Ω–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è.`,
            user: { id: from.id, language: 'ru' }
          });
          
          const aiInterpretation = aiResponse.interpretation;
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ò–ò –∞–Ω–∞–ª–∏–∑
          userProfile.aiInterpretation = aiInterpretation;
          this.userProfiles.set(chatId, userProfile);
          
          message += `ü§ñ *–ò–ò-–∞–Ω–∞–ª–∏–∑:*\n${aiInterpretation.interpretation}\n\n`;
          
          if (aiInterpretation.advice) {
            message += `üí° *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n${aiInterpretation.advice}`;
          }
          
        } catch (error) {
          console.log('Detailed analysis AI failed:', error.message);
          
          // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
          const profile = userProfile.profile;
          message += `üî¢ *–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–∏—Å–µ–ª:*\n\n`;
          
          message += `üõ§ *–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å ${profile.lifePath.number}:*\n${profile.lifePath.meaning?.description}\n\n`;
          message += `‚≠ê *–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã ${profile.destiny.number}:*\n${profile.destiny.meaning?.description}\n\n`;
          
          if (profile.lifePath.meaning?.positive) {
            message += `üí™ *–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:*\n`;
            profile.lifePath.meaning.positive.forEach(strength => {
              message += `‚Ä¢ ${strength}\n`;
            });
          }
        }
      }

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'numerology_my_profile' }],
          [{ text: 'üîô –ö –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏', callback_data: 'numerology_menu' }]
        ]
      };

      await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('Error in detailed numerology analysis:', error);
      await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_my_profile' }]
          ]
        }
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
  async processNumerologyPartnerBirthDate(bot, chatId, text, from, session) {
    const dateRegex = /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/;
    const match = text.match(dateRegex);

    if (!match) {
      await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)');
      return;
    }

    const [, day, month, year] = match;
    const birthDate = new Date(year, month - 1, day);

    if (isNaN(birthDate.getTime()) || birthDate > new Date()) {
      await bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.');
      return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º data –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!session.data) {
      session.data = {};
    }
    
    session.data.partnerBirthDate = birthDate;
    session.step = 'waiting_partner_name';
    this.pendingNumerology.set(chatId, session);

    await bot.sendMessage(chatId, `‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞: ${day}.${month}.${year}\n\nüë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞:`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'numerology_menu' }]
        ]
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
  async processNumerologyPartnerName(bot, chatId, text, from, session) {
    if (text.length < 2) {
      await bot.sendMessage(chatId, '‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.');
      return;
    }

    session.data.partnerFullName = text;
    
    try {
      const numerologyService = require('../../../server/src/services/numerologyService');
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
      const compatibility = await numerologyService.calculateCompatibility(
        session.data.partnerBirthDate,
        session.data.partnerFullName
      );

      // –ü–æ–ª—É—á–∞–µ–º –ò–ò –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      let aiInterpretation = null;
      try {
        const aiResponse = await database.makeRequest('POST', '/ai/interpret', {
          cards: [{
            name: `–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å`,
            description: `–ù–£–ú–ï–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–ù–ï –¢–ê–†–û): –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ —á–∏—Å–ª–∞–º —Å—É–¥—å–±—ã. –ü–∞—Ä—Ç–Ω–µ—Ä: ${session.data.partnerFullName}, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${session.data.partnerBirthDate.toDateString()}. –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: ${compatibility.percentage}%. –ë–∞–∑–æ–≤–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ${compatibility.description}`,
            isReversed: false
          }],
          spreadType: 'numerology_compatibility',
          positions: [{ name: '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', description: '–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —á–∏—Å–ª–∞–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤' }],
          question: `–ü—Ä–æ–≤–µ–¥–∏ –ù–£–ú–ï–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô (–Ω–µ —Ç–∞—Ä–æ) –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤. –ò–≥–Ω–æ—Ä–∏—Ä—É–π —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞—Ä—Ç —Ç–∞—Ä–æ - —ç—Ç–æ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è. –î–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.`,
          user: { id: session.userId, language: 'ru' }
        });
        
        aiInterpretation = aiResponse.interpretation;
        console.log('Compatibility AI interpretation received:', JSON.stringify(aiResponse, null, 2));
      } catch (error) {
        console.log('Compatibility AI interpretation failed:', error.message);
      }

      await this.sendCompatibilityResult(bot, chatId, compatibility, aiInterpretation);
      
      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      this.pendingNumerology.delete(chatId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      this.pendingNumerology.delete(chatId);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  async sendCompatibilityResult(bot, chatId, compatibility, aiInterpretation = null) {
    try {
      let message = `üë• *–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏*\n\n`;

      if (aiInterpretation && aiInterpretation.interpretation) {
        message += `ü§ñ *–ò–ò-–∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:*\n${aiInterpretation.interpretation}\n\n`;
        
        if (aiInterpretation.advice) {
          message += `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n${aiInterpretation.advice}`;
        }
      } else {
        message += `üí´ *–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:* ${compatibility.percentage}%\n`;
        message += `üí¨ *–û–ø–∏—Å–∞–Ω–∏–µ:* ${compatibility.description}\n\n`;
        message += `üîë *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:* ${compatibility.advice}`;
      }

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
        ]
      };

      await bot.sendMessage(chatId, message, { 
        parse_mode: 'Markdown', 
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:', error);
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.');
    }
  }

  /**
   * –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç –¥–ª—è –º–ª–∞–¥—à–∏—Ö –∞—Ä–∫–∞–Ω–æ–≤
   */
  getBasicCardMeaning(card, isReversed) {
    const suitMeanings = {
      wands: isReversed 
        ? '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –∑–∞—Å—Ç–æ–π –≤ –¥–µ–ª–∞—Ö'
        : '–≠–Ω–µ—Ä–≥–∏—è, –¥–µ–π—Å—Ç–≤–∏–µ, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, —Å—Ç—Ä–∞—Å—Ç—å',
      cups: isReversed
        ? '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ, –∑–∞–∫—Ä—ã—Ç–æ—Å—Ç—å'
        : '–õ—é–±–æ–≤—å, —ç–º–æ—Ü–∏–∏, –∏–Ω—Ç—É–∏—Ü–∏—è, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å',
      swords: isReversed
        ? '–ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—É—Ç–∞–Ω–∏—Ü–∞, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –∞–≥—Ä–µ—Å—Å–∏—è'
        : '–ú—ã—Å–ª–∏, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å',
      pentacles: isReversed
        ? '–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, —É–ø—É—â–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'
        : '–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –±–ª–∞–≥–∞, –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'
    };

    return suitMeanings[card.suit] || '–ó–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–π –∫–∞—Ä—Ç—ã —Ç—Ä–µ–±—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏';
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã —Å –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º
   */
  async handleCardReveal(bot, chatId, messageId, cardIndex, from) {
    try {
      const readingData = this.pendingReadings?.get(chatId);
      if (!readingData) {
        console.log('Reading data not found for chat:', chatId);
        return;
      }

      const { cards, cardImages, spread, revealedCards, aiInterpretation } = readingData;
      const card = cards[cardIndex];

      if (!card || revealedCards.has(cardIndex)) {
        console.log('Card not found or already revealed:', cardIndex);
        return;
      }

      // –û—Ç–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—É –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—É—é
      revealedCards.add(cardIndex);

      // –ú–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç—ã
      await this.revealCardMystically(bot, chatId, card, cardIndex, cardImages[cardIndex], spread, aiInterpretation);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      await this.updateRevelationControls(bot, chatId, cards, revealedCards, spread);

      console.log(`Card revealed: ${card.name} for user ${from.id}`);

    } catch (error) {
      console.error('Error revealing card:', error);
    }
  }

  /**
   * –ú–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã
   */
  async revealCardMystically(bot, chatId, card, cardIndex, cardImage, spread, aiInterpretation) {
    const position = spread.positions[cardIndex];
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const mysticalText = `‚ú® *–ö–∞—Ä—Ç–∞ ${cardIndex + 1} —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ–∏ —Ç–∞–π–Ω—ã...*\n\n` +
      `üîÆ *${position.name}*\n` +
      `${position.description || '–ö–ª—é—á–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–∞—Å–∫–ª–∞–¥–µ'}\n\n` +
      `*–ö–∞—Ä—Ç–∞ –≥–æ–≤–æ—Ä–∏—Ç:* "${card.name}"${card.reversed ? ' *(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)*' : ''}`;

    await bot.sendMessage(chatId, mysticalText, { parse_mode: 'Markdown' });

    // –ü–∞—É–∑–∞ –¥–ª—è –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if (cardImage && cardImage.imageData) {
      console.log(`Card image for ${card.name}: valid=${this.isValidBase64Image(cardImage.imageData)}, length=${cardImage.imageData.length}, isMock=${cardImage.isMock}`);
      
      if (this.isValidBase64Image(cardImage.imageData)) {
        try {
          const imageBuffer = Buffer.from(cardImage.imageData, 'base64');
          console.log(`Sending card image for ${card.name}, buffer size: ${imageBuffer.length}`);
          
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É caption –¥–ª—è Telegram (–º–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞)
          const mysticalDesc = this.getCardMysticalDescription(card);
          let caption = `üÉè *${card.name}*${card.reversed ? ' *(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)*' : ''}`;
          
          if (mysticalDesc && (caption.length + mysticalDesc.length + 4) <= 1020) {
            caption += `\n\n${mysticalDesc}`;
          }
          
          await bot.sendPhoto(chatId, imageBuffer, {
            caption,
            parse_mode: 'Markdown'
          }, {
            filename: `${card.name.replace(/\s+/g, '_')}.png`,
            contentType: 'image/png'
          });
          
          console.log(`Successfully sent card image for ${card.name}`);
        } catch (imageError) {
          console.log('Failed to send card image:', imageError.message);
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
          await bot.sendMessage(chatId, `üÉè *${card.name}*${card.reversed ? ' *(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)*' : ''}\n\n${this.getCardMysticalDescription(card)}`, {
            parse_mode: 'Markdown'
          });
        }
      } else {
        console.log(`Invalid card image for ${card.name}, sending text instead`);
        // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        await bot.sendMessage(chatId, `üÉè *${card.name}*${card.reversed ? ' *(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)*' : ''}\n\n${this.getCardMysticalDescription(card)}`, {
          parse_mode: 'Markdown'
        });
      }
    } else {
      console.log(`No card image data for ${card.name}, sending text`);
      // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
      await bot.sendMessage(chatId, `üÉè *${card.name}*${card.reversed ? ' *(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)*' : ''}\n\n${this.getCardMysticalDescription(card)}`, {
        parse_mode: 'Markdown'
      });
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
    if (aiInterpretation && aiInterpretation.success) {
      const positionInterpretation = this.extractPositionInterpretation(aiInterpretation, cardIndex, position.name);
      if (positionInterpretation) {
        await bot.sendMessage(chatId, `üí´ *–ú—É–¥—Ä–æ—Å—Ç—å –∫–∞—Ä—Ç—ã:*\n\n${positionInterpretation}`, { parse_mode: 'Markdown' });
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
   */
  getCardMysticalDescription(card) {
    const keywords = card.keywords || [];
    const description = card.description || '–ö–∞—Ä—Ç–∞ –Ω–µ—Å–µ—Ç –≤–∞–∂–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è –≤–∞—Å';
    
    let mysticalDesc = `${card.unicode || 'üîÆ'} ${description}\n\n`;
    
    if (keywords.length > 0) {
      mysticalDesc += `*–ö–ª—é—á–µ–≤—ã–µ —ç–Ω–µ—Ä–≥–∏–∏:* ${keywords.slice(0, 3).join(', ')}\n\n`;
    }
    
    if (card.reversed) {
      mysticalDesc += `‚ö†Ô∏è *–ö–∞—Ä—Ç–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞:* –≠–Ω–µ—Ä–≥–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞–±–æ—Ç—ã`;
    } else {
      mysticalDesc += `‚úÖ *–ü—Ä—è–º–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:* –≠–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞`;
    }
    
    return mysticalDesc;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
   */
  extractPositionInterpretation(aiInterpretation, cardIndex, positionName) {
    const interpretation = aiInterpretation.interpretation?.interpretation || aiInterpretation.interpretation?.main || '';
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
    const lines = interpretation.split('\n');
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].toLowerCase();
      if (line.includes(positionName.toLowerCase()) || line.includes(`${cardIndex + 1}`)) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∏ —Å–ª–µ–¥—É—é—â–∏–µ 2-3 —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        return lines.slice(i, i + 3).join('\n').trim();
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –º—É–¥—Ä–æ—Å—Ç—å
    const sentences = interpretation.split('. ');
    return sentences[cardIndex] || sentences[0] || '–ö–∞—Ä—Ç–∞ –≥–æ–≤–æ—Ä–∏—Ç –æ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏.';
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç —Å—Ä–∞–∑—É
   */
  async handleRevealAllCards(bot, chatId, messageId, from) {
    try {
      const readingData = this.pendingReadings?.get(chatId);
      if (!readingData) {
        console.log('Reading data not found for chat:', chatId);
        return;
      }

      const { cards, cardImages, spread, revealedCards, aiInterpretation } = readingData;

      await bot.sendMessage(chatId, 'üåü *–†–∞—Å–∫—Ä—ã–≤–∞—é –≤—Å–µ –∫–∞—Ä—Ç—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ...*\n\nüîÆ –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –ø—Ä–∏–Ω—è—Ç—å –≤—Å—é –º—É–¥—Ä–æ—Å—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∞!', { 
        parse_mode: 'Markdown' 
      });

      // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç—ã
      for (let i = 0; i < cards.length; i++) {
        if (!revealedCards.has(i)) {
          const card = cards[i];
          const cardImage = cardImages[i];

          // –ú–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã
          await this.revealCardMystically(bot, chatId, card, i, cardImage, spread, aiInterpretation);
          revealedCards.add(i);

          // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
          await new Promise(resolve => setTimeout(resolve, 1200));
        }
      }

      console.log(`All cards revealed for user ${from.id}`);

      // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const finalKeyboard = {
        inline_keyboard: [
          [{ text: 'üìú –ü–æ–ª–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ', callback_data: 'show_full_interpretation' }],
          [{ text: 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'new_reading' }]
        ]
      };
      
      await bot.sendMessage(chatId, '‚ú® *–í—Å–µ –∫–∞—Ä—Ç—ã —Ä–∞—Å–∫—Ä—ã—Ç—ã!*\n\nüîÆ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞.', {
        parse_mode: 'Markdown',
        reply_markup: this.addMainMenuButton(finalKeyboard)
      });

    } catch (error) {
      console.error('Error revealing all cards:', error);
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.pendingReadings.delete(chatId);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –∫–∞—Ä—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'new_reading' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        }
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É (–ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏)
   */
  async handleRevealedCardTouch(bot, chatId, messageId, cardIndex, from) {
    try {
      const readingData = this.pendingReadings?.get(chatId);
      if (!readingData) {
        console.log('Reading data not found for chat:', chatId);
        return;
      }

      const { cards, spread, aiInterpretation } = readingData;
      const card = cards[cardIndex];
      const position = spread.positions[cardIndex];

      if (!card) {
        console.log('Card not found at index:', cardIndex);
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
      let detailText = `üÉè *–î–ï–¢–ê–õ–ò –ö–ê–†–¢–´*\n\n`;
      detailText += `**${card.name}**${card.reversed ? ' *(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)*' : ''}\n\n`;
      detailText += `üéØ *–ü–æ–∑–∏—Ü–∏—è:* ${position.name}\n`;
      detailText += `üìù *–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:* ${position.description || '–ö–ª—é—á–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–∞—Å–∫–ª–∞–¥–µ'}\n\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∫–∞—Ä—Ç—ã
      if (card.element) {
        detailText += `üåü *–°—Ç–∏—Ö–∏—è:* ${card.element}\n`;
      }
      if (card.suit) {
        detailText += `‚ô†Ô∏è *–ú–∞—Å—Ç—å:* ${this.getSuitName(card.suit)}\n`;
      }
      if (card.number) {
        detailText += `üî¢ *–ù–æ–º–µ—Ä:* ${card.number}\n`;
      }
      
      detailText += `\n${this.getCardMysticalDescription(card)}\n\n`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
      if (aiInterpretation && aiInterpretation.success) {
        const positionInterpretation = this.extractPositionInterpretation(aiInterpretation, cardIndex, position.name);
        if (positionInterpretation) {
          detailText += `üí´ *–ú—É–¥—Ä–æ—Å—Ç—å –¥–ª—è –≤–∞—Å:*\n${positionInterpretation}`;
        }
      }

      await bot.sendMessage(chatId, detailText, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÆ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞—Å–∫–ª–∞–¥—É', callback_data: 'back_to_spread' }],
            [{ text: 'üìú –ü–æ–ª–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ', callback_data: 'show_full_interpretation' }]
          ]
        }
      });

      console.log(`Card details shown: ${card.name} for user ${from.id}`);

    } catch (error) {
      console.error('Error showing card details:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Å—Ç–∏
   */
  getSuitName(suit) {
    const suitNames = {
      'wands': '–ñ–µ–∑–ª—ã',
      'cups': '–ö—É–±–∫–∏', 
      'swords': '–ú–µ—á–∏',
      'pentacles': '–ü–µ–Ω—Ç–∞–∫–ª–∏'
    };
    return suitNames[suit] || suit;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
   */
  async handleShowFullInterpretation(bot, chatId, messageId, from) {
    try {
      const readingData = this.pendingReadings?.get(chatId);
      if (!readingData) {
        console.log('Reading data not found for chat:', chatId);
        return;
      }

      const { cards, spread, aiInterpretation, userQuestion } = readingData;

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
      await this.sendFullReadingInterpretation(bot, chatId, cards, spread, aiInterpretation, userQuestion);

      console.log(`Full interpretation shown for user ${from.id}`);

      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      this.pendingReadings?.delete(chatId);

    } catch (error) {
      console.error('Error showing full interpretation:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≥–∞–¥–∞–Ω–∏—è
   */
  async sendFullReadingInterpretation(bot, chatId, cards, spread, aiInterpretation, userQuestion) {
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
    let interpretationText = `üìú *–ü–û–õ–ù–û–ï –¢–û–õ–ö–û–í–ê–ù–ò–ï –†–ê–°–ö–õ–ê–î–ê*\n\n`;
    interpretationText += `üîÆ *${spread.name}*\n\n`;
    
    if (userQuestion) {
      interpretationText += `‚ùì *–í–∞—à –≤–æ–ø—Ä–æ—Å:* "${userQuestion}"\n\n`;
    }

    await bot.sendMessage(chatId, interpretationText, { parse_mode: 'Markdown' });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç—É —Å –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ–º
    for (let i = 0; i < cards.length; i++) {
      const card = cards[i];
      const position = spread.positions[i];
      
      let cardText = `üÉè *${position.name}*\n`;
      cardText += `${card.unicode || 'üîÆ'} **${card.name}**${card.reversed ? ' *(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)*' : ''}\n\n`;
      cardText += `${position.description || '–ö–ª—é—á–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–∞—Å–∫–ª–∞–¥–µ'}\n\n`;
      cardText += `${this.getCardMysticalDescription(card)}`;

      await bot.sendMessage(chatId, cardText, { parse_mode: 'Markdown' });
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    // AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
    if (aiInterpretation && aiInterpretation.success && aiInterpretation.interpretation) {
      let aiText = `üåü *–ú–£–î–†–û–°–¢–¨ –í–´–°–®–ò–• –°–ò–õ*\n\n`;
      
      if (aiInterpretation.interpretation.interpretation) {
        aiText += `${aiInterpretation.interpretation.interpretation}\n\n`;
      }
      
      if (aiInterpretation.interpretation.summary) {
        aiText += `üìã *–†–µ–∑—é–º–µ:*\n${aiInterpretation.interpretation.summary}\n\n`;
      }
      
      if (aiInterpretation.interpretation.advice) {
        aiText += `üí° *–°–æ–≤–µ—Ç –º—É–¥—Ä–µ—Ü–æ–≤:*\n${aiInterpretation.interpretation.advice}`;
      }

      await bot.sendMessage(chatId, aiText, { parse_mode: 'Markdown' });
    } else {
      // Fallback –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
      const fallbackText = `üåü *–¢–†–ê–î–ò–¶–ò–û–ù–ù–û–ï –¢–û–õ–ö–û–í–ê–ù–ò–ï*\n\n` +
        `–ö–∞—Ä—Ç—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ–±—è —Å–∞–º–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º –ø—É—Ç—å. ` +
        `–ö–∞–∂–¥–∞—è –Ω–µ—Å–µ—Ç –≤–∞–∂–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –æ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏. ` +
        `–î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤.`;

      await bot.sendMessage(chatId, fallbackText, { parse_mode: 'Markdown' });
    }

    // –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const closingText = `‚ú® *–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï*\n\n` +
      `–ì–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—É—Å—Ç—å –º—É–¥—Ä–æ—Å—Ç—å –∫–∞—Ä—Ç –Ω–∞–ø—Ä–∞–≤–∏—Ç –≤–∞—Å –Ω–∞ –ø—É—Ç–∏ –∫ –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ —É—Å–ø–µ—Ö—É.\n\n` +
      `üôè –ë–ª–∞–≥–æ–¥–∞—Ä—é –¥—É—Ö–æ–≤ –∫–∞—Ä—Ç –∑–∞ –∏—Ö –ø–æ—Å–ª–∞–Ω–∏—è.`;

    await bot.sendMessage(chatId, closingText, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'new_reading' }],
          [{ text: 'üìã –ò—Å—Ç–æ—Ä–∏—è –≥–∞–¥–∞–Ω–∏–π', callback_data: 'reading_history' }],
          [{ text: 'üåô –ö–∞—Ä—Ç–∞ –¥–Ω—è', callback_data: 'daily_card' }]
        ]
      }
    });
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
   */
  async sendMysticalSpreadLayout(bot, chatId, cards, spread) {
    let layoutText = `üîÆ *${spread.name}*\n\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–∞—Ä—Ç
    cards.forEach((card, index) => {
      const position = spread.positions[index];
      layoutText += `üé≠ *–ü–æ–∑–∏—Ü–∏—è ${index + 1}:* ${position.name}\n`;
      layoutText += `   ${position.description || '–ö–ª—é—á–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–∞—Å–∫–ª–∞–¥–µ'}\n\n`;
    });

    layoutText += `‚ú® *–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É*`;

    await bot.sendMessage(chatId, layoutText, { parse_mode: 'Markdown' });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç
    await this.sendRevelationButtons(bot, chatId, cards, new Set());
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç
   */
  async sendRevelationButtons(bot, chatId, cards, revealedCards) {
    const buttons = [];
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã
    const cardButtons = [];
    for (let i = 0; i < cards.length; i++) {
      if (!revealedCards.has(i)) {
        cardButtons.push({
          text: `üé≠ –ö–∞—Ä—Ç–∞ ${i + 1}`,
          callback_data: `reveal_card_${i}`
        });
      } else {
        cardButtons.push({
          text: `‚ú® –ö–∞—Ä—Ç–∞ ${i + 1} ‚ú®`,
          callback_data: `card_revealed_${i}`
        });
      }
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä—è–¥–∞–º (–º–∞–∫—Å–∏–º—É–º 2 –≤ —Ä—è–¥—É –¥–ª—è –ª—É—á—à–µ–≥–æ UX)
    for (let i = 0; i < cardButtons.length; i += 2) {
      buttons.push(cardButtons.slice(i, i + 2));
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const controlButtons = [];
    
    if (revealedCards.size > 0 && revealedCards.size < cards.length) {
      controlButtons.push({ text: 'üåü –û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã', callback_data: 'reveal_all_cards' });
    }
    
    if (revealedCards.size > 0) {
      controlButtons.push({ text: 'üìú –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ', callback_data: 'show_full_interpretation' });
    }

    if (controlButtons.length > 0) {
      buttons.push(controlButtons);
    }

    // –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É
    buttons.push([{ text: 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'new_reading' }]);

    const controlMessage = await bot.sendMessage(chatId, 'üéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–æ–º:*', {
      reply_markup: { inline_keyboard: buttons },
      parse_mode: 'Markdown'
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const readingData = this.pendingReadings?.get(chatId);
    if (readingData) {
      readingData.controlMessageId = controlMessage.message_id;
      this.pendingReadings.set(chatId, readingData);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º
   */
  async updateRevelationControls(bot, chatId, cards, revealedCards, spread) {
    const readingData = this.pendingReadings?.get(chatId);
    if (!readingData) return;

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
    if (readingData.controlMessageId) {
      await bot.deleteMessage(chatId, readingData.controlMessageId).catch(() => {});
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    await this.sendRevelationButtons(bot, chatId, cards, revealedCards);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  async saveReadingToDatabase(cards, spread, readingType, userQuestion, user, aiInterpretation) {
    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø –≥–∞–¥–∞–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
      let dbReadingType;
      switch (readingType) {
        case 'single':
          dbReadingType = 'single_card';
          break;
        case 'three':
          dbReadingType = 'three_cards';
          break;
        case 'celtic':
          dbReadingType = 'celtic_cross';
          break;
        case 'relationship':
          dbReadingType = 'relationship';
          break;
        default:
          dbReadingType = 'single_card';
      }

      const readingData = {
        userId: user.id,
        type: dbReadingType,
        spreadName: spread.name,
        cards: cards,
        positions: spread.positions,
        question: userQuestion || '–û–±—â–µ–µ –≥–∞–¥–∞–Ω–∏–µ',
        interpretation: (aiInterpretation && aiInterpretation.success && aiInterpretation.interpretation) 
          ? aiInterpretation.interpretation.interpretation 
          : '–ì–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤'
      };

      await database.createReading(readingData);
      console.log('Reading saved to database successfully');
    } catch (error) {
      console.log('Failed to save reading to database:', error.message);
    }
  }

  /**
   * –†–∞—Å–∫–ª–∞–¥ –∏–∑ —Ç—Ä–µ—Ö –∫–∞—Ä—Ç –≤ —Ä—è–¥
   */
  async sendThreeCardLayout(bot, chatId, cards, spread, mode, revealedCards) {
    const readingData = this.pendingReadings?.get(chatId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –≤ —Ä—è–¥ –∫–∞–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
    const mediaGroup = [];
    for (let i = 0; i < cards.length; i++) {
      const card = cards[i];
      const cardImage = readingData.cardImages[i];
      
      if (revealedCards.has(i)) {
        // –û—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞
        if (cardImage && cardImage.imageData && this.isValidBase64Image(cardImage.imageData)) {
          try {
            const imageBuffer = Buffer.from(cardImage.imageData, 'base64');
            mediaGroup.push({
              type: 'photo',
              media: imageBuffer,
              caption: i === 0 ? `üîÆ <b>${spread.name}</b>\n\nüÉè ${card.name}${card.reversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}\n${spread.positions[i]?.name}` : `üÉè ${card.name}${card.reversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}\n${spread.positions[i]?.name}`,
              parse_mode: 'HTML'
            });
          } catch (imageError) {
            console.log(`Failed to process card image ${i}:`, imageError.message);
            // Fallback –∫ –∑–∞–±–ª—é—Ä–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            const blurredImage = await this.createBlurredCardImage();
            mediaGroup.push({
              type: 'photo',
              media: blurredImage,
              caption: `üÉè ${card.name}${card.reversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}\n${spread.positions[i]?.name}\n(–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)`,
              parse_mode: 'HTML'
            });
          }
        } else {
          // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–±–ª—é—Ä–µ–Ω–Ω–æ–µ
          const blurredImage = await this.createBlurredCardImage();
          mediaGroup.push({
            type: 'photo',
            media: blurredImage,
            caption: `üÉè ${card.name}${card.reversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}\n${spread.positions[i]?.name}`,
            parse_mode: 'HTML'
          });
        }
      } else {
        // –ó–∞–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ (—Ä—É–±–∞—à–∫–∞)
        const blurredImage = await this.createBlurredCardImage();
        mediaGroup.push({
          type: 'photo',
          media: blurredImage,
          caption: i === 0 ? `üîÆ <b>${spread.name}</b>\n\nüé≠ ${spread.positions[i]?.name}\n(–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å)` : `üé≠ ${spread.positions[i]?.name}\n(–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å)`,
          parse_mode: 'HTML'
        });
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
    await bot.sendMediaGroup(chatId, mediaGroup);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await this.sendControlButtons(bot, chatId, cards, mode, revealedCards);
  }

  /**
   * –†–∞—Å–∫–ª–∞–¥ –∫–µ–ª—å—Ç—Å–∫–æ–≥–æ –∫—Ä–µ—Å—Ç–∞
   */
  async sendCelticCrossLayout(bot, chatId, cards, spread, mode, revealedCards) {
    const readingData = this.pendingReadings?.get(chatId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await bot.sendMessage(chatId, `üîÆ <b>${spread.name}</b>\n\n‚ú® –î—Ä–µ–≤–Ω–∏–π —Ä–∞—Å–∫–ª–∞–¥ –∫–µ–ª—å—Ç—Å–∫–∏—Ö –¥—Ä—É–∏–¥–æ–≤`, {
      parse_mode: 'HTML'
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –∫—Ä–µ—Å—Ç–∞
    // –¶–µ–Ω—Ç—Ä (–∫–∞—Ä—Ç—ã 0, 1)
    const centerGroup = [];
    for (let i = 0; i < 2; i++) {
      const card = cards[i];
      const cardImage = readingData.cardImages[i];
      
      if (revealedCards.has(i)) {
        centerGroup.push({
          type: 'photo',
          media: Buffer.from(cardImage.imageData, 'base64'),
          caption: `üÉè ${card.name}${card.reversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}\n${spread.positions[i]?.name}`,
          parse_mode: 'HTML'
        });
      } else {
        const blurredImage = await this.createBlurredCardImage();
        centerGroup.push({
          type: 'photo',
          media: blurredImage,
          caption: `üé≠ ${spread.positions[i]?.name}\n(–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å)`,
          parse_mode: 'HTML'
        });
      }
    }

    if (centerGroup.length > 0) {
      await bot.sendMediaGroup(chatId, centerGroup);
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–ø–∞—Ä–Ω–æ
    for (let i = 2; i < cards.length; i += 2) {
      const pairGroup = [];
      for (let j = i; j < Math.min(i + 2, cards.length); j++) {
        const card = cards[j];
        const cardImage = readingData.cardImages[j];
        
        if (revealedCards.has(j)) {
          pairGroup.push({
            type: 'photo',
            media: Buffer.from(cardImage.imageData, 'base64'),
            caption: `üÉè ${card.name}${card.reversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}\n${spread.positions[j]?.name}`,
            parse_mode: 'HTML'
          });
        } else {
          const blurredImage = await this.createBlurredCardImage();
          pairGroup.push({
            type: 'photo',
            media: blurredImage,
            caption: `üé≠ ${spread.positions[j]?.name}\n(–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å)`,
            parse_mode: 'HTML'
          });
        }
      }
      
      if (pairGroup.length > 0) {
        await bot.sendMediaGroup(chatId, pairGroup);
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await this.sendControlButtons(bot, chatId, cards, mode, revealedCards);
  }

  /**
   * –†–∞—Å–∫–ª–∞–¥ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã
   */
  async sendSingleCardLayout(bot, chatId, cards, spread, mode, revealedCards) {
    const readingData = this.pendingReadings?.get(chatId);
    const card = cards[0];
    const cardImage = readingData.cardImages[0];
    
    if (revealedCards.has(0)) {
      // –û—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞
      const imageBuffer = Buffer.from(cardImage.imageData, 'base64');
      await bot.sendPhoto(chatId, imageBuffer, {
        caption: `üîÆ <b>${spread.name}</b>\n\nüÉè ${card.name}${card.reversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}\n\n${spread.positions[0]?.name}`,
        parse_mode: 'HTML'
      }, {
        filename: `${card.name.replace(/\s+/g, '_')}_single.png`,
        contentType: 'image/png'
      });
    } else {
      // –ó–∞–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞
      const blurredImage = await this.createBlurredCardImage();
      await bot.sendPhoto(chatId, blurredImage, {
        caption: `üîÆ <b>${spread.name}</b>\n\nüé≠ ${spread.positions[0]?.name}\n(–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å)`,
        parse_mode: 'HTML'
      }, {
        filename: 'card_back.png',
        contentType: 'image/png'
      });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await this.sendControlButtons(bot, chatId, cards, mode, revealedCards);
  }

  /**
   * –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–º
   */
  async sendControlButtons(bot, chatId, cards, mode, revealedCards) {
    const readingData = this.pendingReadings?.get(chatId);
    if (!readingData) return;

    const allRevealed = revealedCards.size === cards.length;
    const buttons = [];

    if (!allRevealed) {
      // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
      const cardButtons = [];
      for (let i = 0; i < cards.length; i++) {
        if (!revealedCards.has(i)) {
          cardButtons.push({
            text: `üÉè ${i + 1}`,
            callback_data: `reveal_card_${i}`
          });
        }
      }

      if (cardButtons.length > 0) {
        // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä—è–¥–∞–º (–º–∞–∫—Å–∏–º—É–º 3 –≤ —Ä—è–¥—É)
        for (let i = 0; i < cardButtons.length; i += 3) {
          buttons.push(cardButtons.slice(i, i + 3));
        }
      }

      // –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ"
      if (revealedCards.size > 0 && revealedCards.size < cards.length) {
        buttons.push([{ text: 'üîÆ –û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã', callback_data: 'reveal_all_cards' }]);
      }
    }

    // –ö–Ω–æ–ø–∫–∞ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É)
    if (allRevealed || revealedCards.size > 0) {
      buttons.push([{ text: 'üìú –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ', callback_data: 'show_interpretation' }]);
    }

    // –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è
    buttons.push([{ text: 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'new_reading' }]);

    const controlMessage = await bot.sendMessage(chatId, 'üé≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–æ–º:', {
      reply_markup: {
        inline_keyboard: buttons
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    readingData.controlMessageId = controlMessage.message_id;
    this.pendingReadings.set(chatId, readingData);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–±–ª—é—Ä–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã (—Ä—É–±–∞—à–∫–∞)
   */
  async createBlurredCardImage() {
    // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä—É–±–∞—à–∫–∏ –∫–∞—Ä—Ç—ã –≤ base64 (—Å–∏–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç)
    const cardBackImage = Buffer.from('', 'base64');
    return cardBackImage;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –ø–∞–º—è—Ç–∏ (—Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç)
   */
  cleanupOldQuestions() {
    if (!this.pendingQuestions) return;
    
    const now = Date.now();
    const maxAge = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
    
    for (const [chatId, questionData] of this.pendingQuestions.entries()) {
      if (now - questionData.timestamp > maxAge) {
        this.pendingQuestions.delete(chatId);
        console.log(`Cleaned up old question for chat ${chatId}`);
      }
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö pending —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
   */
  cleanupPendingStates() {
    const now = Date.now();
    const timeout = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

    // –û—á–∏—Å—Ç–∫–∞ pending –≥–∞–¥–∞–Ω–∏–π
    if (this.pendingReadings) {
      for (const [chatId, data] of this.pendingReadings.entries()) {
        const timestamp = data.timestamp || data.startTime || 0;
        if (now - timestamp > timeout) {
          this.pendingReadings.delete(chatId);
          console.log(`Cleaned up pending reading for chat ${chatId}`);
        }
      }
    }

    // –û—á–∏—Å—Ç–∫–∞ pending –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
    if (this.pendingNumerology) {
      for (const [chatId, data] of this.pendingNumerology.entries()) {
        if (now - data.timestamp > timeout) {
          this.pendingNumerology.delete(chatId);
          console.log(`Cleaned up pending numerology for chat ${chatId}`);
        }
      }
    }

    const totalPending = (this.pendingReadings?.size || 0) + (this.pendingNumerology?.size || 0) + (this.pendingQuestions?.size || 0);
    if (totalPending > 0) {
      console.log(`Active pending states: questions=${this.pendingQuestions?.size || 0}, readings=${this.pendingReadings?.size || 0}, numerology=${this.pendingNumerology?.size || 0}`);
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
   */
  addMainMenuButton(keyboard) {
    if (!keyboard.inline_keyboard) {
      keyboard.inline_keyboard = [];
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    const hasMainMenu = keyboard.inline_keyboard.some(row => 
      row.some(button => button.callback_data === 'back_to_menu')
    );
    
    if (!hasMainMenu) {
      keyboard.inline_keyboard.push([
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }
      ]);
    }
    
    return keyboard;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  isValidBase64Image(base64String) {
    try {
      if (!base64String || typeof base64String !== 'string') {
        return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π base64
      const buffer = Buffer.from(base64String, 'base64');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫)
      if (buffer.length < 100) {
        return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const signatures = [
        [0xFF, 0xD8, 0xFF], // JPEG
        [0x89, 0x50, 0x4E, 0x47], // PNG  
        [0x47, 0x49, 0x46], // GIF
        [0x42, 0x4D], // BMP
        [0x52, 0x49, 0x46, 0x46] // WEBP
      ];
      
      return signatures.some(sig => 
        sig.every((byte, index) => buffer[index] === byte)
      );
    } catch (error) {
      console.log('Base64 validation error:', error.message);
      return false;
    }
  }


  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
   */
  async showDetailedNumerologyAnalysis(bot, chatId, analysisData, messageId = null) {
    try {
      const { lifePathNumber, personalityNumber, destinyNumber, birthDate } = analysisData;

      const detailedText = `üî¢ <b>–ü–æ–¥—Ä–æ–±–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑</b>\n\n` +
        `üìÖ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ${birthDate}\n\n` +
        
        `üõ§Ô∏è <b>–ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏: ${lifePathNumber}</b>\n` +
        `${this.getDetailedLifePathDescription(lifePathNumber)}\n\n` +
        
        `üë§ <b>–ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏: ${personalityNumber}</b>\n` +
        `${this.getDetailedPersonalityDescription(personalityNumber)}\n\n` +
        
        `üéØ <b>–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã: ${destinyNumber}</b>\n` +
        `${this.getDetailedDestinyDescription(destinyNumber)}\n\n` +
        
        `üíé <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n` +
        `${this.getCompatibilityAdvice(lifePathNumber, personalityNumber)}\n\n` +
        
        `üåü <b>–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏:</b> ${this.getLuckyDays(lifePathNumber)}\n` +
        `üé® <b>–°—á–∞—Å—Ç–ª–∏–≤—ã–µ —Ü–≤–µ—Ç–∞:</b> ${this.getLuckyColors(lifePathNumber)}\n` +
        `üíé <b>–ö–∞–º–Ω–∏-—Ç–∞–ª–∏—Å–º–∞–Ω—ã:</b> ${this.getLuckyStones(lifePathNumber)}`;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üîÆ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'numerology_personal_reading' }],
          [{ text: 'üìä –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', callback_data: 'numerology_compatibility' }],
          [{ text: 'üóìÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü', callback_data: 'numerology_monthly_forecast' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏', callback_data: 'numerology' }]
        ]
      };

      if (messageId) {
        await bot.editMessageText(detailedText, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'HTML',
          reply_markup: keyboard
        });
      } else {
        await bot.sendMessage(chatId, detailedText, {
          parse_mode: 'HTML',
          reply_markup: keyboard
        });
      }

    } catch (error) {
      console.error('Error showing detailed numerology analysis:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —á–∏—Å–ª–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
   */
  getDetailedLifePathDescription(number) {
    const descriptions = {
      1: '–í—ã –ø—Ä–∏—Ä–æ–∂–¥–µ–Ω–Ω—ã–π –ª–∏–¥–µ—Ä —Å —Å–∏–ª—å–Ω–æ–π –≤–æ–ª–µ–π –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º. –í–∞—à–∞ –º–∏—Å—Å–∏—è - –±—ã—Ç—å –ø–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥—Ü–µ–º, –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º –Ω–æ–≤—ã—Ö –∏–¥–µ–π –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤. –í—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –≤–æ–ø–ª–æ—â–∞—Ç—å –º–µ—á—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å.',
      2: '–í–∞—à –ø—É—Ç—å - —ç—Ç–æ –ø—É—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ –≥–∞—Ä–º–æ–Ω–∏–∏. –í—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ –¥–∞—Ä–æ–º –¥–∏–ø–ª–æ–º–∞—Ç–∏–∏ –∏ –º–∏—Ä–æ—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞. –í–∞—à–∞ —Å–∏–ª–∞ –≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –ª—é–¥–µ–π –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.',
      3: '–í—ã —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è –Ω–∞—Ç—É—Ä–∞ —Å —è—Ä–∫–æ–π —Ö–∞—Ä–∏–∑–º–æ–π –∏ —Ç–∞–ª–∞–Ω—Ç–æ–º –∫ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—é. –í–∞—à–∞ –º–∏—Å—Å–∏—è - –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö —Å–≤–æ–∏–º –æ–ø—Ç–∏–º–∏–∑–º–æ–º –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é. –ò—Å–∫—É—Å—Å—Ç–≤–æ, –æ–±—â–µ–Ω–∏–µ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ - –≤–∞—à–∏ —Å—Ç–∏—Ö–∏–∏.',
      4: '–í—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º —É–º–æ–º. –í–∞—à –ø—É—Ç—å - —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ—á–Ω—ã–µ –æ—Å–Ω–æ–≤—ã –¥–ª—è –±—É–¥—É—â–µ–≥–æ. –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ —Å–∏—Å—Ç–µ–º–Ω–æ—Å—Ç—å - –≤–∞—à–∏ –≥–ª–∞–≤–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞.',
      5: '–í–∞—à –ø—É—Ç—å - —ç—Ç–æ –ø—É—Ç—å —Å–≤–æ–±–æ–¥—ã –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π. –í—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ–º –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º. –í–∞—à–∞ –º–∏—Å—Å–∏—è - –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–∏—Ä –≤–æ –≤—Å–µ–º –µ–≥–æ –º–Ω–æ–≥–æ–æ–±—Ä–∞–∑–∏–∏.',
      6: '–í—ã –ø—Ä–∏—Ä–æ–∂–¥–µ–Ω–Ω—ã–π —Ü–µ–ª–∏—Ç–µ–ª—å –∏ –∑–∞—â–∏—Ç–Ω–∏–∫ —Å–µ–º—å–∏. –í–∞—à –ø—É—Ç—å —Å–≤—è–∑–∞–Ω —Å –∑–∞–±–æ—Ç–æ–π –æ –¥—Ä—É–≥–∏—Ö, —Å–æ–∑–¥–∞–Ω–∏–µ–º –≥–∞—Ä–º–æ–Ω–∏–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ –¥–æ–º–∞—à–Ω–µ–º –æ—á–∞–≥–µ.',
      7: '–í–∞—à –ø—É—Ç—å - —ç—Ç–æ –ø—É—Ç—å –º—É–¥—Ä–µ—Ü–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è —Ç–∞–π–Ω. –í—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ –≥–ª—É–±–æ–∫–æ–π –∏–Ω—Ç—É–∏—Ü–∏–µ–π –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º —É–º–æ–º. –î—É—Ö–æ–≤–Ω–æ—Å—Ç—å –∏ –ø–æ–∑–Ω–∞–Ω–∏–µ - –≤–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.',
      8: '–í—ã –ø—Ä–∏—Ä–æ–∂–¥–µ–Ω–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–º –º–∏—Ä–µ. –í–∞—à –ø—É—Ç—å —Å–≤—è–∑–∞–Ω —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —É—Å–ø–µ—Ö–∞ –≤ –±–∏–∑–Ω–µ—Å–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏. –ê–º–±–∏—Ü–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å - –≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã.',
      9: '–í–∞—à –ø—É—Ç—å - —ç—Ç–æ –ø—É—Ç—å –º—É–¥—Ä–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –∏ –≥—É–º–∞–Ω–∏—Å—Ç–∞. –í—ã –ø—Ä–∏–∑–≤–∞–Ω—ã —Å–ª—É–∂–∏—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤—É, –¥–µ–ª–∏—Ç—å—Å—è –∑–Ω–∞–Ω–∏—è–º–∏ –∏ –ø–æ–º–æ–≥–∞—Ç—å –≤ –¥—É—Ö–æ–≤–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏.'
    };
    return descriptions[number] || '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å, —Ç—Ä–µ–±—É—é—â–∏–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —á–∏—Å–ª–∞ –ª–∏—á–Ω–æ—Å—Ç–∏
   */
  getDetailedPersonalityDescription(number) {
    const descriptions = {
      1: '–û–∫—Ä—É–∂–∞—é—â–∏–µ –≤–∏–¥—è—Ç –≤ –≤–∞—Å —Å–∏–ª—å–Ω–æ–≥–æ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å –ª–∏–¥–µ—Ä—Å–∫–∏–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏. –í—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ–π –≤ —Å–µ–±–µ –ª–∏—á–Ω–æ—Å—Ç–∏.',
      2: '–í—ã –∫–∞–∂–µ—Ç–µ—Å—å –º—è–≥–∫–∏–º, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º. –û–∫—Ä—É–∂–∞—é—â–∏–µ —á—É–≤—Å—Ç–≤—É—é—Ç –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.',
      3: '–í–∞—à–∞ —Ö–∞—Ä–∏–∑–º–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–º –ø—Ä–∏—Ç—è–≥–∏–≤–∞—é—Ç –ª—é–¥–µ–π. –í—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ, –≤–µ—Å–µ–ª–æ–≥–æ –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.',
      4: '–û–∫—Ä—É–∂–∞—é—â–∏–µ –≤–∏–¥—è—Ç –≤ –≤–∞—Å –Ω–∞–¥–µ–∂–Ω–æ–≥–æ, –ø—Ä–∞–∫—Ç–∏—á–Ω–æ–≥–æ –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è.',
      5: '–í—ã –∫–∞–∂–µ—Ç–µ—Å—å –¥–∏–Ω–∞–º–∏—á–Ω—ã–º, —Å–≤–æ–±–æ–¥–æ–ª—é–±–∏–≤—ã–º –∏ –ø—Ä–µ–¥–ø—Ä–∏–∏–º—á–∏–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º, –ø–æ–ª–Ω—ã–º —ç–Ω–µ—Ä–≥–∏–∏ –∏ –Ω–æ–≤—ã—Ö –∏–¥–µ–π.',
      6: '–û–∫—Ä—É–∂–∞—é—â–∏–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é—Ç –≤–∞—Å –∫–∞–∫ –∑–∞–±–æ—Ç–ª–∏–≤–æ–≥–æ, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏ —Å–µ–º–µ–π–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å —Ä–∞–∑–≤–∏—Ç—ã–º —á—É–≤—Å—Ç–≤–æ–º —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏.',
      7: '–í—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –º—É–¥—Ä–æ–≥–æ, –∑–∞–≥–∞–¥–æ—á–Ω–æ–≥–æ –∏ –¥—É—Ö–æ–≤–Ω–æ —Ä–∞–∑–≤–∏—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å –≥–ª—É–±–æ–∫–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –º–∏—Ä–æ–º.',
      8: '–û–∫—Ä—É–∂–∞—é—â–∏–µ –≤–∏–¥—è—Ç –≤ –≤–∞—Å —É—Å–ø–µ—à–Ω–æ–≥–æ, –∞–º–±–∏—Ü–∏–æ–∑–Ω–æ–≥–æ –∏ –≤–ª–∏—è—Ç–µ–ª—å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å —Å–∏–ª—å–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º.',
      9: '–í—ã –∫–∞–∂–µ—Ç–µ—Å—å –º—É–¥—Ä—ã–º, —â–µ–¥—Ä—ã–º –∏ –∞–ª—å—Ç—Ä—É–∏—Å—Ç–∏—á–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º —Å —à–∏—Ä–æ–∫–∏–º –∫—Ä—É–≥–æ–∑–æ—Ä–æ–º –∏ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–º–∏ –≤–∑–≥–ª—è–¥–∞–º–∏.'
    };
    return descriptions[number] || '–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ, —Ç—Ä–µ–±—É—é—â–µ–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —á–∏—Å–ª–∞ —Å—É–¥—å–±—ã
   */
  getDetailedDestinyDescription(number) {
    const descriptions = {
      1: '–í–∞—à–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ - —Å—Ç–∞—Ç—å –ª–∏–¥–µ—Ä–æ–º –∏ –ø–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥—Ü–µ–º. –°—É–¥—å–±–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –≤–∞—Å —Ä–æ–ª—å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –≤–∞–∂–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –Ω–æ–≤–∞—Ç–æ—Ä—Å–∫–∏—Ö –∏–¥–µ–π.',
      2: '–í–∞—à–∞ —Å—É–¥—å–±–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞. –í—ã –ø—Ä–∏–∑–≤–∞–Ω—ã –±—ã—Ç—å –º–∏—Ä–æ—Ç–≤–æ—Ä—Ü–µ–º –∏ –¥–∏–ø–ª–æ–º–∞—Ç–æ–º.',
      3: '–°—É–¥—å–±–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –≤–∞—Å –ø—É—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è. –í—ã –¥–æ–ª–∂–Ω—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –∏ —Ä–∞–¥–æ–≤–∞—Ç—å –æ–∫—Ä—É–∂–∞—é—â–∏—Ö —Å–≤–æ–∏–º–∏ —Ç–∞–ª–∞–Ω—Ç–∞–º–∏.',
      4: '–í–∞—à–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ—á–Ω—ã–µ –æ—Å–Ω–æ–≤—ã –∏ —Å–∏—Å—Ç–µ–º—ã. –°—É–¥—å–±–∞ –ø–æ—Ä—É—á–∏–ª–∞ –≤–∞–º —Ä–æ–ª—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞.',
      5: '–í–∞—à–∞ —Å—É–¥—å–±–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–∞–º–∏. –í—ã –ø—Ä–∏–∑–≤–∞–Ω—ã —Ä–∞—Å—à–∏—Ä—è—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏ –Ω–µ—Å—Ç–∏ —Å–≤–æ–±–æ–¥—É.',
      6: '–°—É–¥—å–±–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –≤–∞—Å —Ä–æ–ª—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –∏ —Ü–µ–ª–∏—Ç–µ–ª—è. –í–∞—à–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ - –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–º—å–µ –∏ –±–ª–∏–∑–∫–∏—Ö.',
      7: '–í–∞—à–∞ —Å—É–¥—å–±–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–æ–∏—Å–∫–æ–º –∏—Å—Ç–∏–Ω—ã –∏ –¥—É—Ö–æ–≤–Ω—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º. –í—ã –ø—Ä–∏–∑–≤–∞–Ω—ã –±—ã—Ç—å –º—É–¥—Ä–µ—Ü–æ–º –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º.',
      8: '–°—É–¥—å–±–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –≤–∞—Å –ø—É—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ —É—Å–ø–µ—Ö–∞ –∏ –≤–ª–∏—è–Ω–∏—è. –í–∞—à–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ - —É–ø—Ä–∞–≤–ª—è—Ç—å –∏ –ø—Ä–æ—Ü–≤–µ—Ç–∞—Ç—å.',
      9: '–í–∞—à–∞ —Å—É–¥—å–±–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–ª—É–∂–µ–Ω–∏–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤—É. –í—ã –ø—Ä–∏–∑–≤–∞–Ω—ã –±—ã—Ç—å —É—á–∏—Ç–µ–ª–µ–º, —Ü–µ–ª–∏—Ç–µ–ª–µ–º –∏ –¥—É—Ö–æ–≤–Ω—ã–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º.'
    };
    return descriptions[number] || '–£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—É–¥—å–±–∞, —Ç—Ä–µ–±—É—é—â–∞—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è.';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
   */
  getCompatibilityAdvice(lifePath, personality) {
    const advice = [
      '–õ—É—á—à–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —á–∏—Å–ª–∞–º–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏: ',
      this.getCompatibleNumbers(lifePath).join(', '),
      '\n\n–í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –≤–∞–∂–Ω–æ: —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–∞, –¥–æ–ø–æ–ª–Ω—è—é—â–∏–µ –≤–∞—à —Ö–∞—Ä–∞–∫—Ç–µ—Ä.',
      '\n–ò–∑–±–µ–≥–∞–π—Ç–µ: –ø–æ–ø—ã—Ç–æ–∫ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ–¥ —Å–µ–±—è.'
    ];
    return advice.join('');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —á–∏—Å–µ–ª
   */
  getCompatibleNumbers(number) {
    const compatibility = {
      1: [3, 5, 6],
      2: [4, 6, 8],
      3: [1, 5, 9],
      4: [2, 6, 8],
      5: [1, 3, 7],
      6: [1, 2, 4, 9],
      7: [5, 9],
      8: [2, 4, 6],
      9: [3, 6, 7]
    };
    return compatibility[number] || [1, 5, 9];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π
   */
  getLuckyDays(number) {
    const days = {
      1: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1, 10, 19, 28 —á–∏—Å–ª–∞',
      2: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 2, 11, 20, 29 —á–∏—Å–ª–∞',
      3: '–ß–µ—Ç–≤–µ—Ä–≥, 3, 12, 21, 30 —á–∏—Å–ª–∞',
      4: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 4, 13, 22, 31 —á–∏—Å–ª–∞',
      5: '–°—Ä–µ–¥–∞, 5, 14, 23 —á–∏—Å–ª–∞',
      6: '–ü—è—Ç–Ω–∏—Ü–∞, 6, 15, 24 —á–∏—Å–ª–∞',
      7: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 7, 16, 25 —á–∏—Å–ª–∞',
      8: '–°—É–±–±–æ—Ç–∞, 8, 17, 26 —á–∏—Å–ª–∞',
      9: '–í—Ç–æ—Ä–Ω–∏–∫, 9, 18, 27 —á–∏—Å–ª–∞'
    };
    return days[number] || '–í—Å–µ –¥–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞—á–Ω—ã–º–∏';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö —Ü–≤–µ—Ç–æ–≤
   */
  getLuckyColors(number) {
    const colors = {
      1: 'üî¥ –ö—Ä–∞—Å–Ω—ã–π, üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π, üü° –ó–æ–ª–æ—Ç–æ–π',
      2: 'üîµ –°–∏–Ω–∏–π, üü¢ –ó–µ–ª–µ–Ω—ã–π, ‚ö™ –ë–µ–ª—ã–π',
      3: 'üü° –ñ–µ–ª—Ç—ã–π, üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π, üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π',
      4: 'üü§ –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π, üü¢ –ó–µ–ª–µ–Ω—ã–π, üîµ –°–∏–Ω–∏–π',
      5: 'üîµ –°–∏–Ω–∏–π, üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π, ‚ö™ –°–µ—Ä–µ–±—Ä—è–Ω—ã–π',
      6: 'üü¢ –ó–µ–ª–µ–Ω—ã–π, üîµ –°–∏–Ω–∏–π, üü£ –†–æ–∑–æ–≤—ã–π',
      7: 'üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π, üîµ –ú–æ—Ä—Å–∫–æ–π –≤–æ–ª–Ω—ã, ‚ö™ –ë–µ–ª—ã–π',
      8: '‚ö´ –ß–µ—Ä–Ω—ã–π, üü§ –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π, üü° –ó–æ–ª–æ—Ç–æ–π',
      9: 'üî¥ –ö—Ä–∞—Å–Ω—ã–π, üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π, üü° –ñ–µ–ª—Ç—ã–π'
    };
    return colors[number] || 'üåà –í—Å–µ —Ü–≤–µ—Ç–∞ —Ä–∞–¥—É–≥–∏';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–º–Ω–µ–π-—Ç–∞–ª–∏—Å–º–∞–Ω–æ–≤
   */
  getLuckyStones(number) {
    const stones = {
      1: 'üíé –ê–ª–º–∞–∑, üî¥ –†—É–±–∏–Ω, üü° –¢–æ–ø–∞–∑',
      2: 'üåô –õ—É–Ω–Ω—ã–π –∫–∞–º–µ–Ω—å, üü¢ –ò–∑—É–º—Ä—É–¥, ‚ö™ –ñ–µ–º—á—É–≥',
      3: 'üü° –¶–∏—Ç—Ä–∏–Ω, üü£ –ê–º–µ—Ç–∏—Å—Ç, üü† –°–µ—Ä–¥–æ–ª–∏–∫',
      4: 'üü¢ –ò–∑—É–º—Ä—É–¥, üîµ –°–∞–ø—Ñ–∏—Ä, üü´ –Ø—à–º–∞',
      5: 'üîµ –ê–∫–≤–∞–º–∞—Ä–∏–Ω, üü£ –ê–º–µ—Ç–∏—Å—Ç, ‚ö™ –ì–æ—Ä–Ω—ã–π —Ö—Ä—É—Å—Ç–∞–ª—å',
      6: 'üü¢ –ò–∑—É–º—Ä—É–¥, üîµ –°–∞–ø—Ñ–∏—Ä, üü£ –†–æ–∑–æ–≤—ã–π –∫–≤–∞—Ä—Ü',
      7: 'üü£ –ê–º–µ—Ç–∏—Å—Ç, üîµ –õ–∞–∑—É—Ä–∏—Ç, ‚ö™ –ì–æ—Ä–Ω—ã–π —Ö—Ä—É—Å—Ç–∞–ª—å',
      8: '‚ö´ –û–Ω–∏–∫—Å, üî¥ –ì—Ä–∞–Ω–∞—Ç, üü° –¶–∏—Ç—Ä–∏–Ω',
      9: 'üî¥ –†—É–±–∏–Ω, üü† –°–µ—Ä–¥–æ–ª–∏–∫, üü° –Ø–Ω—Ç–∞—Ä—å'
    };
    return stones[number] || 'üîÆ –ö–≤–∞—Ä—Ü –∏ –∞–º–µ—Ç–∏—Å—Ç';
  }


  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –¥–∞—Ç—ã
   */
  async processNumerologyDate(bot, chatId, birthDate, from, messageId = null) {
    try {
      const user = await this.ensureUser(from);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
      const dateRegex = /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/;
      const match = birthDate.match(dateRegex);
      
      if (!match) {
        await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)');
        return;
      }

      const [, day, month, year] = match;
      const dateObj = new Date(year, month - 1, day);
      
      if (dateObj.getDate() != day || dateObj.getMonth() != month - 1 || dateObj.getFullYear() != year) {
        await bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.');
        return;
      }

      await bot.sendChatAction(chatId, 'typing');

      // –†–∞—Å—á–µ—Ç –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª
      const analysis = this.calculateNumerologyNumbers(birthDate);
      
      // –ü–æ–ª—É—á–∞–µ–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
      let aiInterpretation = null;
      try {
        aiInterpretation = await this.getNumerologyAIInterpretation(analysis, user);
      } catch (error) {
        console.log('Numerology AI interpretation failed:', error.message);
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
      const analysisText = `üî¢ <b>–í–∞—à –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑</b>\n\n` +
        `üìÖ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ${birthDate}\n\n` +
        `üõ§Ô∏è <b>–ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏:</b> ${analysis.lifePathNumber}\n` +
        `${this.getLifePathMeaning(analysis.lifePathNumber)}\n\n` +
        `üë§ <b>–ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏:</b> ${analysis.personalityNumber}\n` +
        `${this.getPersonalityMeaning(analysis.personalityNumber)}\n\n` +
        `üéØ <b>–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã:</b> ${analysis.destinyNumber}\n` +
        `${this.getDestinyMeaning(analysis.destinyNumber)}\n\n`;

      let finalText = analysisText;
      
      // –î–æ–±–∞–≤–ª—è–µ–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
      if (aiInterpretation && aiInterpretation.success) {
        finalText += `ü§ñ <b>AI –∞–Ω–∞–ª–∏–∑:</b>\n${aiInterpretation.interpretation.interpretation || aiInterpretation.interpretation.main}\n\n`;
      }

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑', callback_data: 'numerology_detailed' }],
          [{ text: 'üîÆ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'numerology_personal_reading' }],
          [{ text: 'üìä –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', callback_data: 'numerology_compatibility' }],
          [{ text: 'üî¢ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑', callback_data: 'numerology' }]
        ]
      };

      if (messageId) {
        await bot.editMessageText(finalText, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'HTML',
          reply_markup: keyboard
        });
      } else {
        await bot.sendMessage(chatId, finalText, {
          parse_mode: 'HTML',
          reply_markup: keyboard
        });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
      this.pendingNumerology.set(chatId, {
        userId: user.id,
        step: 'completed',
        lastAnalysis: {
          ...analysis,
          birthDate,
          aiInterpretation
        },
        timestamp: Date.now()
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      try {
        const numerologyReading = {
          userId: user.id,
          type: 'numerology',
          spreadName: '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑',
          cards: [{ 
            name: `–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã ${analysis.destinyNumber}`, 
            description: `–ê–Ω–∞–ª–∏–∑ –¥–ª—è ${birthDate}` 
          }],
          positions: [{ 
            name: '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç', 
            description: '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —á–∏—Å–ª–∞' 
          }],
          question: `–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è ${birthDate}`,
          interpretation: aiInterpretation?.interpretation?.interpretation || analysisText,
          metadata: {
            birthDate,
            lifePathNumber: analysis.lifePathNumber,
            personalityNumber: analysis.personalityNumber,
            destinyNumber: analysis.destinyNumber
          }
        };
        
        await database.createReading(numerologyReading);
      } catch (error) {
        console.log('Failed to save numerology reading to database:', error.message);
      }

    } catch (error) {
      console.error('Error processing numerology date:', error);
      await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª
   */
  calculateNumerologyNumbers(birthDate) {
    const [day, month, year] = birthDate.split('.').map(Number);
    
    // –ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏ (—Å—É–º–º–∞ –≤—Å–µ—Ö —Ü–∏—Ñ—Ä –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è)
    const lifePathNumber = this.reduceToSingleDigit(day + month + year);
    
    // –ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏ (–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è)
    const personalityNumber = this.reduceToSingleDigit(day);
    
    // –ß–∏—Å–ª–æ —Å—É–¥—å–±—ã (–≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è)
    const destinyNumber = this.reduceToSingleDigit(year);
    
    return {
      lifePathNumber,
      personalityNumber,
      destinyNumber,
      day,
      month,
      year
    };
  }

  /**
   * –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∫ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–º—É
   */
  reduceToSingleDigit(number) {
    while (number > 9) {
      number = number.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);
    }
    return number;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
   */
  getLifePathMeaning(number) {
    const meanings = {
      1: '–õ–∏–¥–µ—Ä, –ø–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥–µ—Ü, –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π',
      2: '–ú–∏—Ä–æ—Ç–≤–æ—Ä–µ—Ü, –¥–∏–ø–ª–æ–º–∞—Ç, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ',
      3: '–¢–≤–æ—Ä–µ—Ü, –∞—Ä—Ç–∏—Å—Ç, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ',
      4: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
      5: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫, —Å–≤–æ–±–æ–¥–∞, –ø–µ—Ä–µ–º–µ–Ω—ã',
      6: '–¶–µ–ª–∏—Ç–µ–ª—å, –∑–∞—â–∏—Ç–Ω–∏–∫ —Å–µ–º—å–∏, –∑–∞–±–æ—Ç–∞',
      7: '–ú—É–¥—Ä–µ—Ü, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å',
      8: '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å, –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π —É—Å–ø–µ—Ö',
      9: '–£—á–∏—Ç–µ–ª—å, –≥—É–º–∞–Ω–∏—Å—Ç, —Å–ª—É–∂–µ–Ω–∏–µ'
    };
    return meanings[number] || '–û—Å–æ–±—ã–π –ø—É—Ç—å';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –ª–∏—á–Ω–æ—Å—Ç–∏
   */
  getPersonalityMeaning(number) {
    const meanings = {
      1: '–°–∏–ª—å–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π, –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞',
      2: '–ú—è–≥–∫–∏–π, –æ—Ç–∑—ã–≤—á–∏–≤—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π',
      3: '–•–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π, –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π',
      4: '–ù–∞–¥–µ–∂–Ω—ã–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π',
      5: '–î–∏–Ω–∞–º–∏—á–Ω—ã–π, —Å–≤–æ–±–æ–¥–æ–ª—é–±–∏–≤—ã–π, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π',
      6: '–ó–∞–±–æ—Ç–ª–∏–≤—ã–π, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π, —Å–µ–º–µ–π–Ω—ã–π',
      7: '–ú—É–¥—Ä—ã–π, –∑–∞–≥–∞–¥–æ—á–Ω—ã–π, –¥—É—Ö–æ–≤–Ω—ã–π',
      8: '–£—Å–ø–µ—à–Ω—ã–π, –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π, –≤–ª–∏—è—Ç–µ–ª—å–Ω—ã–π',
      9: '–©–µ–¥—Ä—ã–π, –∞–ª—å—Ç—Ä—É–∏—Å—Ç–∏—á–Ω—ã–π, –º—É–¥—Ä—ã–π'
    };
    return meanings[number] || '–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ —Å—É–¥—å–±—ã
   */
  getDestinyMeaning(number) {
    const meanings = {
      1: '–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–∞ –∏ –Ω–æ–≤–∞—Ç–æ—Ä–∞',
      2: '–°—É–¥—å–±–∞ –º–∏—Ä–æ—Ç–≤–æ—Ä—Ü–∞ –∏ –¥–∏–ø–ª–æ–º–∞—Ç–∞',
      3: '–ü—É—Ç—å —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è',
      4: '–ú–∏—Å—Å–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞',
      5: '–°—É–¥—å–±–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞',
      6: '–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –∏ —Ü–µ–ª–∏—Ç–µ–ª—è',
      7: '–ü—É—Ç—å –º—É–¥—Ä–µ—Ü–∞ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞',
      8: '–°—É–¥—å–±–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏ –º–∞–≥–Ω–∞—Ç–∞',
      9: '–ú–∏—Å—Å–∏—è —É—á–∏—Ç–µ–ª—è —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞'
    };
    return meanings[number] || '–û—Å–æ–±–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
   */
  async getNumerologyAIInterpretation(analysis, user) {
    try {
      // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      const numerologyCard = {
        name: `–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è ${analysis.birthDate}`,
        description: `–ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞: ${analysis.day}.${analysis.month}.${analysis.year}, ` +
          `–ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏: ${analysis.lifePathNumber} (${this.getLifePathMeaning(analysis.lifePathNumber)}), ` +
          `–ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏: ${analysis.personalityNumber} (${this.getPersonalityMeaning(analysis.personalityNumber)}), ` +
          `–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã: ${analysis.destinyNumber} (${this.getDestinyMeaning(analysis.destinyNumber)}), ` +
          `–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${analysis.day}, –ú–µ—Å—è—Ü: ${analysis.month}, –ì–æ–¥: ${analysis.year}`
      };

      const detailedQuestion = `–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–æ–∫–∏–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞, —Ä–æ–¥–∏–≤—à–µ–≥–æ—Å—è ${analysis.birthDate}. ` +
        `–ß–ò–°–õ–ê –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê: ` +
        `–ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏: ${analysis.lifePathNumber} (—Å—É–º–º–∞ –≤—Å–µ—Ö —Ü–∏—Ñ—Ä –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è), ` +
        `–ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏: ${analysis.personalityNumber} (–æ—Ç –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è ${analysis.day}), ` +
        `–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã: ${analysis.destinyNumber} (–æ—Ç –≥–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è ${analysis.year}). ` +
        `–î–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞: ` +
        `1) –ñ–∏–∑–Ω–µ–Ω–Ω—É—é –º–∏—Å—Å–∏—é –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ ` +
        `2) –•–∞—Ä–∞–∫—Ç–µ—Ä –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ ` +
        `3) –¢–∞–ª–∞–Ω—Ç—ã –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ ` +
        `4) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ ` +
        `5) –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —á–∏—Å–ª–∞–º–∏ ` +
        `6) –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ ` +
        `7) –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. ` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –∏ –¥–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã.`;

      const response = await database.makeRequest('POST', '/ai/interpret', {
        cards: [numerologyCard],
        spreadType: 'numerology',
        positions: [{ 
          name: '–ü–æ–ª–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç', 
          description: '–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏, —Ç–∞–ª–∞–Ω—Ç–æ–≤ –∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏ —á–µ—Ä–µ–∑ —á–∏—Å–ª–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è' 
        }],
        question: detailedQuestion,
        user: {
          id: user.id,
          language: user.languageCode || 'ru'
        }
      });

      return response;
    } catch (error) {
      console.error('Failed to get numerology AI interpretation:', error.message);
      throw error;
    }
  }

  /**
   * –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –≥–∞–¥–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
   */
  async handleNumerologyPersonalReading(bot, chatId, from, messageId = null) {
    try {
      const numerologyData = this.pendingNumerology.get(chatId);
      if (!numerologyData || !numerologyData.lastAnalysis) {
        await bot.editMessageText('‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑.', {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üî¢ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑', callback_data: 'numerology' }]
            ]
          }
        });
        return;
      }

      const user = await this.ensureUser(from);
      const analysis = numerologyData.lastAnalysis;

      await bot.sendChatAction(chatId, 'typing');

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª
      const personalCards = this.generatePersonalCards(analysis);
      
      // –ü–æ–ª—É—á–∞–µ–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è
      const aiResponse = await database.makeRequest('POST', '/ai/interpret', {
        cards: personalCards,
        spreadType: 'numerology_personal',
        positions: [
          { name: '–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', description: '–í–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è —Å–µ–π—á–∞—Å' },
          { name: '–°–∫—Ä—ã—Ç—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã', description: '–ù–µ—Ä–∞—Å–∫—Ä—ã—Ç—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏' },
          { name: '–ü—É—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è', description: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞' }
        ],
        question: `–ù–∞ –æ—Å–Ω–æ–≤–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å: ${analysis.lifePathNumber}, –ª–∏—á–Ω–æ—Å—Ç—å: ${analysis.personalityNumber}, —Å—É–¥—å–±–∞: ${analysis.destinyNumber}) –¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∂–∏–∑–Ω–∏`,
        user: {
          id: user.id,
          language: user.languageCode || 'ru'
        }
      });

      const interpretationText = aiResponse?.interpretation?.interpretation || 
        '–í–∞—à–∏ —á–∏—Å–ª–∞ –≥–æ–≤–æ—Ä—è—Ç –æ –ø–µ—Ä–∏–æ–¥–µ –≤–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏.';

      const responseText = `üîÆ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –≥–∞–¥–∞–Ω–∏–µ</b>\n\n` +
        `–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –≤–∞—à–µ–º –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø—Ä–æ—Ñ–∏–ª–µ (${analysis.birthDate})\n\n` +
        `<b>–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ:</b>\n${interpretationText}`;

      if (messageId) {
        await bot.editMessageText(responseText, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üî¢ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑', callback_data: 'numerology' }],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'numerology' }]
            ]
          }
        });
      } else {
        await bot.sendMessage(chatId, responseText, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üî¢ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑', callback_data: 'numerology' }]
            ]
          }
        });
      }

    } catch (error) {
      console.error('Error in numerology personal reading:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è.');
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
   */
  async handleNumerologyCompatibility(bot, chatId, from, messageId = null) {
    try {
      const numerologyData = this.pendingNumerology.get(chatId);
      if (!numerologyData || !numerologyData.lastAnalysis) {
        await bot.editMessageText('‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑.', {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üî¢ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑', callback_data: 'numerology' }]
            ]
          }
        });
        return;
      }

      const analysis = numerologyData.lastAnalysis;
      const userNumber = analysis.lifePathNumber;

      // –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
      const compatibilityData = this.getDetailedCompatibility(userNumber);

      const compatibilityText = `üìä <b>–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</b>\n\n` +
        `–í–∞—à–µ —á–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏: <b>${userNumber}</b>\n\n` +
        `<b>üíö –ò–¥–µ–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</b>\n${compatibilityData.perfect.map(num => `${num} - ${this.getCompatibilityDescription(userNumber, num)}`).join('\n')}\n\n` +
        `<b>üíõ –•–æ—Ä–æ—à–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</b>\n${compatibilityData.good.map(num => `${num} - ${this.getCompatibilityDescription(userNumber, num)}`).join('\n')}\n\n` +
        `<b>üü° –¢—Ä–µ–±—É–µ—Ç —Ä–∞–±–æ—Ç—ã:</b>\n${compatibilityData.challenging.map(num => `${num} - ${this.getCompatibilityDescription(userNumber, num)}`).join('\n')}\n\n` +
        `<i>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –≥–∞—Ä–º–æ–Ω–∏–∏ —ç–Ω–µ—Ä–≥–∏–π –≤–∞—à–∏—Ö —á–∏—Å–µ–ª</i>`;

      if (messageId) {
        await bot.editMessageText(compatibilityText, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üî¢ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑', callback_data: 'numerology' }],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'numerology' }]
            ]
          }
        });
      } else {
        await bot.sendMessage(chatId, compatibilityText, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üî¢ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑', callback_data: 'numerology' }]
            ]
          }
        });
      }

    } catch (error) {
      console.error('Error in numerology compatibility:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.');
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
   */
  generatePersonalCards(analysis) {
    return [
      {
        name: `–≠–Ω–µ—Ä–≥–∏—è —á–∏—Å–ª–∞ ${analysis.lifePathNumber}`,
        description: `–í–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: ${this.getLifePathMeaning(analysis.lifePathNumber)}`
      },
      {
        name: `–°–∫—Ä—ã—Ç—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª ${analysis.personalityNumber}`,
        description: `–í–∞—à–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã: ${this.getPersonalityMeaning(analysis.personalityNumber)}`
      },
      {
        name: `–ü—É—Ç—å —Å—É–¥—å–±—ã ${analysis.destinyNumber}`,
        description: `–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–≤–∏—Ç–∏—è: ${this.getDestinyMeaning(analysis.destinyNumber)}`
      }
    ];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
   */
  getDetailedCompatibility(userNumber) {
    const compatibility = {
      1: { perfect: [3, 5], good: [1, 9], challenging: [2, 4, 6, 7, 8] },
      2: { perfect: [6, 8], good: [2, 4], challenging: [1, 3, 5, 7, 9] },
      3: { perfect: [1, 9], good: [3, 5], challenging: [2, 4, 6, 7, 8] },
      4: { perfect: [2, 8], good: [4, 6], challenging: [1, 3, 5, 7, 9] },
      5: { perfect: [1, 7], good: [3, 5], challenging: [2, 4, 6, 8, 9] },
      6: { perfect: [2, 9], good: [4, 6], challenging: [1, 3, 5, 7, 8] },
      7: { perfect: [5, 9], good: [7], challenging: [1, 2, 3, 4, 6, 8] },
      8: { perfect: [2, 4], good: [6, 8], challenging: [1, 3, 5, 7, 9] },
      9: { perfect: [3, 6], good: [1, 7, 9], challenging: [2, 4, 5, 8] }
    };
    
    return compatibility[userNumber] || { perfect: [], good: [], challenging: [] };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏
   */
  getCompatibilityDescription(userNumber, partnerNumber) {
    const descriptions = {
      [`${userNumber}_${partnerNumber}`]: '–ì–∞—Ä–º–æ–Ω–∏—á–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–π',
      [`${partnerNumber}_${userNumber}`]: '–í–∑–∞–∏–º–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'
    };
    
    // –ë–∞–∑–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
    const baseDescriptions = {
      1: '–õ–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞',
      2: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –¥–∏–ø–ª–æ–º–∞—Ç–∏—è', 
      3: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ —Ä–∞–¥–æ—Å—Ç—å',
      4: '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å',
      5: '–°–≤–æ–±–æ–¥–∞ –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
      6: '–ó–∞–±–æ—Ç–∞ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å',
      7: '–ú—É–¥—Ä–æ—Å—Ç—å –∏ –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å',
      8: '–£—Å–ø–µ—Ö –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ—Å—Ç—å',
      9: '–ì—É–º–∞–Ω–∏–∑–º –∏ —â–µ–¥—Ä–æ—Å—Ç—å'
    };
    
    return descriptions[`${userNumber}_${partnerNumber}`] || baseDescriptions[partnerNumber] || '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ';
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
   */
  async handleNumerologyMenu(bot, chatId, messageId, from) {
    try {
      const user = await this.ensureUser(from);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
      const userProfile = this.userProfiles.get(chatId);
      const hasProfile = userProfile && userProfile.profile;

      let text, keyboard;

      if (!hasProfile) {
        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        text = `üî¢ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—é!*\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å.\n\n‚ú® –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 2 –º–∏–Ω—É—Ç—ã, –Ω–æ –æ—Ç–∫—Ä–æ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º:\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≥–æ–¥\n‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!`;
        
        keyboard = {
          inline_keyboard: [
            [{ text: 'üî¢ –°–æ–∑–¥–∞—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'numerology_create_profile' }],
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
          ]
        };
      } else {
        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é
        text = `üî¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è*\n\nüë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:`;
        
        keyboard = {
          inline_keyboard: [
            [
              { text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'numerology_my_profile' },
              { text: 'üë• –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', callback_data: 'numerology_compatibility' }
            ],
            [
              { text: 'üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–¥', callback_data: 'numerology_year' },
              { text: 'üìù –ê–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–∏', callback_data: 'numerology_name' }
            ],
            [
              { text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: process.env.WEBAPP_URL || 'https://mistika.app' } }
            ]
          ]
        };
      }

      if (messageId) {
        await bot.editMessageText(text, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      } else {
        await bot.sendMessage(chatId, text, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      }

    } catch (error) {
      console.error('Error in numerology menu:', error);
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
   */
  async handleNumerologyCalculate(bot, chatId, messageId, from) {
    try {
      const user = await this.ensureUser(from);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
      this.pendingNumerology.set(chatId, {
        userId: user.id,
        step: 'waiting_birthdate',
        data: {},
        timestamp: Date.now()
      });

      const text = `üî¢ *–†–∞—Å—á–µ—Ç –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è*\n\n–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è:\n1. –í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è\n2. –í–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è\n\nüìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990`;

      const keyboard = {
        inline_keyboard: [
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'numerology_cancel' }]
        ]
      };

      if (messageId) {
        await bot.editMessageText(text, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      } else {
        await bot.sendMessage(chatId, text, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      }

    } catch (error) {
      console.error('Error in numerology calculate:', error);
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–µ–Ω–∏
   */
  async handleNumerologyNameAnalysis(bot, chatId, messageId, from) {
    try {
      const user = await this.ensureUser(from);
      
      this.pendingNumerology.set(chatId, {
        userId: user.id,
        step: 'waiting_name_analysis',
        data: {},
        timestamp: Date.now()
      });

      const text = `üìù *–ê–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:\n(–º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–∞–∫ –ø–æ–ª–Ω–æ–µ –∏–º—è, —Ç–∞–∫ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞)`;

      const keyboard = {
        inline_keyboard: [
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'numerology_cancel' }]
        ]
      };

      if (messageId) {
        await bot.editMessageText(text, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      } else {
        await bot.sendMessage(chatId, text, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      }

    } catch (error) {
      console.error('Error in numerology name analysis:', error);
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async handleNumerologyCompatibility(bot, chatId, messageId, from) {
    try {
      const user = await this.ensureUser(from);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userProfile = this.userProfiles.get(chatId);
      
      if (!userProfile || !userProfile.profile) {
        await bot.editMessageText('‚ùå *–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å, –∞ –∑–∞—Ç–µ–º —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º.', {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üî¢ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'numerology_create_profile' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
            ]
          }
        });
        return;
      }

      // –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
      this.pendingNumerology.set(chatId, {
        userId: user.id,
        step: 'waiting_partner_birthdate',
        data: {
          userProfile: userProfile // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
        },
        timestamp: Date.now()
      });

      const text = `üë• *–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏*\n\n‚úÖ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:* ${userProfile.fullName}\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:\n\nüìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):`;

      const keyboard = {
        inline_keyboard: [
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'numerology_menu' }]
        ]
      };

      if (messageId) {
        await bot.editMessageText(text, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      } else {
        await bot.sendMessage(chatId, text, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      }

    } catch (error) {
      console.error('Error in numerology compatibility:', error);
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞/–ø—Ä–æ–≥–Ω–æ–∑–∞
   */
  async handleNumerologyForecast(bot, chatId, messageId, from) {
    try {
      const user = await this.ensureUser(from);
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
      const currentYear = new Date().getFullYear();
      const personalYear = this.calculatePersonalYear(currentYear, from.id);

      // –ü–æ–ª—É—á–∞–µ–º –ò–ò –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞
      let aiInterpretation = null;
      try {
        const aiResponse = await database.makeRequest('POST', '/ai/interpret', {
          cards: [{
            name: `–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è: –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–¥`,
            description: `–ù–£–ú–ï–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–ù–ï –¢–ê–†–û): –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–¥ ${currentYear}. –ß–∏—Å–ª–æ –≥–æ–¥–∞: ${personalYear}. –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${this.getPersonalYearMeaning(personalYear)}. –§–æ–∫—É—Å –≥–æ–¥–∞: ${this.getYearFocus(personalYear)}`,
            isReversed: false
          }],
          spreadType: 'numerology_year',
          positions: [{ name: '–≠–Ω–µ—Ä–≥–∏–∏ –≥–æ–¥–∞', description: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –≤—ã–∑–æ–≤—ã –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–≥–æ –≥–æ–¥–∞' }],
          question: `–ü—Ä–æ–≤–µ–¥–∏ –ù–£–ú–ï–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô (–Ω–µ —Ç–∞—Ä–æ) –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ ${currentYear} –≥–æ–¥. –ò–≥–Ω–æ—Ä–∏—Ä—É–π —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞—Ä—Ç —Ç–∞—Ä–æ - —ç—Ç–æ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è. –î–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∏—Å–ª–∞ –≥–æ–¥–∞ ${personalYear}.`,
          user: { id: from.id, language: 'ru' }
        });
        
        aiInterpretation = aiResponse.interpretation;
        console.log('Personal year AI interpretation received:', JSON.stringify(aiResponse, null, 2));
      } catch (error) {
        console.log('Personal year AI interpretation failed:', error.message);
      }

      let text = `üéØ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–¥ ${currentYear}*\n\nüìä *–í–∞—à–µ —á–∏—Å–ª–æ –≥–æ–¥–∞:* ${personalYear}\n\n`;

      if (aiInterpretation && aiInterpretation.interpretation) {
        text += `ü§ñ *–ò–ò-–ø—Ä–æ–≥–Ω–æ–∑:*\n${aiInterpretation.interpretation}\n\n`;
        
        if (aiInterpretation.advice) {
          text += `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n${aiInterpretation.advice}`;
        }
      } else {
        text += `${this.getPersonalYearMeaning(personalYear)}\n\n–≠—Ç–æ –≤—Ä–µ–º—è –¥–ª—è ${this.getYearFocus(personalYear)}`;
      }

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üì± –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑', web_app: { url: `${process.env.WEBAPP_URL || 'https://mistika.app'}/numerology` } }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'numerology_menu' }]
        ]
      };

      if (messageId) {
        await bot.editMessageText(text, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      } else {
        await bot.sendMessage(chatId, text, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      }

    } catch (error) {
      console.error('Error in numerology forecast:', error);
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  calculatePersonalYear(year, userId) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    return ((year + userId) % 9) + 1;
  }

  getPersonalYearMeaning(year) {
    const meanings = {
      1: "–ì–æ–¥ –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
      2: "–ì–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ —Ç–µ—Ä–ø–µ–Ω–∏—è", 
      3: "–ì–æ–¥ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è",
      4: "–ì–æ–¥ —Ç—Ä—É–¥–∞ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Å–Ω–æ–≤",
      5: "–ì–æ–¥ –ø–µ—Ä–µ–º–µ–Ω –∏ —Å–≤–æ–±–æ–¥—ã",
      6: "–ì–æ–¥ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–µ–º—å–∏",
      7: "–ì–æ–¥ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –∏ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞",
      8: "–ì–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ —É—Å–ø–µ—Ö–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
      9: "–ì–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è"
    };
    return meanings[year] || "–û—Å–æ–±—ã–π –≥–æ–¥ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏";
  }

  getYearFocus(year) {
    const focuses = {
      1: "–Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞",
      2: "–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –∏ –¥–∏–ø–ª–æ–º–∞—Ç–∏–∏",
      3: "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –æ–±—â–µ–Ω–∏—è",
      4: "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —É–ø–æ—Ä–Ω–æ–≥–æ —Ç—Ä—É–¥–∞",
      5: "–ø–µ—Ä–µ–º–µ–Ω –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π",
      6: "—Å–µ–º—å–∏ –∏ –∑–∞–±–æ—Ç—ã –æ –±–ª–∏–∑–∫–∏—Ö",
      7: "–¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —É—á–µ–±—ã",
      8: "–∫–∞—Ä—å–µ—Ä—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ —É—Å–ø–µ—Ö–∞",
      9: "–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤"
    };
    return focuses[year] || "–ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞";
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
   */
  async handleAppCommand(bot, msg) {
    try {
      const user = await this.ensureUser(msg.from);

      const text = `üì± *MISTIKA - –ü–æ–ª–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ*\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ MISTIKA –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º:\n\n‚ú® **–ß—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:**\n‚Ä¢ –ü–æ–ª–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ\n‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è\n‚Ä¢ –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å —Ä–∏—Ç—É–∞–ª–∞–º–∏\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –≥–∞–¥–∞–Ω–∏–π\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\nüîÆ –û—Ç–∫—Ä–æ–π—Ç–µ –º–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç–∞–ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;

      await bot.sendMessage(msg.chat.id, text, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚ú® –û—Ç–∫—Ä—ã—Ç—å MISTIKA',
                web_app: { url: process.env.WEBAPP_URL || 'https://mistika.app' }
              }
            ],
            [
              { text: 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ', callback_data: 'new_reading' },
              { text: 'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è', callback_data: 'numerology' }
            ]
          ]
        }
      });

      await database.trackEvent({
        type: 'button_app',
        userId: user.id
      });

    } catch (error) {
      console.error('Error in app command:', error);
      await this.sendErrorMessage(bot, msg.chat.id);
    }
  }
}

module.exports = new BotHandlers();