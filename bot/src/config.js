// bot/src/config.js
require('dotenv').config();

class BotConfig {
  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN;
    this.botUsername = process.env.TELEGRAM_BOT_USERNAME || 'mistika_bot';
    this.useWebhook = process.env.TELEGRAM_USE_WEBHOOK === 'true';
    this.webhookUrl = process.env.TELEGRAM_WEBHOOK_URL;
    this.webhookPath = process.env.TELEGRAM_WEBHOOK_PATH || '/webhook/telegram';
    this.webhookPort = parseInt(process.env.TELEGRAM_WEBHOOK_PORT) || 8443;
    this.webhookHost = process.env.TELEGRAM_WEBHOOK_HOST || '0.0.0.0';
    this.webhookSecret = process.env.TELEGRAM_WEBHOOK_SECRET;
    this.webhookCert = process.env.TELEGRAM_WEBHOOK_CERT;
    this.maxConnections = parseInt(process.env.TELEGRAM_MAX_CONNECTIONS) || 40;
    this.adminIds = this.parseAdminIds(process.env.TELEGRAM_ADMIN_IDS);
    this.serverUrl = process.env.SERVER_URL || 'http://localhost:3001';
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  validate() {
    const errors = [];

    if (!this.botToken) {
      errors.push('TELEGRAM_BOT_TOKEN is required');
    } else if (!this.isValidBotToken(this.botToken)) {
      errors.push('TELEGRAM_BOT_TOKEN has invalid format');
    }

    if (this.useWebhook) {
      if (!this.webhookUrl) {
        errors.push('TELEGRAM_WEBHOOK_URL is required when using webhook');
      } else if (!this.isValidUrl(this.webhookUrl)) {
        errors.push('TELEGRAM_WEBHOOK_URL has invalid format');
      }

      if (this.webhookSecret && this.webhookSecret.length < 8) {
        errors.push('TELEGRAM_WEBHOOK_SECRET must be at least 8 characters');
      }
    }

    if (errors.length > 0) {
      throw new Error(`Bot configuration errors: ${errors.join(', ')}`);
    }

    return true;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
   */
  isValidBotToken(token) {
    if (!token || typeof token !== 'string') return false;
    const tokenRegex = /^\d{8,10}:[A-Za-z0-9_-]{35}$/;
    return tokenRegex.test(token);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
   */
  isValidUrl(url) {
    try {
      const urlObj = new URL(url);
      return urlObj.protocol === 'https:';
    } catch {
      return false;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
   */
  parseAdminIds(adminIdsString) {
    if (!adminIdsString) return [];
    
    try {
      return adminIdsString
        .split(',')
        .map(id => parseInt(id.trim()))
        .filter(id => !isNaN(id) && id > 0);
    } catch (error) {
      console.warn('Failed to parse admin IDs:', error.message);
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
   */
  isAdmin(userId) {
    return this.adminIds.includes(parseInt(userId));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ URL webhook
   */
  getWebhookUrl() {
    if (!this.webhookUrl) return null;
    return `${this.webhookUrl}${this.webhookPath}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞
   */
  getBotOptions() {
    const options = {
      polling: !this.useWebhook
    };

    if (this.useWebhook) {
      options.webHook = {
        port: this.webhookPort,
        host: this.webhookHost
      };
    }

    return options;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
   */
  getBotCommands() {
    return [
      { command: 'start', description: 'üîÆ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã' },
      { command: 'help', description: '‚ùì –ü–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥' },
      { command: 'reading', description: 'üÉè –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ' },
      { command: 'daily', description: 'üìÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è' },
      { command: 'lunar', description: 'üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å' },
      { command: 'numerology', description: 'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑' },
      { command: 'premium', description: 'üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Premium' },
      { command: 'profile', description: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' },
      { command: 'history', description: 'üìã –ò—Å—Ç–æ—Ä–∏—è –≥–∞–¥–∞–Ω–∏–π' },
      { command: 'settings', description: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' }
    ];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  getMessages() {
    return {
      start: {
        new_user: `üîÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MISTIKA!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã —Å—É–¥—å–±—ã —Å –ø–æ–º–æ—â—å—é:
‚Ä¢ üÉè –¢–∞—Ä–æ –≥–∞–¥–∞–Ω–∏–π
‚Ä¢ üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏–∏  
‚Ä¢ üåô –õ—É–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.`,

        returning_user: `‚ú® –¢—ã –≤–µ—Ä–Ω—É–ª—Å—è ‚Äî –∏ —ç—Ç–æ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å.
        
–ö–∞—Ä—Ç—ã –¢–∞—Ä–æ —É–∂–µ –¥—Ä–æ–≥–Ω—É–ª–∏, —á—É–≤—Å—Ç–≤—É—è —Ç–≤–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ‚Ä¶
–°–ø—Ä–æ—Å–∏ ‚Äî –∏ —Å–∫—Ä—ã—Ç–æ–µ —Å—Ç–∞–Ω–µ—Ç —è–≤–Ω—ã–º.`
      },

      help: `‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é MISTIKA</b>

üîÆ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ /reading - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ
‚Ä¢ /daily - –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è
‚Ä¢ /lunar - –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ /numerology - –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ /premium - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Premium –ø–æ–¥–ø–∏—Å–∫–µ

üë§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º:</b>
‚Ä¢ /profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /history - –ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö –≥–∞–¥–∞–Ω–∏–π
‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üíé <b>Premium –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≥–∞–¥–∞–Ω–∏–π

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @mistika_support`,

      errors: {
        general: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        rate_limit: '‚è±Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.',
        premium_required: 'üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.',
        maintenance: 'üîß –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.'
      }
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   */
  getKeyboards() {
    return {
      mainMenu: {
        keyboard: [
          [{ text: 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ' }, { text: 'üìÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è' }],
          [{ text: 'üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å' }, { text: 'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è' }],
          [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å' }, { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' }],
          [{ text: 'üíé Premium' }, { text: '‚ùì –ü–æ–º–æ—â—å' }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      },

      webApp: {
        inline_keyboard: [
          [{
            text: 'üîÆ –û—Ç–∫—Ä—ã—Ç—å MISTIKA',
            web_app: { url: process.env.WEBAPP_URL || 'https://mistika.com' }
          }]
        ]
      },

      premium: {
        inline_keyboard: [
          [
            { text: 'üìÖ –ú–µ—Å—è—Ü - 299‚ÇΩ', callback_data: 'premium_monthly' },
            { text: 'üéØ 3 –º–µ—Å—è—Ü–∞ - 799‚ÇΩ', callback_data: 'premium_quarterly' }
          ],
          [
            { text: '‚≠ê –ì–æ–¥ - 2999‚ÇΩ', callback_data: 'premium_menu' },
            { text: 'üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥', callback_data: 'premium_trial' }
          ],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
        ]
      }
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  getSecurityConfig() {
    return {
      rateLimiting: {
        windowMs: 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
        maxRequests: 30,
        skipAdmins: true
      },
      antiSpam: {
        enabled: true,
        maxIdenticalMessages: 3,
        timeWindow: 60 * 1000
      },
      blockedUsers: this.parseBlockedUsers(process.env.TELEGRAM_BLOCKED_USERS),
      allowedChats: this.parseAllowedChats(process.env.TELEGRAM_ALLOWED_CHATS)
    };
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  parseBlockedUsers(blockedUsersString) {
    if (!blockedUsersString) return [];
    
    try {
      return blockedUsersString
        .split(',')
        .map(id => parseInt(id.trim()))
        .filter(id => !isNaN(id) && id > 0);
    } catch (error) {
      console.warn('Failed to parse blocked users:', error.message);
      return [];
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
   */
  parseAllowedChats(allowedChatsString) {
    if (!allowedChatsString) return [];
    
    try {
      return allowedChatsString
        .split(',')
        .map(id => id.trim())
        .filter(id => id.length > 0);
    } catch (error) {
      console.warn('Failed to parse allowed chats:', error.message);
      return [];
    }
  }

  /**
   * –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ª–æ–≥–æ–≤
   */
  maskToken(token) {
    if (!token) return '';
    const parts = token.split(':');
    if (parts.length !== 2) return '***';
    return `${parts[0]}:${'*'.repeat(parts[1].length)}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  getConfigInfo() {
    return {
      hasToken: !!this.botToken,
      maskedToken: this.maskToken(this.botToken),
      username: this.botUsername,
      useWebhook: this.useWebhook,
      webhookUrl: this.webhookUrl ? this.maskUrl(this.webhookUrl) : null,
      adminsCount: this.adminIds.length,
      environment: process.env.NODE_ENV || 'development'
    };
  }

  /**
   * –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ URL
   */
  maskUrl(url) {
    if (!url) return '';
    try {
      const urlObj = new URL(url);
      return `${urlObj.protocol}//${urlObj.hostname}:***${urlObj.pathname}`;
    } catch {
      return '***';
    }
  }
}

module.exports = new BotConfig();