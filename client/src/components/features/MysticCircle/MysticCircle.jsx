// client/src/components/features/MysticCircle/MysticCircle.jsx
import React, { useState, useEffect, useRef } from 'react';
import { NUMEROLOGY_NUMBERS } from '../../../shared/constants/numerology';
import { MOON_PHASES } from '../../../shared/constants/lunar';
import { Button } from '../../common/Button';
import './MysticCircle.css';

const MysticCircle = ({ 
    userBirthDate, 
    currentQuestion, 
    onReading,
    showAnimation = true 
}) => {
    const [isActive, setIsActive] = useState(false);
    const [mysticData, setMysticData] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [activeElements, setActiveElements] = useState([]);
    const circleRef = useRef(null);

    const mysticElements = [
        { id: 'fire', name: '–û–≥–æ–Ω—å', symbol: 'üî•', color: '#ff4444', energy: '–î–µ–π—Å—Ç–≤–∏–µ' },
        { id: 'water', name: '–í–æ–¥–∞', symbol: 'üíß', color: '#4488ff', energy: '–≠–º–æ—Ü–∏–∏' },
        { id: 'earth', name: '–ó–µ–º–ª—è', symbol: 'üåç', color: '#44aa44', energy: '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å' },
        { id: 'air', name: '–í–æ–∑–¥—É—Ö', symbol: 'üí®', color: '#ffaa44', energy: '–ú—ã—Å–ª–∏' },
        { id: 'spirit', name: '–î—É—Ö', symbol: '‚ú®', color: '#aa44ff', energy: '–ò–Ω—Ç—É–∏—Ü–∏—è' },
        { id: 'moon', name: '–õ—É–Ω–∞', symbol: 'üåô', color: '#aaccff', energy: '–¶–∏–∫–ª—ã' },
        { id: 'sun', name: '–°–æ–ª–Ω—Ü–µ', symbol: '‚òÄÔ∏è', color: '#ffcc44', energy: '–°–∏–ª–∞' },
        { id: 'star', name: '–ó–≤–µ–∑–¥—ã', symbol: '‚≠ê', color: '#ccaaff', energy: '–°—É–¥—å–±–∞' }
    ];

    useEffect(() => {
        if (userBirthDate) {
            calculatePersonalElements();
        }
    }, [userBirthDate]);

    const calculatePersonalElements = () => {
        if (!userBirthDate) return;
        
        const birthNumber = calculateLifePathNumber(userBirthDate);
        const elementWeights = calculateElementalBalance(userBirthDate, birthNumber);
        
        setActiveElements(elementWeights);
    };

    const calculateLifePathNumber = (birthDate) => {
        const date = new Date(birthDate);
        const day = date.getDate();
        const month = date.getMonth() + 1;
        const year = date.getFullYear();
        
        let sum = day + month + year;
        while (sum > 9 && sum !== 11 && sum !== 22 && sum !== 33) {
            sum = sum.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);
        }
        
        return sum;
    };

    const calculateElementalBalance = (birthDate, lifePathNumber) => {
        const weights = {};
        
        // –†–∞—Å—á–µ—Ç –≤–µ—Å–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
        mysticElements.forEach((element, index) => {
            const baseWeight = (lifePathNumber + index) % 10;
            const dateInfluence = new Date(birthDate).getDay();
            weights[element.id] = (baseWeight + dateInfluence) % 8 + 1;
        });
        
        return weights;
    };

    const activateMysticCircle = async () => {
        setIsLoading(true);
        setIsActive(true);
        
        try {
            // –ê–Ω–∏–º–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if (showAnimation) {
                for (let i = 0; i < mysticElements.length; i++) {
                    setTimeout(() => {
                        const elementDiv = document.getElementById(`element-${mysticElements[i].id}`);
                        if (elementDiv) {
                            elementDiv.classList.add('mystic-element--active');
                        }
                    }, i * 200);
                }
            }
            
            // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –º–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            const reading = await generateMysticReading();
            setMysticData(reading);
            onReading && onReading(reading);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫—Ä—É–≥–∞:', error);
        } finally {
            setIsLoading(false);
        }
    };

    const generateMysticReading = async () => {
        const dominantElement = findDominantElement();
        const secondaryElement = findSecondaryElement();
        const energyReading = generateEnergyReading(dominantElement, secondaryElement);
        
        return {
            dominantElement,
            secondaryElement,
            energyReading,
            personalGuidance: generatePersonalGuidance(),
            mysticNumbers: generateMysticNumbers(),
            elementalBalance: activeElements,
            timestamp: new Date()
        };
    };

    const findDominantElement = () => {
        if (!activeElements || Object.keys(activeElements).length === 0) {
            return mysticElements[Math.floor(Math.random() * mysticElements.length)];
        }
        
        const maxWeight = Math.max(...Object.values(activeElements));
        const dominantElementId = Object.keys(activeElements).find(key => activeElements[key] === maxWeight);
        return mysticElements.find(el => el.id === dominantElementId);
    };

    const findSecondaryElement = () => {
        const sorted = Object.entries(activeElements || {})
            .sort(([,a], [,b]) => b - a)
            .slice(1, 2);
        
        if (sorted.length > 0) {
            return mysticElements.find(el => el.id === sorted[0][0]);
        }
        return mysticElements[Math.floor(Math.random() * mysticElements.length)];
    };

    const generateEnergyReading = (primary, secondary) => {
        const energyTypes = {
            fire: '–í–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ',
            water: '–í–∞—à–∏ —ç–º–æ—Ü–∏–∏ –∏ –∏–Ω—Ç—É–∏—Ü–∏—è –≤–µ–¥—É—Ç –≤–∞—Å –≤–ø–µ—Ä–µ–¥',
            earth: '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ —Å–∏–ª—É –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç–∏',
            air: '–í–∞—à —É–º –∏ –æ–±—â–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
            spirit: '–î—É—Ö–æ–≤–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å –æ—Å–≤–µ—â–∞–µ—Ç –≤–∞—à –ø—É—Ç—å',
            moon: '–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω–æ—Å—è—Ç –≥–∞—Ä–º–æ–Ω–∏—é',
            sun: '–°–æ–ª–Ω–µ—á–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –¥–∞–µ—Ç –≤–∞–º —Å–∏–ª—É –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
            star: '–ó–≤–µ–∑–¥–Ω–∞—è —Å—É–¥—å–±–∞ –≤–µ–¥–µ—Ç –∫ –≤–∞—à–µ–º—É –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é'
        };
        
        return {
            primary: energyTypes[primary.id] || '–≠–Ω–µ—Ä–≥–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏',
            secondary: energyTypes[secondary.id] || '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —ç–Ω–µ—Ä–≥–∏—è',
            balance: `–ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É ${primary.energy.toLowerCase()} –∏ ${secondary.energy.toLowerCase()} —Å–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–∏–ª—É`
        };
    };

    const generatePersonalGuidance = () => {
        const guidanceMessages = [
            '–î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π',
            '–í—Ä–µ–º—è –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ',
            '–í–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º–∏ —Ü–∏–∫–ª–∞–º–∏',
            '–û—Ç–∫—Ä–æ–π—Ç–µ—Å—å –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤—è—Ç—Å—è –≤—Å–∫–æ—Ä–µ',
            '–ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –¥—É—Ö–æ–≤–Ω—ã–º –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–º –ø—Ä–∏–Ω–µ—Å–µ—Ç —É—Å–ø–µ—Ö',
            '–í–∞—à–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –¥—Ä—É–≥–∏–º –ª—é–¥—è–º',
            '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –¥–æ—Å—Ç–∏–≥–∞–µ—Ç —Å–≤–æ–µ–≥–æ –ø–∏–∫–∞'
        ];
        
        return guidanceMessages[Math.floor(Math.random() * guidanceMessages.length)];
    };

    const generateMysticNumbers = () => {
        if (!userBirthDate) {
            return [Math.floor(Math.random() * 9) + 1, Math.floor(Math.random() * 9) + 1];
        }
        
        const lifePathNumber = calculateLifePathNumber(userBirthDate);
        const secondNumber = (lifePathNumber + new Date().getDate()) % 9 + 1;
        
        return [lifePathNumber, secondNumber];
    };

    const resetCircle = () => {
        setIsActive(false);
        setMysticData(null);
        setIsLoading(false);
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        mysticElements.forEach(element => {
            const elementDiv = document.getElementById(`element-${element.id}`);
            if (elementDiv) {
                elementDiv.classList.remove('mystic-element--active');
            }
        });
    };

    return (
        <div className="mystic-circle">
            <div className="mystic-circle__container" ref={circleRef}>
                
                {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä—É–≥ */}
                <div className={`mystic-circle__main ${isActive ? 'mystic-circle__main--active' : ''}`}>
                    
                    {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç */}
                    <div className="mystic-circle__center">
                        {isLoading ? (
                            <div className="mystic-circle__loading">
                                <div className="loading-symbol">üîÆ</div>
                                <p>–°—á–∏—Ç—ã–≤–∞—é —ç–Ω–µ—Ä–≥–∏—é...</p>
                            </div>
                        ) : mysticData ? (
                            <div className="mystic-circle__result">
                                <div className="dominant-elements">
                                    <span className="primary-element">
                                        {mysticData.dominantElement?.symbol}
                                    </span>
                                    <span className="secondary-element">
                                        {mysticData.secondaryElement?.symbol}
                                    </span>
                                </div>
                                <p className="energy-name">
                                    {mysticData.dominantElement?.energy}
                                </p>
                            </div>
                        ) : (
                            <div className="mystic-circle__inactive">
                                <div className="circle-symbol">üîÆ</div>
                                <p>–ö–æ—Å–Ω–∏—Ç–µ—Å—å –∫—Ä—É–≥–∞</p>
                            </div>
                        )}
                    </div>
                    
                    {/* –≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∫—Ä—É–≥—É */}
                    {mysticElements.map((element, index) => {
                        const angle = (index * 360) / mysticElements.length;
                        const weight = activeElements[element.id] || 0;
                        
                        return (
                            <div
                                key={element.id}
                                id={`element-${element.id}`}
                                className="mystic-element"
                                style={{
                                    transform: `rotate(${angle}deg) translateY(-120px) rotate(-${angle}deg)`,
                                    '--element-color': element.color,
                                    '--weight': weight
                                }}
                            >
                                <div className="element-symbol">{element.symbol}</div>
                                <div className="element-name">{element.name}</div>
                                {weight > 0 && (
                                    <div className="element-weight">{weight}</div>
                                )}
                            </div>
                        );
                    })}
                </div>
                
                {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                <div className="mystic-circle__controls">
                    {!isActive && !mysticData && (
                        <Button 
                            onClick={activateMysticCircle}
                            disabled={isLoading}
                            variant="primary"
                            size="large"
                            className="activate-button"
                        >
                            üîÆ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—Ä—É–≥
                        </Button>
                    )}
                    
                    {mysticData && (
                        <div className="circle-actions">
                            <Button 
                                onClick={resetCircle}
                                variant="outline"
                            >
                                üîÑ –ù–æ–≤–æ–µ —á—Ç–µ–Ω–∏–µ
                            </Button>
                            <Button 
                                onClick={() => {/* –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}}
                                variant="primary"
                            >
                                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                            </Button>
                        </div>
                    )}
                </div>
            </div>
            
            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á—Ç–µ–Ω–∏—è */}
            {mysticData && (
                <div className="mystic-reading">
                    <div className="reading-section">
                        <h4>üåü –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ</h4>
                        <p className="primary-energy">{mysticData.energyReading.primary}</p>
                        <p className="secondary-energy">{mysticData.energyReading.secondary}</p>
                        <p className="balance-energy">{mysticData.energyReading.balance}</p>
                    </div>
                    
                    <div className="reading-section">
                        <h4>üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ</h4>
                        <p className="guidance-text">{mysticData.personalGuidance}</p>
                    </div>
                    
                    <div className="reading-section">
                        <h4>üî¢ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞</h4>
                        <div className="mystic-numbers">
                            {mysticData.mysticNumbers.map((number, index) => (
                                <div key={index} className="mystic-number">
                                    <span className="number">{number}</span>
                                    <span className="number-meaning">
                                        {NUMEROLOGY_NUMBERS[number]?.keywords[0] || '–¢–∞–π–Ω–∞'}
                                    </span>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default MysticCircle;