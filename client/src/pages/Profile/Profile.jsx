// client/src/pages/Profile/Profile.jsx
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../store/authStore';
import { useUserStore } from '../../store/userStore';
import { useSettingsStore } from '../../store/settingsStore';
import { getUserProfile, updateUserProfile } from '../../services/api';
import { formatDate, isValidEmail } from '../../utils/helpers';
import { THEMES, LANGUAGES, SUCCESS_MESSAGES } from '../../utils/constants';
import Button from '../../components/common/Button';
import Loading from '../../components/common/Loading';
import Modal from '../../components/common/Modal';
import './Profile.css';

const Profile = () => {
  const { user, setUser, isAuthenticated, logout } = useAuthStore();
  const { preferences, setPreferences } = useUserStore();
  const { theme, setTheme, language, setLanguage } = useSettingsStore();
  
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [deleteModalOpen, setDeleteModalOpen] = useState(false);
  const [avatarModalOpen, setAvatarModalOpen] = useState(false);
  const [exportModalOpen, setExportModalOpen] = useState(false);
  const [notifications, setNotifications] = useState([]);
  
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    bio: '',
    birthDate: '',
    timezone: 'Europe/Moscow'
  });

  const [settingsData, setSettingsData] = useState({
    theme: theme || THEME_CONFIG.AUTO,
    language: language || LOCALES.RU,
    notifications: {
      daily: true,
      readings: true,
      premium: true,
      marketing: false
    },
    privacy: {
      showProfile: true,
      showReadings: false,
      showStatistics: true
    }
  });

  const [avatarFile, setAvatarFile] = useState(null);
  const [avatarPreview, setAvatarPreview] = useState(null);

  useEffect(() => {
    if (user) {
      setFormData({
        firstName: user.firstName || '',
        lastName: user.lastName || '',
        email: user.email || '',
        bio: user.bio || '',
        birthDate: user.birthDate ? user.birthDate.split('T')[0] : '',
        timezone: user.timezone || 'Europe/Moscow'
      });
    }
  }, [user]);

  useEffect(() => {
    if (preferences) {
      setSettingsData(prev => ({
        ...prev,
        notifications: { ...prev.notifications, ...preferences.notifications },
        privacy: { ...prev.privacy, ...preferences.privacy }
      }));
    }
  }, [preferences]);

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSettingsChange = (section, field, value) => {
    setSettingsData(prev => ({
      ...prev,
      [section]: {
        ...prev[section],
        [field]: value
      }
    }));
  };

  const handleSaveProfile = async () => {
    try {
      setSaving(true);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!formData.firstName.trim()) {
        addNotification('–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'error');
        return;
      }
      
      if (formData.email && !isValidEmail(formData.email)) {
        addNotification('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å', 'error');
        return;
      }

      const updatedUser = await updateProfile({
        ...formData,
        preferences: {
          notifications: settingsData.notifications,
          privacy: settingsData.privacy
        }
      });
      
      setUser(updatedUser);
      setPreferences(updatedUser.preferences);
      addNotification(SUCCESS_MESSAGES.PROFILE_UPDATED, 'success');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      addNotification(ERROR_MESSAGES.NETWORK_ERROR, 'error');
    } finally {
      setSaving(false);
    }
  };

  const handleAvatarUpload = async () => {
    if (!avatarFile) return;

    try {
      setLoading(true);
      const avatarUrl = await uploadAvatar(avatarFile);
      const updatedUser = { ...user, avatar: avatarUrl };
      setUser(updatedUser);
      setAvatarModalOpen(false);
      setAvatarFile(null);
      setAvatarPreview(null);
      addNotification('–ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
      addNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleAvatarSelect = (event) => {
    const file = event.target.files[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) {
        addNotification('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB', 'error');
        return;
      }
      
      if (!file.type.startsWith('image/')) {
        addNotification('–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
        return;
      }

      setAvatarFile(file);
      const reader = new FileReader();
      reader.onload = (e) => setAvatarPreview(e.target.result);
      reader.readAsDataURL(file);
    }
  };

  const handleDeleteAccount = async () => {
    try {
      setLoading(true);
      await deleteAccount();
      logout();
      addNotification('–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω', 'info');
      window.location.href = ROUTES.HOME;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
      addNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞', 'error');
    } finally {
      setLoading(false);
      setDeleteModalOpen(false);
    }
  };

  const handleExportData = async () => {
    try {
      setLoading(true);
      const userData = await exportUserData();
      const blob = new Blob([JSON.stringify(userData, null, 2)], { 
        type: 'application/json' 
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `mistika_user_data_${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      setExportModalOpen(false);
      addNotification('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
      addNotification('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleThemeChange = (newTheme) => {
    setTheme(newTheme);
    setSettingsData(prev => ({ ...prev, theme: newTheme }));
  };

  const handleLanguageChange = (newLanguage) => {
    setLanguage(newLanguage);
    setSettingsData(prev => ({ ...prev, language: newLanguage }));
  };

  const addNotification = (message, type) => {
    const notification = {
      id: Date.now(),
      message,
      type,
      timestamp: new Date()
    };
    setNotifications(prev => [notification, ...prev.slice(0, 4)]);
    
    setTimeout(() => {
      setNotifications(prev => prev.filter(n => n.id !== notification.id));
    }, 5000);
  };

  if (!isAuthenticated) {
    return (
      <div className="profile-page">
        <div className="auth-required">
          <h2>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
          <p>–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ—Ñ–∏–ª–µ–º.</p>
          <Button variant="primary" onClick={() => window.location.href = ROUTES.HOME}>
            –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="profile-page">
      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      {notifications.length > 0 && (
        <div className="notifications">
          {notifications.map(notification => (
            <div
              key={notification.id}
              className={`notification notification-${notification.type}`}
            >
              {notification.message}
            </div>
          ))}
        </div>
      )}

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="profile-header">
        <h1>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</h1>
        <p>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</p>
      </div>

      <div className="profile-content">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="profile-section">
          <div className="section-header">
            <h2>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            <p>–í–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ</p>
          </div>

          <div className="profile-form">
            {/* –ê–≤–∞—Ç–∞—Ä */}
            <div className="avatar-section">
              <div className="avatar-container">
                {user?.avatar ? (
                  <img src={user.avatar} alt="–ê–≤–∞—Ç–∞—Ä" className="avatar-image" />
                ) : (
                  <div className="avatar-placeholder">
                    {(formData.firstName?.[0] || user?.username?.[0] || '?').toUpperCase()}
                  </div>
                )}
                <button
                  className="avatar-edit-button"
                  onClick={() => setAvatarModalOpen(true)}
                >
                  üì∑
                </button>
              </div>
              <div className="avatar-info">
                <h4>{formData.firstName || user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</h4>
                <p>–£—á–∞—Å—Ç–Ω–∏–∫ —Å {formatDate(user?.createdAt)}</p>
              </div>
            </div>

            {/* –ü–æ–ª—è —Ñ–æ—Ä–º—ã */}
            <div className="form-grid">
              <div className="form-group">
                <label htmlFor="firstName">–ò–º—è *</label>
                <input
                  id="firstName"
                  type="text"
                  value={formData.firstName}
                  onChange={(e) => handleInputChange('firstName', e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                  required
                />
              </div>

              <div className="form-group">
                <label htmlFor="lastName">–§–∞–º–∏–ª–∏—è</label>
                <input
                  id="lastName"
                  type="text"
                  value={formData.lastName}
                  onChange={(e) => handleInputChange('lastName', e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é"
                />
              </div>

              <div className="form-group">
                <label htmlFor="email">Email</label>
                <input
                  id="email"
                  type="email"
                  value={formData.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  placeholder="your@email.com"
                />
              </div>

              <div className="form-group">
                <label htmlFor="birthDate">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</label>
                <input
                  id="birthDate"
                  type="date"
                  value={formData.birthDate}
                  onChange={(e) => handleInputChange('birthDate', e.target.value)}
                />
              </div>

              <div className="form-group full-width">
                <label htmlFor="bio">–û —Å–µ–±–µ</label>
                <textarea
                  id="bio"
                  value={formData.bio}
                  onChange={(e) => handleInputChange('bio', e.target.value)}
                  placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ..."
                  rows={3}
                />
              </div>

              <div className="form-group">
                <label htmlFor="timezone">–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</label>
                <select
                  id="timezone"
                  value={formData.timezone}
                  onChange={(e) => handleInputChange('timezone', e.target.value)}
                >
                  <option value="Europe/Moscow">–ú–æ—Å–∫–≤–∞ (UTC+3)</option>
                  <option value="Europe/Kiev">–ö–∏–µ–≤ (UTC+2)</option>
                  <option value="Asia/Almaty">–ê–ª–º–∞—Ç—ã (UTC+6)</option>
                  <option value="Asia/Tashkent">–¢–∞—à–∫–µ–Ω—Ç (UTC+5)</option>
                  <option value="Europe/Minsk">–ú–∏–Ω—Å–∫ (UTC+3)</option>
                </select>
              </div>
            </div>
          </div>
        </div>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */}
        <div className="profile-section">
          <div className="section-header">
            <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h2>
            <p>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</p>
          </div>

          <div className="settings-grid">
            {/* –¢–µ–º–∞ */}
            <div className="setting-group">
              <h4>–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</h4>
              <div className="theme-options">
                {Object.entries(THEME_CONFIG).map(([key, value]) => (
                  <label key={key} className="theme-option">
                    <input
                      type="radio"
                      name="theme"
                      value={value}
                      checked={settingsData.theme === value}
                      onChange={() => handleThemeChange(value)}
                    />
                    <span className="theme-label">
                      {value === THEME_CONFIG.DARK && 'üåô –¢–µ–º–Ω–∞—è'}
                      {value === THEME_CONFIG.LIGHT && '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è'}
                      {value === THEME_CONFIG.AUTO && 'üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è'}
                    </span>
                  </label>
                ))}
              </div>
            </div>

            {/* –Ø–∑—ã–∫ */}
            <div className="setting-group">
              <h4>–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</h4>
              <select
                value={settingsData.language}
                onChange={(e) => handleLanguageChange(e.target.value)}
                className="language-select"
              >
                <option value={LOCALES.RU}>üá∑üá∫ –†—É—Å—Å–∫–∏–π</option>
                <option value={LOCALES.EN}>üá∫üá∏ English</option>
                <option value={LOCALES.ES}>üá™üá∏ Espa√±ol</option>
                <option value={LOCALES.FR}>üá´üá∑ Fran√ßais</option>
                <option value={LOCALES.DE}>üá©üá™ Deutsch</option>
              </select>
            </div>

            {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
            <div className="setting-group">
              <h4>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
              <div className="notifications-settings">
                {Object.entries(settingsData.notifications).map(([key, value]) => (
                  <label key={key} className="notification-option">
                    <input
                      type="checkbox"
                      checked={value}
                      onChange={(e) => handleSettingsChange('notifications', key, e.target.checked)}
                    />
                    <span className="notification-label">
                      {key === 'daily' && '–î–Ω–µ–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã'}
                      {key === 'readings' && '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏–π'}
                      {key === 'premium' && '–ü—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'}
                      {key === 'marketing' && '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}
                    </span>
                  </label>
                ))}
              </div>
            </div>

            {/* –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å */}
            <div className="setting-group">
              <h4>–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å</h4>
              <div className="privacy-settings">
                {Object.entries(settingsData.privacy).map(([key, value]) => (
                  <label key={key} className="privacy-option">
                    <input
                      type="checkbox"
                      checked={value}
                      onChange={(e) => handleSettingsChange('privacy', key, e.target.checked)}
                    />
                    <span className="privacy-label">
                      {key === 'showProfile' && '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–∑—å—è–º'}
                      {key === 'showReadings' && '–î–µ–ª–∏—Ç—å—Å—è –≥–∞–¥–∞–Ω–∏—è–º–∏'}
                      {key === 'showStatistics' && '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'}
                    </span>
                  </label>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* –î–µ–π—Å—Ç–≤–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ */}
        <div className="profile-section">
          <div className="section-header">
            <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏</h2>
            <p>–≠–∫—Å–ø–æ—Ä—Ç, —É–¥–∞–ª–µ–Ω–∏–µ –∏ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏</p>
          </div>

          <div className="data-actions">
            <Button
              variant="outline"
              onClick={() => setExportModalOpen(true)}
              disabled={loading}
            >
              üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
            </Button>
            
            <Button
              variant="danger"
              onClick={() => setDeleteModalOpen(true)}
              disabled={loading}
            >
              üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
            </Button>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
        <div className="profile-actions">
          <Button
            variant="primary"
            size="lg"
            onClick={handleSaveProfile}
            disabled={saving}
          >
            {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
          </Button>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–≤–∞—Ç–∞—Ä–∞ */}
      <Modal
        isOpen={avatarModalOpen}
        onClose={() => setAvatarModalOpen(false)}
        title="–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä"
      >
        <div className="avatar-modal-content">
          <div className="avatar-upload">
            {avatarPreview ? (
              <div className="avatar-preview">
                <img src={avatarPreview} alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" />
              </div>
            ) : (
              <div className="upload-area">
                <div className="upload-icon">üì∑</div>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</p>
              </div>
            )}
            
            <input
              type="file"
              accept="image/*"
              onChange={handleAvatarSelect}
              style={{ display: 'none' }}
              id="avatar-input"
            />
            
            <div className="avatar-actions">
              <Button
                variant="outline"
                onClick={() => document.getElementById('avatar-input').click()}
              >
                –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
              </Button>
              
              {avatarFile && (
                <Button
                  variant="primary"
                  onClick={handleAvatarUpload}
                  disabled={loading}
                >
                  {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                </Button>
              )}
            </div>
          </div>
        </div>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
      <Modal
        isOpen={exportModalOpen}
        onClose={() => setExportModalOpen(false)}
        title="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
      >
        <div className="export-modal-content">
          <p>–≠–∫—Å–ø–æ—Ä—Ç –≤–∫–ª—é—á–∞–µ—Ç:</p>
          <ul>
            <li>–ü—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</li>
            <li>–ò—Å—Ç–æ—Ä–∏—è –≥–∞–¥–∞–Ω–∏–π</li>
            <li>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</li>
            <li>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã</li>
          </ul>
          <div className="modal-actions">
            <Button
              variant="secondary"
              onClick={() => setExportModalOpen(false)}
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button
              variant="primary"
              onClick={handleExportData}
              disabled={loading}
            >
              {loading ? '–≠–∫—Å–ø–æ—Ä—Ç...' : '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å'}
            </Button>
          </div>
        </div>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è */}
      <Modal
        isOpen={deleteModalOpen}
        onClose={() => setDeleteModalOpen(false)}
        title="–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"
      >
        <div className="delete-modal-content">
          <div className="warning-icon">‚ö†Ô∏è</div>
          <h3>–í—ã —É–≤–µ—Ä–µ–Ω—ã?</h3>
          <p>
            –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è –∏—Å—Ç–æ—Ä–∏—é –≥–∞–¥–∞–Ω–∏–π 
            –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã.
          </p>
          <div className="modal-actions">
            <Button
              variant="secondary"
              onClick={() => setDeleteModalOpen(false)}
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button
              variant="danger"
              onClick={handleDeleteAccount}
              disabled={loading}
            >
              {loading ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'}
            </Button>
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default Profile;