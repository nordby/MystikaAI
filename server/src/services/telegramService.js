// server/src/services/telegramService.js
const axios = require('axios');
const crypto = require('crypto');
const logger = require('../utils/logger');
const { User, Reading, Subscription } = require('../models');

class TelegramService {
  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN;
    this.botUsername = process.env.TELEGRAM_BOT_USERNAME;
    this.webhookUrl = process.env.TELEGRAM_WEBHOOK_URL;
    this.webAppUrl = process.env.WEBAPP_URL || 'https://your-domain.com';
    this.apiUrl = `https://api.telegram.org/bot${this.botToken}`;
    
    if (!this.botToken) {
      logger.error('TELEGRAM_BOT_TOKEN is not set');
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞
   */
  async setWebhook() {
    try {
      const response = await axios.post(`${this.apiUrl}/setWebhook`, {
        url: this.webhookUrl,
        allowed_updates: [
          'message',
          'callback_query',
          'inline_query',
          'pre_checkout_query',
          'successful_payment'
        ],
        drop_pending_updates: true
      });

      if (response.data.ok) {
        logger.info('Telegram webhook set successfully', {
          webhookUrl: this.webhookUrl
        });
      } else {
        logger.error('Failed to set Telegram webhook', {
          error: response.data.description
        });
      }

      return response.data;

    } catch (error) {
      logger.error('Error setting Telegram webhook', {
        error: error.message
      });
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ webhook
   */
  async deleteWebhook() {
    try {
      const response = await axios.post(`${this.apiUrl}/deleteWebhook`);
      
      if (response.data.ok) {
        logger.info('Telegram webhook deleted successfully');
      }

      return response.data;

    } catch (error) {
      logger.error('Error deleting Telegram webhook', {
        error: error.message
      });
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
   */
  async getBotInfo() {
    try {
      const response = await axios.get(`${this.apiUrl}/getMe`);
      return response.data;

    } catch (error) {
      logger.error('Error getting bot info', {
        error: error.message
      });
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendMessage(chatId, text, options = {}) {
    try {
      const messageData = {
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        ...options
      };

      const response = await axios.post(`${this.apiUrl}/sendMessage`, messageData);
      
      if (response.data.ok) {
        logger.debug('Message sent successfully', {
          chatId,
          messageId: response.data.result.message_id
        });
      }

      return response.data;

    } catch (error) {
      logger.error('Error sending message', {
        error: error.message,
        chatId,
        text: text.substring(0, 100)
      });
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
   */
  async sendPhoto(chatId, photo, caption = '', options = {}) {
    try {
      const photoData = {
        chat_id: chatId,
        photo: photo,
        caption: caption,
        parse_mode: 'HTML',
        ...options
      };

      const response = await axios.post(`${this.apiUrl}/sendPhoto`, photoData);
      return response.data;

    } catch (error) {
      logger.error('Error sending photo', {
        error: error.message,
        chatId
      });
      throw error;
    }
  }

  /**
   * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async editMessage(chatId, messageId, text, options = {}) {
    try {
      const editData = {
        chat_id: chatId,
        message_id: messageId,
        text: text,
        parse_mode: 'HTML',
        ...options
      };

      const response = await axios.post(`${this.apiUrl}/editMessageText`, editData);
      return response.data;

    } catch (error) {
      logger.error('Error editing message', {
        error: error.message,
        chatId,
        messageId
      });
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   */
  createInlineKeyboard(buttons) {
    return {
      reply_markup: {
        inline_keyboard: buttons
      }
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è WebApp
   */
  createWebAppButton(text, url = null) {
    return {
      text: text,
      web_app: {
        url: url || this.webAppUrl
      }
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async handleMessage(message) {
    try {
      const chatId = message.chat.id;
      const userId = message.from.id;
      const text = message.text;

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let user = await this.getOrCreateUser(message.from);

      if (text?.startsWith('/start')) {
        await this.handleStartCommand(chatId, user, text);
      } else if (text?.startsWith('/daily')) {
        await this.handleDailyCommand(chatId, user);
      } else if (text?.startsWith('/premium')) {
        await this.handlePremiumCommand(chatId, user);
      } else if (text?.startsWith('/help')) {
        await this.handleHelpCommand(chatId);
      } else if (text?.startsWith('/stats')) {
        await this.handleStatsCommand(chatId, user);
      } else {
        await this.handleUnknownCommand(chatId);
      }

    } catch (error) {
      logger.error('Error handling message', {
        error: error.message,
        message
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  async handleCallbackQuery(callbackQuery) {
    try {
      const chatId = callbackQuery.message.chat.id;
      const messageId = callbackQuery.message.message_id;
      const data = callbackQuery.data;
      const userId = callbackQuery.from.id;

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
      await this.answerCallbackQuery(callbackQuery.id);

      const user = await User.findOne({
        where: { telegramId: userId.toString() }
      });

      if (data.startsWith('daily_card')) {
        await this.handleDailyCardCallback(chatId, messageId, user);
      } else if (data.startsWith('premium_info')) {
        await this.handlePremiumInfoCallback(chatId, messageId, user);
      } else if (data.startsWith('open_app')) {
        await this.handleOpenAppCallback(chatId, messageId, user);
      }

    } catch (error) {
      logger.error('Error handling callback query', {
        error: error.message,
        callbackQuery
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
   */
  async handleStartCommand(chatId, user, text) {
    const referralCode = text.split(' ')[1];
    
    if (referralCode && referralCode !== user.telegramId) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
      await this.handleReferral(user, referralCode);
    }

    const welcomeText = `
üîÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MISTIKA!</b>

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã –í—Å–µ–ª–µ–Ω–Ω–æ–π —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ, –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—é –∏ –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å.

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
üé¥ –ì–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ
üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã  
üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
ü§ñ AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –≥–∞–¥–∞–Ω–∏—è

<b>–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>
    `;

    const keyboard = this.createInlineKeyboard([
      [this.createWebAppButton('üîÆ –û—Ç–∫—Ä—ã—Ç—å MISTIKA')],
      [
        { text: 'üé¥ –î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞', callback_data: 'daily_card' },
        { text: 'üíé Premium', callback_data: 'premium_info' }
      ],
      [
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
        { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }
      ]
    ]);

    await this.sendMessage(chatId, welcomeText, keyboard);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /daily
   */
  async handleDailyCommand(chatId, user) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
      const today = new Date().toDateString();
      const todaysReadings = await Reading.count({
        where: {
          userId: user.id,
          type: 'daily_card',
          createdAt: {
            [require('sequelize').Op.gte]: new Date(today)
          }
        }
      });

      if (!user.isPremium && todaysReadings >= 1) {
        const upgradeText = `
‚è∞ <b>–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω</b>

–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –¥–Ω–µ–≤–Ω—É—é –∫–∞—Ä—Ç—É —Å–µ–≥–æ–¥–Ω—è.
–û—Ñ–æ—Ä–º–∏—Ç–µ Premium –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –≥–∞–¥–∞–Ω–∏–π!
        `;

        const keyboard = this.createInlineKeyboard([
          [{ text: 'üíé –ü–æ–ª—É—á–∏—Ç—å Premium', callback_data: 'premium_info' }],
          [this.createWebAppButton('üîÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')]
        ]);

        await this.sendMessage(chatId, upgradeText, keyboard);
        return;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–Ω–µ–≤–Ω—É—é –∫–∞—Ä—Ç—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
      const cards = await this.generateDailyCard(user);
      
      const cardText = `
üé¥ <b>–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è</b>

<b>${cards.name}</b>
${cards.meaning}

<i>${cards.advice}</i>

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏!
      `;

      const keyboard = this.createInlineKeyboard([
        [this.createWebAppButton('üîÆ –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è')],
        [{ text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', callback_data: 'share_reading' }]
      ]);

      await this.sendPhoto(chatId, cards.imageUrl, cardText, keyboard);

    } catch (error) {
      logger.error('Error handling daily command', {
        error: error.message,
        chatId,
        userId: user.id
      });

      await this.sendMessage(chatId, 
        'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–π –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /premium
   */
  async handlePremiumCommand(chatId, user) {
    const subscription = await Subscription.getActiveByUser(user.id);
    
    if (subscription) {
      const premiumText = `
üëë <b>MISTIKA Premium –∞–∫—Ç–∏–≤–Ω–∞</b>

<b>–°—Ç–∞—Ç—É—Å:</b> ${subscription.status}
<b>–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> ${subscription.getDaysRemaining()} –¥–Ω–µ–π
<b>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ:</b> ${subscription.autoRenewal ? '–í–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}

<b>–í–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è
‚úÖ AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ –≥–∞–¥–∞–Ω–∏—è
‚úÖ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã
      `;

      const keyboard = this.createInlineKeyboard([
        [this.createWebAppButton('üîÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')],
        [{ text: '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π', callback_data: 'manage_subscription' }]
      ]);

      await this.sendMessage(chatId, premiumText, keyboard);
    } else {
      const premiumText = `
üíé <b>MISTIKA Premium</b>

<b>–û—Ç–∫—Ä–æ–π—Ç–µ –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
üîÆ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è
ü§ñ AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –≥–∞–¥–∞–Ω–∏—è (60 –º–∏–Ω/–¥–µ–Ω—å)
üì∏ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
‚ú® –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã
üìú –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –≥–∞–¥–∞–Ω–∏–π
üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

<b>–ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:</b>
üìÖ –ú–µ—Å—è—Ü - 299‚ÇΩ
üí∞ –ö–≤–∞—Ä—Ç–∞–ª - 799‚ÇΩ (-10%)
üéÅ –ì–æ–¥ - 2999‚ÇΩ (-20%)
      `;

      const keyboard = this.createInlineKeyboard([
        [{ text: 'üíé –û—Ñ–æ—Ä–º–∏—Ç—å Premium', callback_data: 'buy_premium' }],
        [this.createWebAppButton('üîÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')],
        [{ text: 'üéÅ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ', callback_data: 'free_trial' }]
      ]);

      await this.sendMessage(chatId, premiumText, keyboard);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
   */
  async handleHelpCommand(chatId) {
    const helpText = `
‚ùì <b>–ü–æ–º–æ—â—å MISTIKA</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/daily - –î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞
/premium - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Premium
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
üîÆ –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å MISTIKA" –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
üé¥ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /daily –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–Ω–µ–≤–Ω–æ–π –∫–∞—Ä—Ç—ã
üíé –û—Ñ–æ—Ä–º–∏—Ç–µ Premium –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
üìß Email: support@mistika.app
üí¨ Telegram: @mistika_support
    `;

    const keyboard = this.createInlineKeyboard([
      [this.createWebAppButton('üîÆ –û—Ç–∫—Ä—ã—Ç—å MISTIKA')],
      [{ text: 'üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', url: 'https://t.me/mistika_support' }]
    ]);

    await this.sendMessage(chatId, helpText, keyboard);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
   */
  async handleStatsCommand(chatId, user) {
    try {
      const [totalReadings, todayReadings, subscription] = await Promise.all([
        Reading.count({ where: { userId: user.id } }),
        Reading.count({
          where: {
            userId: user.id,
            createdAt: {
              [require('sequelize').Op.gte]: new Date().setHours(0, 0, 0, 0)
            }
          }
        }),
        Subscription.getActiveByUser(user.id)
      ]);

      const statsText = `
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b>–ì–∞–¥–∞–Ω–∏—è:</b>
üìÖ –°–µ–≥–æ–¥–Ω—è: ${todayReadings}
üìà –í—Å–µ–≥–æ: ${totalReadings}

<b>–°—Ç–∞—Ç—É—Å:</b> ${subscription ? 'üëë Premium' : 'üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π'}
<b>–£—á–∞—Å—Ç–Ω–∏–∫ —Å:</b> ${user.createdAt.toLocaleDateString('ru-RU')}

${subscription ? 
  `<b>Premium –¥–æ:</b> ${subscription.endDate.toLocaleDateString('ru-RU')}` : 
  `<b>–õ–∏–º–∏—Ç —Å–µ–≥–æ–¥–Ω—è:</b> ${3 - todayReadings} –≥–∞–¥–∞–Ω–∏–π`
}
      `;

      const keyboard = this.createInlineKeyboard([
        [this.createWebAppButton('üîÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')],
        ...(subscription ? [] : [[{ text: 'üíé –ü–æ–ª—É—á–∏—Ç—å Premium', callback_data: 'premium_info' }]])
      ]);

      await this.sendMessage(chatId, statsText, keyboard);

    } catch (error) {
      logger.error('Error handling stats command', {
        error: error.message,
        chatId,
        userId: user.id
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
   */
  async handleUnknownCommand(chatId) {
    const unknownText = `
ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.
    `;

    const keyboard = this.createInlineKeyboard([
      [this.createWebAppButton('üîÆ –û—Ç–∫—Ä—ã—Ç—å MISTIKA')],
      [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
    ]);

    await this.sendMessage(chatId, unknownText, keyboard);
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ callback –∑–∞–ø—Ä–æ—Å–∞
   */
  async answerCallbackQuery(callbackQueryId, text = null, showAlert = false) {
    try {
      await axios.post(`${this.apiUrl}/answerCallbackQuery`, {
        callback_query_id: callbackQueryId,
        text: text,
        show_alert: showAlert
      });

    } catch (error) {
      logger.error('Error answering callback query', {
        error: error.message,
        callbackQueryId
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –¥–∞–Ω–Ω—ã—Ö
   */
  async getOrCreateUser(telegramUser) {
    try {
      let user = await User.findOne({
        where: { telegramId: telegramUser.id.toString() }
      });

      if (!user) {
        user = await User.create({
          telegramId: telegramUser.id.toString(),
          firstName: telegramUser.first_name,
          lastName: telegramUser.last_name,
          username: telegramUser.username,
          languageCode: telegramUser.language_code || 'ru',
          isPremium: false,
          isActive: true
        });

        logger.info('New user created from Telegram', {
          userId: user.id,
          telegramId: telegramUser.id
        });
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await user.update({
          firstName: telegramUser.first_name,
          lastName: telegramUser.last_name,
          username: telegramUser.username,
          languageCode: telegramUser.language_code || user.languageCode,
          lastSeen: new Date()
        });
      }

      return user;

    } catch (error) {
      logger.error('Error getting or creating user', {
        error: error.message,
        telegramUser
      });
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
   */
  async handleReferral(user, referralCode) {
    try {
      const referrer = await User.findOne({
        where: { telegramId: referralCode }
      });

      if (referrer && referrer.id !== user.id) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        await user.update({
          referredBy: referrer.id
        });

        // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏ Premium)
        logger.info('Referral processed', {
          userId: user.id,
          referrerId: referrer.id
        });
      }

    } catch (error) {
      logger.error('Error handling referral', {
        error: error.message,
        userId: user.id,
        referralCode
      });
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–Ω–µ–≤–Ω–æ–π –∫–∞—Ä—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  async generateDailyCard(user) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const cards = [
      {
        name: '–°–æ–ª–Ω—Ü–µ',
        meaning: '–†–∞–¥–æ—Å—Ç—å, —É—Å–ø–µ—Ö, –ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è',
        advice: '–°–µ–≥–æ–¥–Ω—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π',
        imageUrl: 'https://example.com/tarot/sun.jpg'
      },
      {
        name: '–õ—É–Ω–∞',
        meaning: '–ò–Ω—Ç—É–∏—Ü–∏—è, —Ç–∞–π–Ω—ã, –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ',
        advice: '–î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è',
        imageUrl: 'https://example.com/tarot/moon.jpg'
      },
      {
        name: '–ó–≤–µ–∑–¥–∞',
        meaning: '–ù–∞–¥–µ–∂–¥–∞, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, –¥—É—Ö–æ–≤–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
        advice: '–°–ª–µ–¥—É–π—Ç–µ –∑–∞ —Å–≤–æ–∏–º–∏ –º–µ—á—Ç–∞–º–∏',
        imageUrl: 'https://example.com/tarot/star.jpg'
      }
    ];

    // –ü—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const today = new Date().toDateString();
    const hash = crypto.createHash('md5').update(today + user.id).digest('hex');
    const index = parseInt(hash.substring(0, 2), 16) % cards.length;

    return cards[index];
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendNotification(telegramId, title, message, options = {}) {
    try {
      const text = `
<b>${title}</b>

${message}
      `;

      await this.sendMessage(telegramId, text, options);

    } catch (error) {
      logger.error('Error sending notification', {
        error: error.message,
        telegramId,
        title
      });
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp
   */
  validateWebAppData(initData) {
    try {
      const urlParams = new URLSearchParams(initData);
      const hash = urlParams.get('hash');
      urlParams.delete('hash');

      const dataCheckString = Array.from(urlParams.entries())
        .sort(([a], [b]) => a.localeCompare(b))
        .map(([key, value]) => `${key}=${value}`)
        .join('\n');

      const secretKey = crypto.createHmac('sha256', 'WebAppData').update(this.botToken).digest();
      const calculatedHash = crypto.createHmac('sha256', secretKey).update(dataCheckString).digest('hex');

      return calculatedHash === hash;

    } catch (error) {
      logger.error('Error validating WebApp data', {
        error: error.message
      });
      return false;
    }
  }
}

module.exports = new TelegramService();