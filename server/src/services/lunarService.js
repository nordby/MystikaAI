// server/src/services/lunarService.js
const logger = require('../utils/logger');

class LunarService {
  constructor() {
    this.lunarPhases = {
      NEW_MOON: {
        name: '–ù–æ–≤–æ–ª—É–Ω–∏–µ',
        emoji: 'üåë',
        energy: '–í—Ä–µ–º—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π',
        description: '–ü–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–µ–π –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π.',
        duration: [29, 30, 1],
        activities: {
          recommended: [
            '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤',
            '–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π',
            '–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑',
            '–û—á–∏—â–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞',
            '–ù–∞—á–∞–ª–æ –Ω–æ–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π'
          ],
          avoid: [
            '–ü—Ä–∏–Ω—è—Ç–∏–µ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π',
            '–ö—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏',
            '–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ —Å–ø–æ—Ä—ã'
          ]
        },
        tarotFocus: ['–±—É–¥—É—â–µ–µ', '–Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', '—Å–∫—Ä—ã—Ç—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª']
      },
      WAXING_CRESCENT: {
        name: '–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞',
        emoji: 'üåí',
        energy: '–í—Ä–µ–º—è —Ä–æ—Å—Ç–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è',
        description: '–ü–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è. –í—Ä–µ–º—è –≤–æ–ø–ª–æ—â–∞—Ç—å –ø–ª–∞–Ω—ã –≤ –¥–µ–π—Å—Ç–≤–∏–µ.',
        duration: [2, 3, 4, 5, 6, 7],
        activities: {
          recommended: [
            '–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Ü–µ–ª—è–º',
            '–ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ',
            '–ù–∞–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Å–≤—è–∑–µ–π',
            '–§–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
            '–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã'
          ],
          avoid: [
            '–ü–∞—Å—Å–∏–≤–Ω–æ—Å—Ç—å',
            '–û—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –¥–µ–ª',
            '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏'
          ]
        },
        tarotFocus: ['—Ä–∞–∑–≤–∏—Ç–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏', '—Ä–æ—Å—Ç', '–ø—Ä–æ–≥—Ä–µ—Å—Å']
      },
      FIRST_QUARTER: {
        name: '–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å',
        emoji: 'üåì',
        energy: '–í—Ä–µ–º—è –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π',
        description: '–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç—å. –í—Ä–µ–º—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –∏ –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏.',
        duration: [8],
        activities: {
          recommended: [
            '–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º',
            '–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π',
            '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã',
            '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ —Å–æ–±–æ–π',
            '–ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ö–æ–≤'
          ],
          avoid: [
            '–ò–∑–±–µ–≥–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º',
            '–ü—Ä–æ–º–µ–¥–ª–µ–Ω–∏–µ',
            '–£—Å—Ç—É–ø–∫–∏ –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º'
          ]
        },
        tarotFocus: ['–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è', '–≤—ã–±–æ—Ä', '—Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å']
      },
      WAXING_GIBBOUS: {
        name: '–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞ (–≤—ã–ø—É–∫–ª–∞—è)',
        emoji: 'üåî',
        energy: '–í—Ä–µ–º—è —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è',
        description: '–ü–µ—Ä–∏–æ–¥ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è. –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —É–ª—É—á—à–∞—Ç—å.',
        duration: [9, 10, 11, 12, 13, 14],
        activities: {
          recommended: [
            '–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
            '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–ª–∞–Ω–æ–≤',
            '–û–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ',
            '–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π',
            '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ'
          ],
          avoid: [
            '–°–∞–º–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ',
            '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏–∫–∏',
            '–°–ø–µ—à–∫–∞'
          ]
        },
        tarotFocus: ['—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ', '–∞–Ω–∞–ª–∏–∑', '–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞']
      },
      FULL_MOON: {
        name: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
        emoji: 'üåï',
        energy: '–í—Ä–µ–º—è –∫—É–ª—å–º–∏–Ω–∞—Ü–∏–∏ –∏ –æ–∑–∞—Ä–µ–Ω–∏–π',
        description: '–ü–µ—Ä–∏–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –í—Ä–µ–º—è —Å–±–æ—Ä–∞ —É—Ä–æ–∂–∞—è –∏ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è.',
        duration: [15],
        activities: {
          recommended: [
            '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤',
            '–ü—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—Ö–æ–≤',
            '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å',
            '–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç –Ω–µ–Ω—É–∂–Ω–æ–≥–æ',
            '–ú–æ—â–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã'
          ],
          avoid: [
            '–ù–∞—á–∞–ª–æ –Ω–æ–≤—ã—Ö –¥–µ–ª',
            '–í–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ —ç–º–æ—Ü–∏—è—Ö',
            '–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã'
          ]
        },
        tarotFocus: ['–∫—É–ª—å–º–∏–Ω–∞—Ü–∏—è', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', '–∏—Å—Ç–∏–Ω–∞']
      },
      WANING_GIBBOUS: {
        name: '–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞ (–≤—ã–ø—É–∫–ª–∞—è)',
        emoji: 'üåñ',
        energy: '–í—Ä–µ–º—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –æ–ø—ã—Ç–∞',
        description: '–ü–µ—Ä–∏–æ–¥ –¥–µ–ª–∏—Ç—å—Å—è –∑–Ω–∞–Ω–∏—è–º–∏ –∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å. –í—Ä–µ–º—è —É—á–∏—Ç—å –¥—Ä—É–≥–∏—Ö –∏ –æ—Ç–¥–∞–≤–∞—Ç—å.',
        duration: [16, 17, 18, 19, 20, 21],
        activities: {
          recommended: [
            '–û–±—É—á–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö',
            '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
            '–î–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º',
            '–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ',
            '–í—ã—Ä–∞–∂–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏'
          ],
          avoid: [
            '–≠–≥–æ–∏–∑–º',
            '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
            '–ñ–∞–¥–Ω–æ—Å—Ç—å'
          ]
        },
        tarotFocus: ['–ø–µ—Ä–µ–¥–∞—á–∞ –∑–Ω–∞–Ω–∏–π', '–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å', '–º—É–¥—Ä–æ—Å—Ç—å']
      },
      LAST_QUARTER: {
        name: '–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å',
        emoji: 'üåó',
        energy: '–í—Ä–µ–º—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–æ—â–µ–Ω–∏—è',
        description: '–ü–µ—Ä–∏–æ–¥ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∏ –ø—Ä–æ—â–µ–Ω–∏—è. –í—Ä–µ–º—è –∏–∑–±–∞–≤–ª—è—Ç—å—Å—è –æ—Ç –Ω–µ–Ω—É–∂–Ω–æ–≥–æ.',
        duration: [22],
        activities: {
          recommended: [
            '–ü—Ä–æ—â–µ–Ω–∏–µ –æ–±–∏–¥',
            '–ò–∑–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –Ω–µ–Ω—É–∂–Ω–æ–≥–æ',
            '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π',
            '–û—á–∏—â–µ–Ω–∏–µ',
            '–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤'
          ],
          avoid: [
            '–¶–µ–ø–ª—è–Ω–∏–µ –∑–∞ –ø—Ä–æ—à–ª–æ–µ',
            '–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–∞',
            '–ù–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞'
          ]
        },
        tarotFocus: ['–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ', '–ø—Ä–æ—â–µ–Ω–∏–µ', '–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ']
      },
      WANING_CRESCENT: {
        name: '–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞',
        emoji: 'üåò',
        energy: '–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
        description: '–ü–µ—Ä–∏–æ–¥ –ø–æ–∫–æ—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª. –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –Ω–æ–≤–æ–º—É —Ü–∏–∫–ª—É.',
        duration: [23, 24, 25, 26, 27, 28],
        activities: {
          recommended: [
            '–û—Ç–¥—ã—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ',
            '–ú–µ–¥–∏—Ç–∞—Ü–∏—è',
            '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ',
            '–£–µ–¥–∏–Ω–µ–Ω–∏–µ',
            '–î—É—Ö–æ–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏'
          ],
          avoid: [
            '–ê–∫—Ç–∏–≤–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
            '–°—Ç—Ä–µ—Å—Å',
            '–ü–µ—Ä–µ—É—Ç–æ–º–ª–µ–Ω–∏–µ'
          ]
        },
        tarotFocus: ['–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', '–ø–æ–∫–æ–π', '–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞']
      }
    };

    this.zodiacSigns = {
      ARIES: {
        name: '–û–≤–µ–Ω',
        emoji: '‚ôà',
        element: '–û–≥–æ–Ω—å',
        dates: { start: [3, 21], end: [4, 19] },
        energy: '–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ –∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ',
        qualities: ['—Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '—ç–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å', '–ø–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥—Å—Ç–≤–æ'],
        activities: ['–Ω–∞—á–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤', '—Å–ø–æ—Ä—Ç', '–ª–∏–¥–µ—Ä—Å—Ç–≤–æ'],
        avoid: ['–ø–∞—Å—Å–∏–≤–Ω–æ—Å—Ç—å', '–¥–æ–ª–≥–∏–µ —Ä–∞–∑–¥—É–º—å—è']
      },
      TAURUS: {
        name: '–¢–µ–ª–µ—Ü',
        emoji: '‚ôâ',
        element: '–ó–µ–º–ª—è',
        dates: { start: [4, 20], end: [5, 20] },
        energy: '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ—Å—Ç—å',
        qualities: ['–Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å', '–ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å', '–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å'],
        activities: ['—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '—Å–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ'],
        avoid: ['—Å–ø–µ—à–∫–∞', '—Ä–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è']
      },
      GEMINI: {
        name: '–ë–ª–∏–∑–Ω–µ—Ü—ã',
        emoji: '‚ôä',
        element: '–í–æ–∑–¥—É—Ö',
        dates: { start: [5, 21], end: [6, 20] },
        energy: '–û–±—â–µ–Ω–∏–µ –∏ –æ–±–º–µ–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π',
        qualities: ['–ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å'],
        activities: ['–æ–±—É—á–µ–Ω–∏–µ', '–æ–±—â–µ–Ω–∏–µ', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'],
        avoid: ['–∏–∑–æ–ª—è—Ü–∏—è', '–º–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å']
      },
      CANCER: {
        name: '–†–∞–∫',
        emoji: '‚ôã',
        element: '–í–æ–¥–∞',
        dates: { start: [6, 21], end: [7, 22] },
        energy: '–ó–∞–±–æ—Ç–∞ –∏ –∏–Ω—Ç—É–∏—Ü–∏—è',
        qualities: ['—ç–º–ø–∞—Ç–∏—è', '–∏–Ω—Ç—É–∏—Ü–∏—è', '–∑–∞–±–æ—Ç–ª–∏–≤–æ—Å—Ç—å'],
        activities: ['—Å–µ–º–µ–π–Ω—ã–µ –¥–µ–ª–∞', '—É—Ö–æ–¥ –∑–∞ –¥–æ–º–æ–º', '–∫—É–ª–∏–Ω–∞—Ä–∏—è'],
        avoid: ['–∞–≥—Ä–µ—Å—Å–∏—è', '–ø—É–±–ª–∏—á–Ω–æ—Å—Ç—å']
      },
      LEO: {
        name: '–õ–µ–≤',
        emoji: '‚ôå',
        element: '–û–≥–æ–Ω—å',
        dates: { start: [7, 23], end: [8, 22] },
        energy: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
        qualities: ['—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–≤–µ–ª–∏–∫–æ–¥—É—à–∏–µ', '—Ö–∞—Ä–∏–∑–º–∞'],
        activities: ['—Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã', '–ø—É–±–ª–∏—á–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'],
        avoid: ['—Å–∫—Ä–æ–º–Ω–æ—Å—Ç—å', '—Å–∞–º–æ–∫—Ä–∏—Ç–∏–∫–∞']
      },
      VIRGO: {
        name: '–î–µ–≤–∞',
        emoji: '‚ôç',
        element: '–ó–µ–º–ª—è',
        dates: { start: [8, 23], end: [9, 22] },
        energy: '–ê–Ω–∞–ª–∏–∑ –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ',
        qualities: ['–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å', '–ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º'],
        activities: ['–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–∞–Ω–∞–ª–∏–∑', '–∑–¥–æ—Ä–æ–≤—å–µ'],
        avoid: ['—Ö–∞–æ—Å', '–Ω–µ–±—Ä–µ–∂–Ω–æ—Å—Ç—å']
      },
      LIBRA: {
        name: '–í–µ—Å—ã',
        emoji: '‚ôé',
        element: '–í–æ–∑–¥—É—Ö',
        dates: { start: [9, 23], end: [10, 22] },
        energy: '–ì–∞—Ä–º–æ–Ω–∏—è –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ',
        qualities: ['–¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω–æ—Å—Ç—å', '—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å', '—ç—Å—Ç–µ—Ç–∏–∫–∞'],
        activities: ['–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–æ—Ç–Ω–æ—à–µ–Ω–∏—è'],
        avoid: ['–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã', '–Ω–µ—É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω–æ—Å—Ç—å']
      },
      SCORPIO: {
        name: '–°–∫–æ—Ä–ø–∏–æ–Ω',
        emoji: '‚ôè',
        element: '–í–æ–¥–∞',
        dates: { start: [10, 23], end: [11, 21] },
        energy: '–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –≥–ª—É–±–∏–Ω–∞',
        qualities: ['–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å', '–ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è'],
        activities: ['–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–º–∏—Å—Ç–∏–∫–∞'],
        avoid: ['–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ—Å—Ç—å', '–ª–æ–∂—å']
      },
      SAGITTARIUS: {
        name: '–°—Ç—Ä–µ–ª–µ—Ü',
        emoji: '‚ôê',
        element: '–û–≥–æ–Ω—å',
        dates: { start: [11, 22], end: [12, 21] },
        energy: '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è',
        qualities: ['–æ–ø—Ç–∏–º–∏–∑–º', '—Ñ–∏–ª–æ—Å–æ—Ñ–∏—á–Ω–æ—Å—Ç—å', '—Å–≤–æ–±–æ–¥–æ–ª—é–±–∏–µ'],
        activities: ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–æ–±—É—á–µ–Ω–∏–µ', '–¥—É—Ö–æ–≤–Ω—ã–π –ø–æ–∏—Å–∫'],
        avoid: ['–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è', '—Ä—É—Ç–∏–Ω–∞']
      },
      CAPRICORN: {
        name: '–ö–æ–∑–µ—Ä–æ–≥',
        emoji: '‚ôë',
        element: '–ó–µ–º–ª—è',
        dates: { start: [12, 22], end: [1, 19] },
        energy: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞',
        qualities: ['–∞–º–±–∏—Ü–∏–æ–∑–Ω–æ—Å—Ç—å', '–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞', '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å'],
        activities: ['–∫–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã', '–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ'],
        avoid: ['–ª–µ–≥–∫–æ–º—ã—Å–ª–∏–µ', '—Ö–∞–æ—Å']
      },
      AQUARIUS: {
        name: '–í–æ–¥–æ–ª–µ–π',
        emoji: '‚ôí',
        element: '–í–æ–∑–¥—É—Ö',
        dates: { start: [1, 20], end: [2, 18] },
        energy: '–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –∏ –¥—Ä—É–∂–±–∞',
        qualities: ['–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å', '–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å', '–≥—É–º–∞–Ω–Ω–æ—Å—Ç—å'],
        activities: ['–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏', '–≥—Ä—É–ø–ø–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'],
        avoid: ['–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–∑–º', '–∏–∑–æ–ª—è—Ü–∏—è']
      },
      PISCES: {
        name: '–†—ã–±—ã',
        emoji: '‚ôì',
        element: '–í–æ–¥–∞',
        dates: { start: [2, 19], end: [3, 20] },
        energy: '–ò–Ω—Ç—É–∏—Ü–∏—è –∏ —Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ',
        qualities: ['–∏–Ω—Ç—É–∏—Ü–∏—è', '—Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ', '–¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å'],
        activities: ['–º–µ–¥–∏—Ç–∞—Ü–∏—è', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–ø–æ–º–æ—â—å –¥—Ä—É–≥–∏–º'],
        avoid: ['–º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–º', '–∂–µ—Å—Ç–æ–∫–æ—Å—Ç—å']
      }
    };
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ª—É–Ω–Ω–æ–π —Ñ–∞–∑—ã
   */
  getCurrentMoonPhase(date = new Date()) {
    try {
      const lunarDay = this.calculateLunarDay(date);
      
      if (lunarDay === 1) return 'NEW_MOON';
      if (lunarDay >= 2 && lunarDay <= 7) return 'WAXING_CRESCENT';
      if (lunarDay === 8) return 'FIRST_QUARTER';
      if (lunarDay >= 9 && lunarDay <= 14) return 'WAXING_GIBBOUS';
      if (lunarDay === 15) return 'FULL_MOON';
      if (lunarDay >= 16 && lunarDay <= 21) return 'WANING_GIBBOUS';
      if (lunarDay === 22) return 'LAST_QUARTER';
      if (lunarDay >= 23) return 'WANING_CRESCENT';

      return 'WANING_CRESCENT'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    } catch (error) {
      logger.error('Error calculating current moon phase', { error: error.message, date });
      throw error;
    }
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ª—É–Ω–Ω–æ–≥–æ –¥–Ω—è
   */
  calculateLunarDay(date) {
    try {
      // –≠—Ç–∞–ª–æ–Ω–Ω–æ–µ –Ω–æ–≤–æ–ª—É–Ω–∏–µ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ)
      const referenceNewMoon = new Date('2024-01-11T11:57:00Z');
      const lunarCycle = 29.53058867; // –°–∏–Ω–æ–¥–∏—á–µ—Å–∫–∏–π –º–µ—Å—è—Ü –≤ –¥–Ω—è—Ö
      
      const timeDiff = date.getTime() - referenceNewMoon.getTime();
      const daysDiff = timeDiff / (1000 * 60 * 60 * 24);
      
      let lunarDay = (daysDiff % lunarCycle) + 1;
      if (lunarDay <= 0) lunarDay += lunarCycle;
      
      return Math.floor(lunarDay);

    } catch (error) {
      logger.error('Error calculating lunar day', { error: error.message, date });
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –¥–∞—Ç—ã
   */
  getZodiacSign(date) {
    try {
      const month = date.getMonth() + 1;
      const day = date.getDate();

      for (const [sign, data] of Object.entries(this.zodiacSigns)) {
        const { start, end } = data.dates;
        
        if (
          (month === start[0] && day >= start[1]) ||
          (month === end[0] && day <= end[1]) ||
          (start[0] === 12 && month === 1 && day <= end[1]) // –ö–æ–∑–µ—Ä–æ–≥ —á–µ—Ä–µ–∑ –ù–æ–≤—ã–π –≥–æ–¥
        ) {
          return sign;
        }
      }

      return 'CAPRICORN'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    } catch (error) {
      logger.error('Error getting zodiac sign', { error: error.message, date });
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –¥–µ–Ω—å
   */
  getDailyRecommendations(date = new Date()) {
    try {
      const moonPhase = this.getCurrentMoonPhase(date);
      const zodiacSign = this.getZodiacSign(date);
      const lunarDay = this.calculateLunarDay(date);

      const phaseData = this.lunarPhases[moonPhase];
      const zodiacData = this.zodiacSigns[zodiacSign];

      const recommendations = {
        date: date.toISOString().split('T')[0],
        lunarDay,
        moonPhase: {
          phase: moonPhase,
          name: phaseData.name,
          emoji: phaseData.emoji,
          energy: phaseData.energy,
          description: phaseData.description
        },
        zodiacSign: {
          sign: zodiacSign,
          name: zodiacData.name,
          emoji: zodiacData.emoji,
          element: zodiacData.element,
          energy: zodiacData.energy
        },
        activities: {
          recommended: [
            ...phaseData.activities.recommended,
            ...zodiacData.activities
          ],
          avoid: [
            ...phaseData.activities.avoid,
            ...zodiacData.avoid
          ]
        },
        tarotFocus: phaseData.tarotFocus,
        energy: this.combineEnergies(phaseData.energy, zodiacData.energy),
        specialAdvice: this.getSpecialAdvice(moonPhase, zodiacSign, lunarDay)
      };

      return recommendations;

    } catch (error) {
      logger.error('Error getting daily recommendations', { error: error.message, date });
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ –ø–µ—Ä–∏–æ–¥
   */
  getLunarCalendar(startDate, endDate) {
    try {
      const calendar = [];
      const currentDate = new Date(startDate);

      while (currentDate <= endDate) {
        const dayData = this.getDailyRecommendations(currentDate);
        calendar.push(dayData);
        
        currentDate.setDate(currentDate.getDate() + 1);
      }

      return {
        period: {
          start: startDate.toISOString().split('T')[0],
          end: endDate.toISOString().split('T')[0],
          totalDays: calendar.length
        },
        calendar,
        summary: this.generateCalendarSummary(calendar)
      };

    } catch (error) {
      logger.error('Error generating lunar calendar', { error: error.message, startDate, endDate });
      throw error;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  findFavorableDays(activity, startDate, endDate) {
    try {
      const calendar = this.getLunarCalendar(startDate, endDate);
      const favorableDays = [];

      const activityKeywords = activity.toLowerCase();

      for (const day of calendar.calendar) {
        const isRecommended = day.activities.recommended.some(rec => 
          rec.toLowerCase().includes(activityKeywords) ||
          activityKeywords.includes(rec.toLowerCase())
        );

        const isAvoided = day.activities.avoid.some(avoid => 
          avoid.toLowerCase().includes(activityKeywords) ||
          activityKeywords.includes(avoid.toLowerCase())
        );

        if (isRecommended && !isAvoided) {
          favorableDays.push({
            ...day,
            favorabilityScore: this.calculateFavorabilityScore(day, activity)
          });
        }
      }

      return {
        activity,
        period: calendar.period,
        favorableDays: favorableDays.sort((a, b) => b.favorabilityScore - a.favorabilityScore),
        totalFound: favorableDays.length,
        bestDay: favorableDays.length > 0 ? favorableDays[0] : null
      };

    } catch (error) {
      logger.error('Error finding favorable days', { error: error.message, activity, startDate, endDate });
      throw error;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ª—É–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏
   */
  analyzeLunarCompatibility(birthDate, targetDate = new Date()) {
    try {
      const birthMoonPhase = this.getCurrentMoonPhase(birthDate);
      const currentMoonPhase = this.getCurrentMoonPhase(targetDate);
      
      const birthZodiac = this.getZodiacSign(birthDate);
      const currentZodiac = this.getZodiacSign(targetDate);

      const phaseCompatibility = this.calculatePhaseCompatibility(birthMoonPhase, currentMoonPhase);
      const zodiacCompatibility = this.calculateZodiacCompatibility(birthZodiac, currentZodiac);

      return {
        birthData: {
          date: birthDate.toISOString().split('T')[0],
          moonPhase: this.lunarPhases[birthMoonPhase],
          zodiacSign: this.zodiacSigns[birthZodiac]
        },
        currentData: {
          date: targetDate.toISOString().split('T')[0],
          moonPhase: this.lunarPhases[currentMoonPhase],
          zodiacSign: this.zodiacSigns[currentZodiac]
        },
        compatibility: {
          phase: phaseCompatibility,
          zodiac: zodiacCompatibility,
          overall: Math.round((phaseCompatibility.score + zodiacCompatibility.score) / 2),
          description: this.generateCompatibilityDescription(phaseCompatibility, zodiacCompatibility)
        },
        recommendations: this.generateCompatibilityRecommendations(phaseCompatibility, zodiacCompatibility)
      };

    } catch (error) {
      logger.error('Error analyzing lunar compatibility', { error: error.message, birthDate, targetDate });
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–Ω–∞—á–∏–º—ã—Ö –ª—É–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
   */
  getUpcomingLunarEvents(startDate = new Date(), daysAhead = 30) {
    try {
      const events = [];
      const currentDate = new Date(startDate);
      const endDate = new Date(startDate);
      endDate.setDate(endDate.getDate() + daysAhead);

      while (currentDate <= endDate) {
        const moonPhase = this.getCurrentMoonPhase(currentDate);
        const lunarDay = this.calculateLunarDay(currentDate);

        // –ö–ª—é—á–µ–≤—ã–µ –ª—É–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        if ([1, 8, 15, 22].includes(lunarDay)) {
          events.push({
            date: new Date(currentDate).toISOString().split('T')[0],
            type: 'moon_phase',
            phase: moonPhase,
            lunarDay,
            name: this.lunarPhases[moonPhase].name,
            emoji: this.lunarPhases[moonPhase].emoji,
            significance: '–ö–ª—é—á–µ–≤–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã',
            energy: this.lunarPhases[moonPhase].energy,
            daysFromNow: Math.ceil((currentDate - startDate) / (1000 * 60 * 60 * 24))
          });
        }

        // –°–º–µ–Ω–∞ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
        const zodiacSign = this.getZodiacSign(currentDate);
        const previousDate = new Date(currentDate);
        previousDate.setDate(previousDate.getDate() - 1);
        const previousZodiac = this.getZodiacSign(previousDate);

        if (zodiacSign !== previousZodiac) {
          events.push({
            date: new Date(currentDate).toISOString().split('T')[0],
            type: 'zodiac_change',
            fromSign: previousZodiac,
            toSign: zodiacSign,
            name: `–ü–µ—Ä–µ—Ö–æ–¥ –≤ ${this.zodiacSigns[zodiacSign].name}`,
            emoji: this.zodiacSigns[zodiacSign].emoji,
            significance: '–°–º–µ–Ω–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –≤–ª–∏—è–Ω–∏—è',
            energy: this.zodiacSigns[zodiacSign].energy,
            daysFromNow: Math.ceil((currentDate - startDate) / (1000 * 60 * 60 * 24))
          });
        }

        currentDate.setDate(currentDate.getDate() + 1);
      }

      return {
        period: {
          start: startDate.toISOString().split('T')[0],
          end: endDate.toISOString().split('T')[0],
          daysAhead
        },
        events: events.sort((a, b) => a.daysFromNow - b.daysFromNow),
        nextMajorEvent: events.find(e => e.type === 'moon_phase') || null
      };

    } catch (error) {
      logger.error('Error getting upcoming lunar events', { error: error.message, startDate, daysAhead });
      throw error;
    }
  }

  /**
   * –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–π —Ñ–∞–∑—ã –ª—É–Ω—ã –∏ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
   */
  combineEnergies(moonEnergy, zodiacEnergy) {
    return `${moonEnergy} –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å ${zodiacEnergy.toLowerCase()}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
   */
  getSpecialAdvice(moonPhase, zodiacSign, lunarDay) {
    const advice = [];

    // –û—Å–æ–±—ã–µ –ª—É–Ω–Ω—ã–µ –¥–Ω–∏
    if (lunarDay === 1) {
      advice.push('–ù–æ–≤–æ–ª—É–Ω–∏–µ - –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≥–∞–¥—ã–≤–∞–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π');
    } else if (lunarDay === 15) {
      advice.push('–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ - –≤—Ä–µ–º—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å —ç–º–æ—Ü–∏—è–º–∏');
    } else if ([8, 22].includes(lunarDay)) {
      advice.push('–ß–µ—Ç–≤–µ—Ä—Ç—å –ª—É–Ω—ã - –≤—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π');
    }

    // –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∑–Ω–∞–∫–æ–≤
    const zodiacData = this.zodiacSigns[zodiacSign];
    if (zodiacData.element === '–û–≥–æ–Ω—å') {
      advice.push('–û–≥–Ω–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º –∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ');
    } else if (zodiacData.element === '–í–æ–¥–∞') {
      advice.push('–í–æ–¥–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è —É—Å–∏–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç—É–∏—Ü–∏—é –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
    } else if (zodiacData.element === '–í–æ–∑–¥—É—Ö') {
      advice.push('–í–æ–∑–¥—É—à–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç—Å—Ç–≤—É–µ—Ç –æ–±—â–µ–Ω–∏—é –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    } else if (zodiacData.element === '–ó–µ–º–ª—è') {
      advice.push('–ó–µ–º–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–ª–∞ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã');
    }

    return advice;
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ª—É–Ω–Ω—ã—Ö —Ñ–∞–∑
   */
  calculatePhaseCompatibility(phase1, phase2) {
    const phaseOrder = ['NEW_MOON', 'WAXING_CRESCENT', 'FIRST_QUARTER', 'WAXING_GIBBOUS', 
                       'FULL_MOON', 'WANING_GIBBOUS', 'LAST_QUARTER', 'WANING_CRESCENT'];
    
    const index1 = phaseOrder.indexOf(phase1);
    const index2 = phaseOrder.indexOf(phase2);
    
    let distance = Math.abs(index1 - index2);
    if (distance > 4) distance = 8 - distance;

    const score = 100 - (distance * 15);

    return {
      score: Math.max(score, 20),
      level: score >= 80 ? 'high' : score >= 60 ? 'medium' : 'low',
      description: this.getPhaseCompatibilityDescription(distance)
    };
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
   */
  calculateZodiacCompatibility(sign1, sign2) {
    const compatibilityMatrix = {
      ARIES: { high: ['LEO', 'SAGITTARIUS'], medium: ['GEMINI', 'AQUARIUS'], low: ['CANCER', 'CAPRICORN'] },
      TAURUS: { high: ['VIRGO', 'CAPRICORN'], medium: ['CANCER', 'PISCES'], low: ['LEO', 'AQUARIUS'] },
      GEMINI: { high: ['LIBRA', 'AQUARIUS'], medium: ['ARIES', 'LEO'], low: ['VIRGO', 'PISCES'] },
      CANCER: { high: ['SCORPIO', 'PISCES'], medium: ['TAURUS', 'VIRGO'], low: ['ARIES', 'LIBRA'] },
      LEO: { high: ['ARIES', 'SAGITTARIUS'], medium: ['GEMINI', 'LIBRA'], low: ['TAURUS', 'SCORPIO'] },
      VIRGO: { high: ['TAURUS', 'CAPRICORN'], medium: ['CANCER', 'SCORPIO'], low: ['GEMINI', 'SAGITTARIUS'] },
      LIBRA: { high: ['GEMINI', 'AQUARIUS'], medium: ['LEO', 'SAGITTARIUS'], low: ['CANCER', 'CAPRICORN'] },
      SCORPIO: { high: ['CANCER', 'PISCES'], medium: ['VIRGO', 'CAPRICORN'], low: ['LEO', 'AQUARIUS'] },
      SAGITTARIUS: { high: ['ARIES', 'LEO'], medium: ['LIBRA', 'AQUARIUS'], low: ['VIRGO', 'PISCES'] },
      CAPRICORN: { high: ['TAURUS', 'VIRGO'], medium: ['SCORPIO', 'PISCES'], low: ['ARIES', 'LIBRA'] },
      AQUARIUS: { high: ['GEMINI', 'LIBRA'], medium: ['ARIES', 'SAGITTARIUS'], low: ['TAURUS', 'SCORPIO'] },
      PISCES: { high: ['CANCER', 'SCORPIO'], medium: ['TAURUS', 'CAPRICORN'], low: ['GEMINI', 'SAGITTARIUS'] }
    };

    const matrix = compatibilityMatrix[sign1];
    let level = 'medium';
    let score = 60;

    if (matrix.high.includes(sign2)) {
      level = 'high';
      score = 85;
    } else if (matrix.low.includes(sign2)) {
      level = 'low';
      score = 35;
    }

    return {
      score,
      level,
      description: this.getZodiacCompatibilityDescription(sign1, sign2, level)
    };
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏ –¥–Ω—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  calculateFavorabilityScore(dayData, activity) {
    let score = 50; // –ë–∞–∑–æ–≤—ã–π —Å—á–µ—Ç

    // –ë–æ–Ω—É—Å—ã –∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const matchingRecommendations = dayData.activities.recommended.filter(rec => 
      rec.toLowerCase().includes(activity.toLowerCase()) ||
      activity.toLowerCase().includes(rec.toLowerCase())
    );
    score += matchingRecommendations.length * 20;

    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–µ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const matchingAvoid = dayData.activities.avoid.filter(avoid => 
      avoid.toLowerCase().includes(activity.toLowerCase()) ||
      activity.toLowerCase().includes(avoid.toLowerCase())
    );
    score -= matchingAvoid.length * 30;

    // –ë–æ–Ω—É—Å—ã –∑–∞ –æ—Å–æ–±—ã–µ –ª—É–Ω–Ω—ã–µ –¥–Ω–∏
    if ([1, 15].includes(dayData.lunarDay)) {
      score += 15;
    }

    return Math.max(0, Math.min(100, score));
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
   */
  generateCalendarSummary(calendar) {
    const phaseCount = {};
    const zodiacCount = {};

    for (const day of calendar) {
      const phase = day.moonPhase.phase;
      const zodiac = day.zodiacSign.sign;

      phaseCount[phase] = (phaseCount[phase] || 0) + 1;
      zodiacCount[zodiac] = (zodiacCount[zodiac] || 0) + 1;
    }

    const dominantPhase = Object.keys(phaseCount).reduce((a, b) => 
      phaseCount[a] > phaseCount[b] ? a : b
    );

    const dominantZodiac = Object.keys(zodiacCount).reduce((a, b) => 
      zodiacCount[a] > zodiacCount[b] ? a : b
    );

    return {
      dominantPhase: {
        phase: dominantPhase,
        name: this.lunarPhases[dominantPhase].name,
        days: phaseCount[dominantPhase]
      },
      dominantZodiac: {
        sign: dominantZodiac,
        name: this.zodiacSigns[dominantZodiac].name,
        days: zodiacCount[dominantZodiac]
      },
      phaseDistribution: phaseCount,
      zodiacDistribution: zodiacCount,
      recommendations: this.generatePeriodRecommendations(dominantPhase, dominantZodiac)
    };
  }

  /**
   * –û–ø–∏—Å–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ñ–∞–∑
   */
  getPhaseCompatibilityDescription(distance) {
    if (distance === 0) return '–ò–¥–µ–∞–ª—å–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ª—É–Ω–Ω—ã–µ —Ñ–∞–∑—ã';
    if (distance <= 1) return '–û—Ç–ª–∏—á–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –±–ª–∏–∑–∫–∏–µ —ç–Ω–µ—Ä–≥–∏–∏';
    if (distance <= 2) return '–•–æ—Ä–æ—à–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –¥–æ–ø–æ–ª–Ω—è—é—â–∏–µ —ç–Ω–µ—Ä–≥–∏–∏';
    if (distance <= 3) return '–°—Ä–µ–¥–Ω—è—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —Ä–∞–∑–ª–∏—á–Ω—ã–µ, –Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —ç–Ω–µ—Ä–≥–∏–∏';
    return '–ù–∏–∑–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —ç–Ω–µ—Ä–≥–∏–∏';
  }

  /**
   * –û–ø–∏—Å–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
   */
  getZodiacCompatibilityDescription(sign1, sign2, level) {
    const sign1Data = this.zodiacSigns[sign1];
    const sign2Data = this.zodiacSigns[sign2];

    if (level === 'high') {
      return `–û—Ç–ª–∏—á–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É ${sign1Data.name} –∏ ${sign2Data.name}`;
    } else if (level === 'medium') {
      return `–•–æ—Ä–æ—à–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É ${sign1Data.name} –∏ ${sign2Data.name}`;
    } else {
      return `–°–ª–æ–∂–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É ${sign1Data.name} –∏ ${sign2Data.name}`;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
   */
  generateCompatibilityDescription(phaseComp, zodiacComp) {
    const overall = Math.round((phaseComp.score + zodiacComp.score) / 2);
    
    if (overall >= 80) {
      return '–û—Ç–ª–∏—á–Ω–∞—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å! –≠–Ω–µ—Ä–≥–∏–∏ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ –¥–æ–ø–æ–ª–Ω—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞.';
    } else if (overall >= 60) {
      return '–•–æ—Ä–æ—à–∞—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —Ä–∞–∑–ª–∏—á–∏—è–º–∏ –≤ —ç–Ω–µ—Ä–≥–∏—è—Ö.';
    } else {
      return '–°–ª–æ–∂–Ω–∞—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, —Ç—Ä–µ–±—É—é—â–∞—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.';
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
   */
  generateCompatibilityRecommendations(phaseComp, zodiacComp) {
    const recommendations = [];

    if (phaseComp.level === 'low') {
      recommendations.push('–£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ –ª—É–Ω–Ω—ã—Ö —Ü–∏–∫–ª–∞—Ö –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –¥–µ–ª');
    }

    if (zodiacComp.level === 'low') {
      recommendations.push('–†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–∏–π –≤ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö');
    }

    if (phaseComp.level === 'high' && zodiacComp.level === 'high') {
      recommendations.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –æ–±—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —Ü–µ–ª–µ–π');
    }

    return recommendations;
  }

  /**
   * –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
   */
  generatePeriodRecommendations(dominantPhase, dominantZodiac) {
    const phaseData = this.lunarPhases[dominantPhase];
    const zodiacData = this.zodiacSigns[dominantZodiac];

    return [
      `–ü–µ—Ä–∏–æ–¥ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–¥ –≤–ª–∏—è–Ω–∏–µ–º ${phaseData.name}: ${phaseData.energy}`,
      `–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ ${zodiacData.name}: ${zodiacData.energy}`,
      `–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${zodiacData.activities.join(', ')}`,
      `–ò–∑–±–µ–≥–∞–π—Ç–µ: ${zodiacData.avoid.join(', ')}`
    ];
  }
}

module.exports = new LunarService();