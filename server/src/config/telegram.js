// server/src/config/telegram.js
const logger = require('../utils/logger');

class TelegramConfig {
  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN;
    this.webhookUrl = process.env.TELEGRAM_WEBHOOK_URL;
    this.webhookPath = process.env.TELEGRAM_WEBHOOK_PATH || '/webhook/telegram';
    this.webhookSecret = process.env.TELEGRAM_WEBHOOK_SECRET;
    this.adminIds = this.parseAdminIds(process.env.TELEGRAM_ADMIN_IDS);
    this.apiUrl = 'https://api.telegram.org/bot';
    this.maxRetries = 3;
    this.retryDelay = 1000;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  validate() {
    const errors = [];

    if (!this.botToken) {
      errors.push('TELEGRAM_BOT_TOKEN is required');
    } else if (!this.isValidBotToken(this.botToken)) {
      errors.push('TELEGRAM_BOT_TOKEN has invalid format');
    }

    if (this.webhookUrl && !this.isValidUrl(this.webhookUrl)) {
      errors.push('TELEGRAM_WEBHOOK_URL has invalid format');
    }

    if (this.webhookSecret && this.webhookSecret.length < 8) {
      errors.push('TELEGRAM_WEBHOOK_SECRET must be at least 8 characters');
    }

    if (errors.length > 0) {
      throw new Error(`Telegram configuration errors: ${errors.join(', ')}`);
    }

    logger.info('Telegram configuration validated successfully');
    return true;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
   */
  getBotConfig() {
    return {
      token: this.botToken,
      apiUrl: this.getApiUrl(),
      webhook: {
        url: this.webhookUrl,
        path: this.webhookPath,
        secret: this.webhookSecret
      },
      adminIds: this.adminIds,
      options: {
        maxRetries: this.maxRetries,
        retryDelay: this.retryDelay
      }
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ URL API
   */
  getApiUrl() {
    return `${this.apiUrl}${this.botToken}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è webhook
   */
  getWebhookUrl() {
    if (!this.webhookUrl) return null;
    return `${this.webhookUrl}${this.webhookPath}`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
   */
  isValidBotToken(token) {
    if (!token || typeof token !== 'string') return false;
    
    // –§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞: –±–æ—ÇID:—Ç–æ–∫–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789:ABCdefGHIjklMNOpqrsTUVwxyz)
    const tokenRegex = /^\d{8,10}:[A-Za-z0-9_-]{35}$/;
    return tokenRegex.test(token);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
   */
  isValidUrl(url) {
    try {
      const urlObj = new URL(url);
      return urlObj.protocol === 'https:';
    } catch {
      return false;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
   */
  parseAdminIds(adminIdsString) {
    if (!adminIdsString) return [];
    
    try {
      return adminIdsString
        .split(',')
        .map(id => parseInt(id.trim()))
        .filter(id => !isNaN(id) && id > 0);
    } catch (error) {
      logger.warn('Failed to parse admin IDs', { error: error.message });
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
   */
  isAdmin(userId) {
    return this.adminIds.includes(parseInt(userId));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
   */
  getBotCommands() {
    return [
      {
        command: 'start',
        description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã'
      },
      {
        command: 'help',
        description: '–ü–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'
      },
      {
        command: 'reading',
        description: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ'
      },
      {
        command: 'daily',
        description: '–ö–∞—Ä—Ç–∞ –¥–Ω—è'
      },
      {
        command: 'lunar',
        description: '–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å'
      },
      {
        command: 'numerology',
        description: '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑'
      },
      {
        command: 'premium',
        description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Premium –ø–æ–¥–ø–∏—Å–∫–µ'
      },
      {
        command: 'profile',
        description: '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'
      },
      {
        command: 'history',
        description: '–ò—Å—Ç–æ—Ä–∏—è –≥–∞–¥–∞–Ω–∏–π'
      },
      {
        command: 'settings',
        description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'
      }
    ];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WebApp
   */
  getWebAppConfig() {
    return {
      url: process.env.WEBAPP_URL || 'https://mistika.example.com',
      shortName: 'MISTIKA',
      title: 'MISTIKA Tarot',
      description: '–¢–∞—Ä–æ, –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è –∏ –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å'
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  getNotificationSettings() {
    return {
      dailyCard: {
        enabled: process.env.DAILY_NOTIFICATIONS === 'true',
        time: process.env.DAILY_NOTIFICATION_TIME || '09:00',
        timezone: process.env.TIMEZONE || 'Europe/Moscow'
      },
      lunarPhases: {
        enabled: process.env.LUNAR_NOTIFICATIONS === 'true',
        phases: ['new_moon', 'full_moon']
      },
      premium: {
        expiration: {
          enabled: true,
          daysBefore: [7, 3, 1]
        }
      }
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  getLimits() {
    return {
      messageLength: 4096,
      captionLength: 1024,
      buttonsPerRow: 8,
      buttonsPerMessage: 100,
      inlineQueryResults: 50,
      fileUpload: {
        photo: 10 * 1024 * 1024, // 10MB
        document: 50 * 1024 * 1024, // 50MB
        video: 50 * 1024 * 1024, // 50MB
        audio: 50 * 1024 * 1024, // 50MB
        voice: 1024 * 1024 // 1MB
      },
      apiCalls: {
        perSecond: 30,
        perMinute: 20,
        perGroup: 20
      }
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   */
  getKeyboardConfig() {
    return {
      mainMenu: {
        resize_keyboard: true,
        one_time_keyboard: false,
        keyboard: [
          [{ text: 'üîÆ –ù–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ' }, { text: 'üìÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è' }],
          [{ text: 'üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å' }, { text: 'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è' }],
          [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å' }, { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' }],
          [{ text: 'üíé Premium' }, { text: '‚ùì –ü–æ–º–æ—â—å' }]
        ]
      },
      spreadTypes: {
        inline_keyboard: [
          [
            { text: 'üÉè –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞', callback_data: 'spread_one_card' },
            { text: 'üÉèüÉèüÉè –¢—Ä–∏ –∫–∞—Ä—Ç—ã', callback_data: 'spread_three_cards' }
          ],
          [
            { text: 'üåü –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç', callback_data: 'spread_celtic_cross' },
            { text: 'üí´ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π', callback_data: 'spread_custom' }
          ],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
        ]
      },
      premium: {
        inline_keyboard: [
          [
            { text: 'üìÖ –ú–µ—Å—è—Ü - 299‚ÇΩ', callback_data: 'premium_monthly' },
            { text: 'üéØ 3 –º–µ—Å—è—Ü–∞ - 799‚ÇΩ', callback_data: 'premium_quarterly' }
          ],
          [
            { text: '‚≠ê –ì–æ–¥ - 2999‚ÇΩ', callback_data: 'premium_yearly' },
            { text: 'üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥', callback_data: 'premium_trial' }
          ],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
        ]
      }
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  getMessages() {
    return {
      start: {
        new_user: `üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MISTIKA!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã —Å—É–¥—å–±—ã —Å –ø–æ–º–æ—â—å—é:
‚Ä¢ üÉè –¢–∞—Ä–æ –≥–∞–¥–∞–Ω–∏–π
‚Ä¢ üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
‚Ä¢ üåô –õ—É–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.`,
        
        returning_user: `üîÆ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ MISTIKA!

–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å–µ–≥–æ–¥–Ω—è?`
      },
      
      help: `‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é MISTIKA

üîÆ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ /reading - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ
‚Ä¢ /daily - –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è
‚Ä¢ /lunar - –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ /numerology - –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ /premium - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Premium –ø–æ–¥–ø–∏—Å–∫–µ

üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º:
‚Ä¢ /profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /history - –ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö –≥–∞–¥–∞–Ω–∏–π
‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üíé Premium –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≥–∞–¥–∞–Ω–∏–π

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @mistika_support`,

      premium: {
        info: `üíé MISTIKA Premium

–û—Ç–∫—Ä–æ–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∏—Ä–∞:

‚ú® –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ Premium:
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è (–≤–º–µ—Å—Ç–æ 3 –≤ –¥–µ–Ω—å)
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –≥–∞–¥–∞–Ω–∏–π
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üéØ –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:
‚Ä¢ –ú–µ—Å—è—Ü: 299‚ÇΩ
‚Ä¢ 3 –º–µ—Å—è—Ü–∞: 799‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 33%)
‚Ä¢ –ì–æ–¥: 2999‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 50%)

üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 7 –¥–Ω–µ–π!`,

        trial_activated: `üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!

–£ –≤–∞—Å –µ—Å—Ç—å 7 –¥–Ω–µ–π –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º Premium.
–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ MISTIKA!`,

        expired: `üíé –í–∞—à–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞

–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ MISTIKA.`
      },

      errors: {
        general: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        rate_limit: '‚è±Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.',
        premium_required: 'üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.',
        maintenance: 'üîß –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.'
      }
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä
   */
  getInlineKeyboards() {
    return {
      webApp: {
        inline_keyboard: [
          [{
            text: 'üîÆ –û—Ç–∫—Ä—ã—Ç—å MISTIKA',
            web_app: { url: this.getWebAppConfig().url }
          }]
        ]
      },
      
      support: {
        inline_keyboard: [
          [
            { text: 'üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', url: 'https://t.me/mistika_support' },
            { text: 'üìö FAQ', url: 'https://mistika.example.com/faq' }
          ]
        ]
      }
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–∞–π–ª–æ–≤
   */
  getFileConfig() {
    return {
      allowedTypes: {
        images: ['image/jpeg', 'image/png', 'image/webp'],
        documents: ['application/pdf'],
        audio: ['audio/mpeg', 'audio/ogg']
      },
      maxSizes: {
        avatar: 5 * 1024 * 1024, // 5MB
        document: 20 * 1024 * 1024 // 20MB
      },
      uploadPath: process.env.UPLOAD_PATH || './uploads/telegram'
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  getSecurityConfig() {
    return {
      rateLimiting: {
        windowMs: 60 * 1000, // 1 minute
        maxRequests: 30,
        skipAdmins: true
      },
      antiSpam: {
        enabled: true,
        maxIdenticalMessages: 3,
        timeWindow: 60 * 1000
      },
      blockedUsers: this.parseBlockedUsers(process.env.TELEGRAM_BLOCKED_USERS),
      allowedChats: this.parseAllowedChats(process.env.TELEGRAM_ALLOWED_CHATS)
    };
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  parseBlockedUsers(blockedUsersString) {
    if (!blockedUsersString) return [];
    
    try {
      return blockedUsersString
        .split(',')
        .map(id => parseInt(id.trim()))
        .filter(id => !isNaN(id) && id > 0);
    } catch (error) {
      logger.warn('Failed to parse blocked users', { error: error.message });
      return [];
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
   */
  parseAllowedChats(allowedChatsString) {
    if (!allowedChatsString) return [];
    
    try {
      return allowedChatsString
        .split(',')
        .map(id => id.trim())
        .filter(id => id.length > 0);
    } catch (error) {
      logger.warn('Failed to parse allowed chats', { error: error.message });
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  getLocalizationConfig() {
    return {
      defaultLanguage: 'ru',
      supportedLanguages: ['ru', 'en'],
      dateFormat: {
        ru: 'dd.MM.yyyy',
        en: 'MM/dd/yyyy'
      },
      timeFormat: {
        ru: 'HH:mm',
        en: 'h:mm a'
      }
    };
  }

  /**
   * –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ª–æ–≥–æ–≤
   */
  maskToken(token) {
    if (!token) return '';
    const parts = token.split(':');
    if (parts.length !== 2) return '***';
    return `${parts[0]}:${'*'.repeat(parts[1].length)}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
   */
  getConfigInfo() {
    return {
      hasToken: !!this.botToken,
      maskedToken: this.maskToken(this.botToken),
      hasWebhook: !!this.webhookUrl,
      adminsCount: this.adminIds.length,
      environment: process.env.NODE_ENV || 'development'
    };
  }
}

module.exports = new TelegramConfig();