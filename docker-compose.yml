version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: mistika-postgres
    environment:
      POSTGRES_DB: mistika
      POSTGRES_USER: mistika_user
      POSTGRES_PASSWORD: mistika_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/src/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    networks:
      - mistika-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mistika-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mistika-network
    restart: unless-stopped

  # Backend Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: mistika-server
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://mistika_user:mistika_password@postgres:5432/mistika
      REDIS_URL: redis://:redis_password@redis:6379
      JWT_SECRET: your_jwt_secret_here
      TELEGRAM_BOT_TOKEN: your_telegram_bot_token
      TELEGRAM_WEBHOOK_URL: https://your-domain.com/api/telegram/webhook
      YANDEX_GPT_API_KEY: your_yandex_gpt_key
      KANDINSKY_API_KEY: your_kandinsky_key
      OPENAI_API_KEY: your_openai_key
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: your_email@gmail.com
      SMTP_PASS: your_email_password
    volumes:
      - ./server:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
    networks:
      - mistika-network
    restart: unless-stopped
    command: npm run dev

  # Client (React App)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: mistika-client
    environment:
      REACT_APP_API_URL: http://localhost:3000/api
      REACT_APP_WEBAPP_URL: http://localhost:3001
      REACT_APP_TELEGRAM_BOT_USERNAME: your_bot_username
    volumes:
      - ./client:/app
      - /app/node_modules
    ports:
      - "3001:3000"
    depends_on:
      - server
    networks:
      - mistika-network
    restart: unless-stopped
    command: npm start

  # Telegram Bot
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: mistika-bot
    environment:
      NODE_ENV: development
      TELEGRAM_BOT_TOKEN: your_telegram_bot_token
      API_BASE_URL: http://server:3000/api
      WEBAPP_URL: http://localhost:3001
    volumes:
      - ./bot:/app
      - /app/node_modules
    depends_on:
      - server
      - postgres
      - redis
    networks:
      - mistika-network
    restart: unless-stopped
    command: npm run dev

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mistika-nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./client/build:/usr/share/nginx/html
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - server
      - client
    networks:
      - mistika-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mistika-prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - mistika-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: mistika-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    networks:
      - mistika-network
    restart: unless-stopped

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: mistika-node-exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - mistika-network
    restart: unless-stopped

  # Redis Exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: mistika-redis-exporter
    environment:
      REDIS_ADDR: redis:6379
      REDIS_PASSWORD: redis_password
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - mistika-network
    restart: unless-stopped

  # Postgres Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: mistika-postgres-exporter
    environment:
      DATA_SOURCE_NAME: postgresql://mistika_user:mistika_password@postgres:5432/mistika?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    networks:
      - mistika-network
    restart: unless-stopped

networks:
  mistika-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local